namespace FlatData;

enum ParcelType : int {
	None = 0,
	Character = 1,
	Currency = 2,
	Equipment = 3,
	Item = 4,
	GachaGroup = 5,
	Product = 6,
	Shop = 7,
	MemoryLobby = 8,
	AccountExp = 9,
	CharacterExp = 10,
	FavorExp = 11,
	TSS = 12,
	Furniture = 13,
	ShopRefresh = 14,
	LocationExp = 15,
	Recipe = 16,
	CharacterWeapon = 17,
	ProductMonthly = 18,
	CharacterGear = 19,
	IdCardBackground = 20,
	Emblem = 21,
	Sticker = 22,
	Costume = 23
}

enum School : int {
	None = 0,
	Hyakkiyako = 1,
	RedWinter = 2,
	Trinity = 3,
	Gehenna = 4,
	Abydos = 5,
	Millennium = 6,
	Arius = 7,
	Shanhaijing = 8,
	Valkyrie = 9,
	WildHunt = 10,
	SRT = 11,
	SCHALE = 12,
	ETC = 13,
	Tokiwadai = 14,
	Sakugawa = 15,
	Highlander = 16
}

enum AcademyMessageConditions : int {
	None = 0,
	FavorRankUp = 1,
	AcademySchedule = 2,
	Answer = 3,
	Feedback = 4
}

enum AcademyMessageTypes : int {
	None = 0,
	Text = 1,
	Image = 2
}

enum Tag : int {
	A = 0,
	a = 1,
	B = 2,
	b = 3,
	C = 4,
	c = 5,
	D = 6,
	d = 7,
	E = 8,
	e = 9,
	F = 10,
	f = 11,
	G = 12,
	g = 13,
	H = 14,
	h = 15,
	I = 16,
	i = 17,
	J = 18,
	j = 19,
	K = 20,
	k = 21,
	L = 22,
	l = 23,
	M = 24,
	m = 25,
	N = 26,
	n = 27,
	O = 28,
	o = 29,
	P = 30,
	p = 31,
	Q = 32,
	q = 33,
	R = 34,
	r = 35,
	S = 36,
	s = 37,
	T = 38,
	t = 39,
	U = 40,
	u = 41,
	V = 42,
	v = 43,
	W = 44,
	w = 45,
	X = 46,
	x = 47,
	Y = 48,
	y = 49,
	Z = 50,
	z = 51,
	aA = 52,
	aa = 53,
	aB = 54,
	ab = 55,
	aC = 56,
	ac = 57,
	aD = 58,
	ad = 59,
	aE = 60,
	ae = 61,
	aF = 62,
	af = 63,
	aG = 64,
	ag = 65,
	aH = 66,
	ah = 67,
	aI = 68,
	ai = 69,
	aJ = 70,
	aj = 71,
	aK = 72,
	ak = 73,
	aL = 74,
	al = 75,
	aM = 76,
	am = 77,
	aN = 78,
	an = 79,
	aO = 80,
	ao = 81,
	aP = 82,
	ap = 83,
	aQ = 84,
	aq = 85,
	aR = 86,
	ar = 87,
	aS = 88,
	as = 89,
	aT = 90,
	at = 91,
	aU = 92,
	au = 93,
	aV = 94,
	av = 95,
	aW = 96,
	aw = 97,
	aX = 98,
	ax = 99,
	aY = 100,
	ay = 101,
	aZ = 102,
	az = 103,
	BA = 104,
	Ba = 105,
	BB = 106,
	Bb = 107,
	BC = 108,
	Bc = 109,
	BD = 110,
	Bd = 111,
	BE = 112,
	Be = 113,
	BF = 114,
	Bf = 115,
	BG = 116,
	Bg = 117,
	BH = 118,
	Bh = 119,
	BI = 120,
	Bi = 121,
	BJ = 122,
	Bj = 123,
	BK = 124,
	Bk = 125,
	BL = 126,
	Bl = 127,
	BM = 128,
	Bm = 129,
	BN = 130,
	Bn = 131,
	BO = 132,
	Bo = 133,
	BP = 134,
	Bp = 135,
	BQ = 136,
	Bq = 137,
	BR = 138,
	Br = 139,
	BS = 140,
	Bs = 141,
	BT = 142,
	Bt = 143,
	BU = 144,
	Bu = 145,
	BV = 146,
	Bv = 147,
	BW = 148,
	Bw = 149,
	BX = 150,
	Bx = 151,
	BY = 152,
	By = 153,
	BZ = 154,
	Bz = 155,
	bA = 156,
	ba = 157,
	bB = 158,
	bb = 159,
	bC = 160,
	bc = 161,
	bD = 162,
	bd = 163,
	bE = 164,
	be = 165,
	bF = 166,
	bf = 167,
	bG = 168,
	bg = 169,
	bH = 170,
	bh = 171,
	bI = 172,
	bi = 173,
	bJ = 174,
	bj = 175,
	bK = 176,
	bk = 177,
	bL = 178,
	bl = 179,
	bM = 180,
	bm = 181,
	bN = 182,
	bn = 183,
	bO = 184,
	bo = 185,
	bP = 186,
	bp = 187,
	bQ = 188,
	bq = 189,
	bR = 190,
	br = 191,
	bS = 192,
	bs = 193,
	bT = 194,
	bt = 195,
	bU = 196,
	bu = 197,
	bV = 198,
	bv = 199,
	bW = 200,
	bw = 201,
	bX = 202,
	bx = 203,
	bY = 204,
	by = 205,
	bZ = 206,
	bz = 207,
	CA = 208,
	Ca = 209,
	CB = 210,
	Cb = 211,
	CC = 212,
	Cc = 213,
	CD = 214,
	Cd = 215,
	CE = 216,
	Ce = 217,
	CF = 218,
	Cf = 219,
	CG = 220,
	Cg = 221,
	CH = 222,
	Ch = 223,
	CI = 224,
	Ci = 225,
	CJ = 226,
	Cj = 227,
	CK = 228,
	Ck = 229,
	CL = 230,
	Cl = 231,
	CM = 232,
	Cm = 233,
	CN = 234,
	Cn = 235,
	CO = 236,
	Co = 237,
	CP = 238,
	Cp = 239,
	CQ = 240,
	Cq = 241,
	CR = 242,
	Cr = 243,
	CS = 244,
	Cs = 245,
	CT = 246,
	Ct = 247,
	CU = 248,
	Cu = 249,
	CV = 250,
	Cv = 251,
	CW = 252,
	Cw = 253,
	CX = 254,
	Cx = 255,
	CY = 256,
	Cy = 257,
	CZ = 258,
	Cz = 259,
	cA = 260,
	ca = 261,
	cB = 262,
	cb = 263,
	cC = 264,
	cc = 265,
	cD = 266,
	cd = 267,
	cE = 268,
	ce = 269,
	cF = 270,
	cf = 271,
	cG = 272,
	cg = 273,
	cH = 274,
	ch = 275,
	cI = 276,
	ci = 277,
	cJ = 278,
	cj = 279,
	cK = 280,
	ck = 281,
	cL = 282,
	cl = 283,
	cM = 284,
	cm = 285,
	cN = 286,
	cn = 287,
	cO = 288,
	co = 289,
	cP = 290,
	cp = 291,
	cQ = 292,
	cq = 293,
	cR = 294,
	cr = 295,
	cS = 296,
	cs = 297,
	cT = 298,
	ct = 299,
	cU = 300,
	cu = 301,
	cV = 302,
	cv = 303,
	cW = 304,
	cw = 305,
	cX = 306,
	cx = 307,
	cY = 308,
	cy = 309,
	cZ = 310,
	cz = 311,
	DA = 312,
	Da = 313,
	DB = 314,
	Db = 315,
	DC = 316,
	Dc = 317,
	DD = 318,
	Dd = 319,
	DE = 320,
	De = 321,
	DF = 322,
	Df = 323,
	DG = 324,
	Dg = 325,
	DH = 326,
	Dh = 327,
	DI = 328,
	Di = 329,
	DJ = 330,
	Dj = 331,
	DK = 332,
	Dk = 333,
	DL = 334,
	Dl = 335,
	DM = 336,
	Dm = 337,
	DN = 338,
	Dn = 339,
	DO = 340,
	Do = 341,
	DP = 342,
	Dp = 343,
	DQ = 344,
	Dq = 345,
	DR = 346,
	Dr = 347,
	DS = 348,
	Ds = 349,
	DT = 350,
	Dt = 351,
	DU = 352,
	Du = 353,
	DV = 354,
	Dv = 355,
	DW = 356,
	Dw = 357,
	DX = 358,
	Dx = 359,
	DY = 360,
	Dy = 361,
	DZ = 362,
	Dz = 363,
	dA = 364,
	da = 365,
	dB = 366,
	db = 367,
	dC = 368,
	dc = 369,
	dD = 370,
	dd = 371,
	dE = 372,
	de = 373,
	dF = 374,
	df = 375,
	dG = 376,
	dg = 377,
	dH = 378,
	dh = 379,
	dI = 380,
	di = 381,
	dJ = 382,
	dj = 383,
	dK = 384,
	dk = 385,
	dL = 386,
	dl = 387,
	dM = 388,
	dm = 389,
	dN = 390,
	dn = 391,
	dO = 392,
	do = 393,
	dP = 394,
	dp = 395,
	dQ = 396,
	dq = 397,
	dR = 398,
	dr = 399,
	dS = 400,
	ds = 401,
	dT = 402,
	dt = 403,
	dU = 404,
	du = 405,
	dV = 406,
	dv = 407,
	dW = 408,
	dw = 409,
	dX = 410,
	dx = 411,
	dY = 412,
	dy = 413,
	dZ = 414,
	dz = 415,
	EA = 416,
	Ea = 417,
	EB = 418,
	Eb = 419,
	EC = 420,
	Ec = 421,
	ED = 422,
	Ed = 423,
	EE = 424,
	Ee = 425,
	EF = 426,
	Ef = 427,
	EG = 428,
	Eg = 429,
	EH = 430,
	Eh = 431,
	EI = 432,
	Ei = 433,
	EJ = 434,
	Ej = 435,
	EK = 436,
	Ek = 437,
	EL = 438,
	El = 439,
	EM = 440,
	Em = 441,
	EN = 442,
	En = 443,
	EO = 444,
	Eo = 445,
	EP = 446,
	Ep = 447,
	EQ = 448,
	Eq = 449,
	ER = 450,
	Er = 451,
	ES = 452,
	Es = 453,
	ET = 454,
	Et = 455,
	EU = 456,
	Eu = 457,
	EV = 458,
	Ev = 459,
	EW = 460,
	Ew = 461,
	EX = 462,
	Ex = 463,
	EY = 464,
	Ey = 465,
	EZ = 466,
	Ez = 467,
	eA = 468,
	ea = 469,
	eB = 470,
	eb = 471,
	eC = 472,
	ec = 473,
	eD = 474,
	ed = 475,
	eE = 476,
	ee = 477,
	eF = 478,
	ef = 479,
	eG = 480,
	eg = 481,
	eH = 482,
	eh = 483,
	eI = 484,
	ei = 485,
	eJ = 486,
	ej = 487,
	eK = 488,
	ek = 489,
	eL = 490,
	el = 491,
	eM = 492,
	em = 493,
	eN = 494,
	en = 495,
	eO = 496,
	eo = 497,
	eP = 498,
	ep = 499,
	eQ = 500,
	eq = 501,
	eR = 502,
	er = 503,
	eS = 504,
	es = 505,
	eT = 506,
	et = 507,
	eU = 508,
	eu = 509,
	eV = 510,
	ev = 511,
	eW = 512,
	ew = 513,
	eX = 514,
	ex = 515,
	eY = 516,
	ey = 517,
	eZ = 518,
	ez = 519,
	FA = 520,
	Fa = 521,
	FB = 522,
	Fb = 523,
	FC = 524,
	Fc = 525,
	FD = 526,
	Fd = 527,
	FE = 528,
	Fe = 529,
	FF = 530,
	Ff = 531,
	FG = 532,
	Fg = 533,
	FH = 534,
	Fh = 535,
	FI = 536,
	Fi = 537,
	FJ = 538,
	Fj = 539,
	FK = 540,
	Fk = 541,
	FL = 542,
	Fl = 543,
	FM = 544,
	Fm = 545,
	FN = 546,
	Fn = 547,
	FO = 548,
	Fo = 549,
	FP = 550,
	Fp = 551,
	FQ = 552,
	Fq = 553,
	FR = 554,
	Fr = 555,
	FS = 556,
	Fs = 557,
	FT = 558,
	Ft = 559,
	FU = 560,
	Fu = 561,
	FV = 562,
	Fv = 563,
	FW = 564,
	Fw = 565,
	FX = 566,
	Fx = 567,
	FY = 568,
	Fy = 569,
	FZ = 570,
	Fz = 571,
	fA = 572,
	fa = 573,
	fB = 574,
	fb = 575,
	fC = 576,
	fc = 577,
	fD = 578,
	fd = 579,
	fE = 580,
	fe = 581,
	fF = 582,
	ff = 583,
	fG = 584,
	fg = 585,
	fH = 586,
	fh = 587,
	fI = 588,
	fi = 589,
	fJ = 590,
	fj = 591,
	fK = 592,
	fk = 593,
	fL = 594,
	fl = 595,
	fM = 596,
	fm = 597,
	fN = 598,
	fn = 599,
	fO = 600,
	fo = 601,
	fP = 602,
	fp = 603,
	fQ = 604,
	fq = 605,
	fR = 606,
	fr = 607,
	fS = 608,
	fs = 609,
	fT = 610,
	ft = 611,
	fU = 612,
	fu = 613,
	fV = 614,
	fv = 615,
	fW = 616,
	fw = 617,
	fX = 618,
	fx = 619,
	fY = 620,
	fy = 621,
	fZ = 622,
	fz = 623,
	GA = 624,
	Ga = 625,
	GB = 626,
	Gb = 627,
	GC = 628,
	Gc = 629,
	GD = 630,
	Gd = 631,
	GE = 632,
	Ge = 633,
	GF = 634,
	Gf = 635,
	GG = 636,
	Gg = 637,
	GH = 638,
	Gh = 639,
	GI = 640,
	Gi = 641,
	GJ = 642,
	Gj = 643,
	GK = 644,
	Gk = 645,
	GL = 646,
	Gl = 647,
	GM = 648,
	Gm = 649,
	GN = 650,
	Gn = 651,
	GO = 652,
	Go = 653,
	GP = 654,
	Gp = 655,
	GQ = 656,
	Gq = 657,
	GR = 658,
	Gr = 659,
	GS = 660,
	Gs = 661,
	GT = 662,
	Gt = 663,
	GU = 664,
	Gu = 665,
	GV = 666,
	Gv = 667,
	GW = 668,
	Gw = 669,
	GX = 670,
	Gx = 671,
	GY = 672,
	Gy = 673,
	GZ = 674,
	Gz = 675,
	gA = 676,
	ga = 677,
	gB = 678,
	gb = 679,
	gC = 680,
	gc = 681,
	gD = 682,
	gd = 683,
	gE = 684,
	ge = 685,
	gF = 686,
	gf = 687,
	gG = 688,
	gg = 689,
	gH = 690,
	gh = 691,
	gI = 692,
	gi = 693,
	gJ = 694,
	gj = 695,
	gK = 696,
	gk = 697,
	gL = 698,
	gl = 699,
	gM = 700,
	gm = 701,
	gN = 702,
	gn = 703,
	gO = 704,
	go = 705,
	gP = 706,
	gp = 707,
	gQ = 708,
	gq = 709,
	gR = 710,
	gr = 711,
	gS = 712,
	gs = 713,
	gT = 714,
	gt = 715,
	gU = 716,
	gu = 717,
	gV = 718,
	gv = 719,
	gW = 720,
	gw = 721,
	gX = 722,
	gx = 723,
	gY = 724,
	gy = 725,
	gZ = 726,
	gz = 727,
	HA = 728,
	Ha = 729,
	HB = 730,
	Hb = 731,
	HC = 732,
	Hc = 733,
	HD = 734,
	Hd = 735,
	HE = 736,
	He = 737,
	HF = 738,
	Hf = 739,
	HG = 740,
	Hg = 741,
	HH = 742,
	Hh = 743,
	HI = 744,
	Hi = 745,
	HJ = 746,
	Hj = 747,
	HK = 748,
	Hk = 749,
	HL = 750,
	Hl = 751,
	HM = 752,
	Hm = 753,
	HN = 754,
	Hn = 755,
	HO = 756,
	Ho = 757,
	HP = 758,
	Hp = 759,
	HQ = 760,
	Hq = 761,
	HR = 762,
	Hr = 763,
	HS = 764,
	Hs = 765,
	HT = 766,
	Ht = 767,
	HU = 768,
	Hu = 769,
	HV = 770,
	Hv = 771,
	HW = 772,
	Hw = 773,
	HX = 774,
	Hx = 775,
	HY = 776,
	Hy = 777,
	HZ = 778,
	Hz = 779,
	hA = 780,
	ha = 781,
	hB = 782,
	hb = 783,
	hC = 784,
	hc = 785,
	hD = 786,
	hd = 787,
	hE = 788,
	he = 789,
	hF = 790,
	hf = 791,
	hG = 792,
	hg = 793,
	hH = 794,
	hh = 795,
	hI = 796,
	hi = 797,
	hJ = 798,
	hj = 799,
	hK = 800,
	hk = 801,
	hL = 802,
	hl = 803,
	hM = 804,
	hm = 805,
	hN = 806,
	hn = 807,
	hO = 808,
	ho = 809,
	hP = 810,
	hp = 811,
	hQ = 812,
	hq = 813,
	hR = 814,
	hr = 815,
	hS = 816,
	hs = 817,
	hT = 818,
	ht = 819,
	hU = 820,
	hu = 821,
	hV = 822,
	hv = 823,
	hW = 824,
	hw = 825,
	hX = 826,
	hx = 827,
	hY = 828,
	hy = 829,
	hZ = 830,
	hz = 831,
	IA = 832,
	Ia = 833,
	IB = 834,
	Ib = 835,
	IC = 836,
	Ic = 837,
	ID = 838,
	Id = 839,
	IE = 840,
	Ie = 841,
	IF = 842,
	If = 843,
	IG = 844,
	Ig = 845,
	IH = 846,
	Ih = 847,
	II = 848,
	Ii = 849,
	IJ = 850,
	Ij = 851,
	IK = 852,
	Ik = 853,
	IL = 854,
	Il = 855,
	IM = 856,
	Im = 857,
	IN = 858,
	In = 859,
	IO = 860,
	Io = 861,
	IP = 862,
	Ip = 863,
	IQ = 864,
	Iq = 865,
	IR = 866,
	Ir = 867,
	IS = 868,
	Is = 869,
	IT = 870,
	It = 871,
	IU = 872,
	Iu = 873,
	IV = 874,
	Iv = 875,
	IW = 876,
	Iw = 877,
	IX = 878,
	Ix = 879,
	IY = 880,
	Iy = 881,
	IZ = 882,
	Iz = 883,
	iA = 884,
	ia = 885,
	iB = 886,
	ib = 887,
	iC = 888,
	ic = 889,
	iD = 890,
	id = 891,
	iE = 892,
	ie = 893,
	iF = 894,
	if = 895,
	iG = 896,
	ig = 897,
	iH = 898,
	ih = 899,
	iI = 900,
	ii = 901,
	iJ = 902,
	ij = 903,
	iK = 904,
	ik = 905,
	iL = 906,
	il = 907,
	iM = 908,
	im = 909,
	iN = 910,
	in = 911,
	iO = 912,
	io = 913,
	iP = 914,
	ip = 915,
	iQ = 916,
	iq = 917,
	iR = 918,
	ir = 919,
	iS = 920,
	is = 921,
	iT = 922,
	it = 923,
	iU = 924,
	iu = 925,
	iV = 926,
	iv = 927,
	iW = 928,
	iw = 929,
	iX = 930,
	ix = 931,
	iY = 932,
	iy = 933,
	iZ = 934,
	iz = 935,
	JA = 936,
	Ja = 937,
	JB = 938,
	Jb = 939,
	JC = 940,
	Jc = 941,
	JD = 942,
	Jd = 943,
	JE = 944,
	Je = 945,
	JF = 946,
	Jf = 947,
	JG = 948,
	Jg = 949,
	JH = 950,
	Jh = 951,
	JI = 952,
	Ji = 953,
	JJ = 954,
	Jj = 955,
	JK = 956,
	Jk = 957,
	JL = 958,
	Jl = 959,
	JM = 960,
	Jm = 961,
	JN = 962,
	Jn = 963,
	JO = 964,
	Jo = 965,
	JP = 966,
	Jp = 967,
	JQ = 968,
	Jq = 969,
	JR = 970,
	Jr = 971,
	JS = 972,
	Js = 973,
	JT = 974,
	Jt = 975,
	JU = 976,
	Ju = 977,
	JV = 978,
	Jv = 979,
	JW = 980,
	Jw = 981,
	JX = 982,
	Jx = 983,
	JY = 984,
	Jy = 985,
	JZ = 986,
	Jz = 987,
	jA = 988,
	ja = 989,
	jB = 990,
	jb = 991,
	jC = 992,
	jc = 993,
	jD = 994,
	jd = 995,
	jE = 996,
	je = 997,
	jF = 998,
	jf = 999,
	jG = 1000,
	jg = 1001,
	jH = 1002,
	jh = 1003,
	jI = 1004,
	ji = 1005,
	jJ = 1006,
	jj = 1007,
	jK = 1008,
	jk = 1009,
	jL = 1010,
	jl = 1011,
	jM = 1012,
	jm = 1013,
	jN = 1014,
	jn = 1015,
	jO = 1016,
	jo = 1017,
	jP = 1018,
	jp = 1019,
	jQ = 1020,
	jq = 1021,
	jR = 1022,
	jr = 1023,
	jS = 1024,
	js = 1025,
	jT = 1026,
	jt = 1027,
	jU = 1028,
	ju = 1029,
	jV = 1030,
	jv = 1031,
	jW = 1032,
	jw = 1033,
	jX = 1034,
	jx = 1035,
	jY = 1036,
	jy = 1037,
	jZ = 1038,
	jz = 1039,
	KA = 1040,
	Ka = 1041,
	KB = 1042,
	Kb = 1043,
	KC = 1044,
	Kc = 1045,
	KD = 1046,
	Kd = 1047,
	KE = 1048,
	Ke = 1049,
	KF = 1050,
	Kf = 1051,
	KG = 1052,
	Kg = 1053,
	KH = 1054,
	Kh = 1055,
	KI = 1056,
	Ki = 1057,
	KJ = 1058,
	Kj = 1059,
	KK = 1060,
	Kk = 1061,
	KL = 1062,
	Kl = 1063,
	KM = 1064,
	Km = 1065,
	KN = 1066,
	Kn = 1067,
	KO = 1068,
	Ko = 1069,
	KP = 1070,
	Kp = 1071,
	KQ = 1072,
	Kq = 1073,
	KR = 1074,
	Kr = 1075,
	KS = 1076,
	Ks = 1077,
	KT = 1078,
	Kt = 1079,
	KU = 1080,
	Ku = 1081,
	KV = 1082,
	Kv = 1083,
	KW = 1084,
	Kw = 1085,
	KX = 1086,
	Kx = 1087,
	KY = 1088,
	Ky = 1089,
	KZ = 1090,
	Kz = 1091,
	kA = 1092,
	ka = 1093,
	kB = 1094,
	kb = 1095,
	kC = 1096,
	kc = 1097,
	kD = 1098,
	kd = 1099,
	kE = 1100,
	ke = 1101,
	kF = 1102,
	kf = 1103,
	kG = 1104,
	kg = 1105,
	kH = 1106,
	kh = 1107,
	kI = 1108,
	ki = 1109,
	kJ = 1110,
	kj = 1111,
	kK = 1112,
	kk = 1113,
	kL = 1114,
	kl = 1115,
	kM = 1116,
	km = 1117,
	kN = 1118,
	kn = 1119,
	kO = 1120,
	ko = 1121,
	kP = 1122,
	kp = 1123,
	kQ = 1124,
	kq = 1125,
	kR = 1126,
	kr = 1127,
	kS = 1128,
	ks = 1129,
	kT = 1130,
	kt = 1131,
	kU = 1132,
	ku = 1133,
	kV = 1134,
	kv = 1135,
	kW = 1136,
	kw = 1137,
	kX = 1138,
	kx = 1139,
	kY = 1140,
	ky = 1141,
	kZ = 1142,
	kz = 1143,
	LA = 1144,
	La = 1145,
	LB = 1146,
	Lb = 1147,
	LC = 1148,
	Lc = 1149,
	LD = 1150,
	Ld = 1151,
	LE = 1152,
	Le = 1153,
	LF = 1154,
	Lf = 1155,
	LG = 1156,
	Lg = 1157,
	LH = 1158,
	Lh = 1159,
	LI = 1160,
	Li = 1161,
	LJ = 1162,
	Lj = 1163,
	LK = 1164,
	Lk = 1165,
	LL = 1166,
	Ll = 1167,
	LM = 1168,
	Lm = 1169,
	LN = 1170,
	Ln = 1171,
	LO = 1172,
	Lo = 1173,
	LP = 1174,
	Lp = 1175,
	LQ = 1176,
	Lq = 1177,
	LR = 1178,
	Lr = 1179,
	LS = 1180,
	Ls = 1181,
	LT = 1182,
	Lt = 1183,
	LU = 1184,
	Lu = 1185,
	LV = 1186,
	Lv = 1187,
	LW = 1188,
	Lw = 1189,
	LX = 1190,
	Lx = 1191,
	LY = 1192,
	Ly = 1193,
	LZ = 1194,
	Lz = 1195,
	lA = 1196,
	la = 1197,
	lB = 1198,
	lb = 1199,
	lC = 1200,
	lc = 1201,
	lD = 1202,
	ld = 1203,
	lE = 1204,
	le = 1205,
	lF = 1206,
	lf = 1207,
	lG = 1208,
	lg = 1209,
	lH = 1210,
	lh = 1211,
	lI = 1212,
	li = 1213,
	lJ = 1214,
	lj = 1215,
	lK = 1216,
	lk = 1217,
	lL = 1218,
	ll = 1219,
	lM = 1220,
	lm = 1221,
	lN = 1222,
	ln = 1223,
	lO = 1224,
	lo = 1225,
	lP = 1226,
	lp = 1227,
	lQ = 1228,
	lq = 1229,
	lR = 1230,
	lr = 1231,
	lS = 1232,
	ls = 1233,
	lT = 1234,
	lt = 1235,
	lU = 1236,
	lu = 1237,
	lV = 1238,
	lv = 1239,
	lW = 1240,
	lw = 1241,
	lX = 1242,
	lx = 1243,
	lY = 1244,
	ly = 1245,
	lZ = 1246,
	lz = 1247,
	MA = 1248,
	Ma = 1249,
	MB = 1250,
	Mb = 1251,
	MC = 1252,
	Mc = 1253,
	MD = 1254,
	Md = 1255,
	ME = 1256,
	Me = 1257,
	MF = 1258,
	Mf = 1259,
	MG = 1260,
	Mg = 1261,
	MH = 1262,
	Mh = 1263,
	MI = 1264,
	Mi = 1265,
	MJ = 1266,
	Mj = 1267,
	MK = 1268,
	Mk = 1269,
	ML = 1270,
	Ml = 1271,
	MM = 1272,
	Mm = 1273,
	MN = 1274,
	Mn = 1275,
	MO = 1276,
	Mo = 1277,
	MP = 1278,
	Mp = 1279,
	MQ = 1280,
	Mq = 1281,
	MR = 1282,
	Mr = 1283,
	MS = 1284,
	Ms = 1285,
	MT = 1286,
	Mt = 1287,
	MU = 1288,
	Mu = 1289,
	MV = 1290,
	Mv = 1291,
	MW = 1292,
	Mw = 1293,
	MX = 1294,
	Mx = 1295,
	MY = 1296,
	My = 1297,
	MZ = 1298,
	Mz = 1299,
	mA = 1300,
	ma = 1301,
	mB = 1302,
	mb = 1303,
	mC = 1304,
	mc = 1305,
	mD = 1306,
	md = 1307,
	mE = 1308,
	me = 1309,
	mF = 1310,
	mf = 1311,
	mG = 1312,
	mg = 1313,
	mH = 1314,
	mh = 1315,
	mI = 1316,
	mi = 1317,
	mJ = 1318,
	mj = 1319,
	mK = 1320,
	mk = 1321,
	mL = 1322,
	ml = 1323,
	mM = 1324,
	mm = 1325,
	mN = 1326,
	mn = 1327,
	mO = 1328,
	mo = 1329,
	mP = 1330,
	mp = 1331,
	mQ = 1332,
	mq = 1333,
	mR = 1334,
	mr = 1335,
	mS = 1336,
	ms = 1337,
	mT = 1338,
	mt = 1339,
	mU = 1340,
	mu = 1341,
	mV = 1342,
	mv = 1343,
	mW = 1344,
	mw = 1345,
	mX = 1346,
	mx = 1347,
	mY = 1348,
	my = 1349,
	mZ = 1350,
	mz = 1351,
	NA = 1352,
	Na = 1353,
	NB = 1354,
	Nb = 1355,
	NC = 1356,
	Nc = 1357,
	ND = 1358,
	Nd = 1359,
	NE = 1360,
	Ne = 1361,
	NF = 1362,
	Nf = 1363,
	NG = 1364,
	Ng = 1365,
	NH = 1366,
	Nh = 1367,
	NI = 1368,
	Ni = 1369,
	NJ = 1370,
	Nj = 1371,
	NK = 1372,
	Nk = 1373,
	NL = 1374,
	Nl = 1375,
	NM = 1376,
	Nm = 1377,
	NN = 1378,
	Nn = 1379,
	NO = 1380,
	No = 1381,
	NP = 1382,
	Np = 1383,
	NQ = 1384,
	Nq = 1385,
	NR = 1386,
	Nr = 1387,
	NS = 1388,
	Ns = 1389,
	NT = 1390,
	Nt = 1391,
	NU = 1392,
	Nu = 1393,
	NV = 1394,
	Nv = 1395,
	NW = 1396,
	Nw = 1397,
	NX = 1398,
	Nx = 1399,
	NY = 1400,
	Ny = 1401,
	NZ = 1402,
	Nz = 1403,
	nA = 1404,
	na = 1405,
	nB = 1406,
	nb = 1407,
	nC = 1408,
	nc = 1409,
	nD = 1410,
	nd = 1411,
	nE = 1412,
	ne = 1413,
	nF = 1414,
	nf = 1415,
	nG = 1416,
	ng = 1417,
	nH = 1418,
	nh = 1419,
	nI = 1420,
	ni = 1421,
	nJ = 1422,
	nj = 1423,
	nK = 1424,
	nk = 1425,
	nL = 1426,
	nl = 1427,
	nM = 1428,
	nm = 1429,
	nN = 1430,
	nn = 1431,
	nO = 1432,
	no = 1433,
	nP = 1434,
	np = 1435,
	nQ = 1436,
	nq = 1437,
	nR = 1438,
	nr = 1439,
	nS = 1440,
	ns = 1441,
	nT = 1442,
	nt = 1443,
	nU = 1444,
	nu = 1445,
	nV = 1446,
	nv = 1447,
	nW = 1448,
	nw = 1449,
	nX = 1450,
	nx = 1451,
	nY = 1452,
	ny = 1453,
	nZ = 1454,
	nz = 1455,
	OA = 1456,
	Oa = 1457,
	OB = 1458,
	Ob = 1459,
	OC = 1460,
	Oc = 1461,
	OD = 1462,
	Od = 1463,
	OE = 1464,
	Oe = 1465,
	OF = 1466,
	Of = 1467,
	OG = 1468,
	Og = 1469,
	OH = 1470,
	Oh = 1471,
	OI = 1472,
	Oi = 1473,
	OJ = 1474,
	Oj = 1475,
	OK = 1476,
	Ok = 1477,
	OL = 1478,
	Ol = 1479,
	OM = 1480,
	Om = 1481,
	ON = 1482,
	On = 1483,
	OO = 1484,
	Oo = 1485,
	OP = 1486,
	Op = 1487,
	OQ = 1488,
	Oq = 1489,
	OR = 1490,
	Or = 1491,
	OS = 1492,
	Os = 1493,
	OT = 1494,
	Ot = 1495,
	OU = 1496,
	Ou = 1497,
	OV = 1498,
	Ov = 1499,
	OW = 1500,
	Ow = 1501,
	OX = 1502,
	Ox = 1503,
	OY = 1504,
	Oy = 1505,
	OZ = 1506,
	Oz = 1507,
	oA = 1508,
	oa = 1509,
	oB = 1510,
	ob = 1511,
	oC = 1512,
	oc = 1513,
	oD = 1514,
	od = 1515,
	oE = 1516,
	oe = 1517,
	oF = 1518,
	of = 1519,
	oG = 1520,
	og = 1521,
	oH = 1522,
	oh = 1523,
	oI = 1524,
	oi = 1525,
	oJ = 1526,
	oj = 1527,
	oK = 1528,
	ok = 1529,
	oL = 1530,
	ol = 1531,
	oM = 1532,
	om = 1533,
	oN = 1534,
	on = 1535,
	oO = 1536,
	oo = 1537,
	oP = 1538,
	op = 1539,
	oQ = 1540,
	oq = 1541,
	oR = 1542,
	or = 1543,
	oS = 1544,
	os = 1545,
	oT = 1546,
	ot = 1547,
	oU = 1548,
	ou = 1549,
	oV = 1550,
	ov = 1551,
	oW = 1552,
	ow = 1553,
	oX = 1554,
	ox = 1555,
	oY = 1556,
	oy = 1557,
	oZ = 1558,
	oz = 1559,
	PA = 1560,
	Pa = 1561,
	PB = 1562,
	Pb = 1563,
	PC = 1564,
	Pc = 1565,
	PD = 1566,
	Pd = 1567,
	PE = 1568,
	Pe = 1569,
	PF = 1570,
	Pf = 1571,
	PG = 1572,
	Pg = 1573,
	PH = 1574,
	Ph = 1575,
	PI = 1576,
	Pi = 1577,
	PJ = 1578,
	Pj = 1579,
	PK = 1580,
	Pk = 1581,
	PL = 1582,
	Pl = 1583,
	PM = 1584,
	Pm = 1585,
	PN = 1586,
	Pn = 1587,
	PO = 1588,
	Po = 1589,
	PP = 1590,
	Pp = 1591,
	PQ = 1592,
	Pq = 1593,
	PR = 1594,
	Pr = 1595,
	PS = 1596,
	Ps = 1597,
	PT = 1598,
	Pt = 1599,
	PU = 1600,
	Pu = 1601,
	PV = 1602,
	Pv = 1603,
	PW = 1604,
	Pw = 1605,
	PX = 1606,
	Px = 1607,
	PY = 1608,
	Py = 1609,
	PZ = 1610,
	Pz = 1611,
	pA = 1612,
	pa = 1613,
	pB = 1614,
	pb = 1615,
	pC = 1616,
	pc = 1617,
	pD = 1618,
	pd = 1619,
	pE = 1620,
	pe = 1621,
	pF = 1622,
	pf = 1623,
	pG = 1624,
	pg = 1625,
	pH = 1626,
	ph = 1627,
	pI = 1628,
	pi = 1629,
	pJ = 1630,
	pj = 1631,
	pK = 1632,
	pk = 1633,
	pL = 1634,
	pl = 1635,
	pM = 1636,
	pm = 1637,
	pN = 1638,
	pn = 1639,
	pO = 1640,
	po = 1641,
	pP = 1642,
	pp = 1643,
	pQ = 1644,
	pq = 1645,
	pR = 1646,
	pr = 1647,
	pS = 1648,
	ps = 1649,
	pT = 1650,
	pt = 1651,
	pU = 1652,
	pu = 1653,
	pV = 1654,
	pv = 1655,
	pW = 1656,
	pw = 1657,
	pX = 1658,
	px = 1659,
	pY = 1660,
	py = 1661,
	pZ = 1662,
	pz = 1663,
	QA = 1664,
	Qa = 1665,
	QB = 1666,
	Qb = 1667,
	QC = 1668,
	Qc = 1669,
	QD = 1670,
	Qd = 1671,
	QE = 1672,
	Qe = 1673,
	QF = 1674,
	Qf = 1675,
	QG = 1676,
	Qg = 1677,
	QH = 1678,
	Qh = 1679,
	QI = 1680,
	Qi = 1681,
	QJ = 1682,
	Qj = 1683,
	QK = 1684,
	Qk = 1685,
	QL = 1686,
	Ql = 1687,
	QM = 1688,
	Qm = 1689,
	QN = 1690,
	Qn = 1691,
	QO = 1692,
	Qo = 1693,
	QP = 1694,
	Qp = 1695,
	QQ = 1696,
	Qq = 1697,
	QR = 1698,
	Qr = 1699,
	QS = 1700,
	Qs = 1701,
	QT = 1702,
	Qt = 1703,
	QU = 1704,
	Qu = 1705,
	QV = 1706,
	Qv = 1707,
	QW = 1708,
	Qw = 1709,
	QX = 1710,
	Qx = 1711,
	QY = 1712,
	Qy = 1713,
	QZ = 1714,
	Qz = 1715,
	qA = 1716,
	qa = 1717,
	qB = 1718,
	qb = 1719,
	qC = 1720,
	qc = 1721,
	qD = 1722,
	qd = 1723,
	qE = 1724,
	qe = 1725,
	qF = 1726,
	qf = 1727,
	qG = 1728,
	qg = 1729,
	qH = 1730,
	qh = 1731,
	qI = 1732,
	qi = 1733,
	qJ = 1734,
	qj = 1735,
	qK = 1736,
	qk = 1737,
	qL = 1738,
	ql = 1739,
	qM = 1740,
	qm = 1741,
	qN = 1742,
	qn = 1743,
	qO = 1744,
	qo = 1745,
	qP = 1746,
	qp = 1747,
	qQ = 1748,
	qq = 1749,
	qR = 1750,
	qr = 1751,
	qS = 1752,
	qs = 1753,
	qT = 1754,
	qt = 1755,
	qU = 1756,
	qu = 1757,
	qV = 1758,
	qv = 1759,
	qW = 1760,
	qw = 1761,
	qX = 1762,
	qx = 1763,
	qY = 1764,
	qy = 1765,
	qZ = 1766,
	qz = 1767,
	RA = 1768,
	Ra = 1769,
	RB = 1770,
	Rb = 1771,
	RC = 1772,
	Rc = 1773,
	RD = 1774,
	Rd = 1775,
	RE = 1776,
	Re = 1777,
	RF = 1778,
	Rf = 1779,
	RG = 1780,
	Rg = 1781,
	RH = 1782,
	Rh = 1783,
	RI = 1784,
	Ri = 1785,
	RJ = 1786,
	Rj = 1787,
	RK = 1788,
	Rk = 1789,
	RL = 1790,
	Rl = 1791,
	RM = 1792,
	Rm = 1793,
	RN = 1794,
	Rn = 1795,
	RO = 1796,
	Ro = 1797,
	RP = 1798,
	Rp = 1799,
	RQ = 1800,
	Rq = 1801,
	RR = 1802,
	Rr = 1803,
	RS = 1804,
	Rs = 1805,
	RT = 1806,
	Rt = 1807,
	RU = 1808,
	Ru = 1809,
	RV = 1810,
	Rv = 1811,
	RW = 1812,
	Rw = 1813,
	RX = 1814,
	Rx = 1815,
	RY = 1816,
	Ry = 1817,
	RZ = 1818,
	Rz = 1819,
	rA = 1820,
	ra = 1821,
	rB = 1822,
	rb = 1823,
	rC = 1824,
	rc = 1825,
	rD = 1826,
	rd = 1827,
	rE = 1828,
	re = 1829,
	rF = 1830,
	rf = 1831,
	rG = 1832,
	rg = 1833,
	rH = 1834,
	rh = 1835,
	rI = 1836,
	ri = 1837,
	rJ = 1838,
	rj = 1839,
	rK = 1840,
	rk = 1841,
	rL = 1842,
	rl = 1843,
	rM = 1844,
	rm = 1845,
	rN = 1846,
	rn = 1847,
	rO = 1848,
	ro = 1849,
	rP = 1850,
	rp = 1851,
	rQ = 1852,
	rq = 1853,
	rR = 1854,
	rr = 1855,
	rS = 1856,
	rs = 1857,
	rT = 1858,
	rt = 1859,
	rU = 1860,
	ru = 1861,
	rV = 1862,
	rv = 1863,
	rW = 1864,
	rw = 1865,
	rX = 1866,
	rx = 1867,
	rY = 1868,
	ry = 1869,
	rZ = 1870,
	rz = 1871,
	SA = 1872,
	Sa = 1873,
	SB = 1874,
	Sb = 1875,
	SC = 1876,
	Sc = 1877,
	SD = 1878,
	Sd = 1879,
	SE = 1880,
	Se = 1881,
	SF = 1882,
	Sf = 1883,
	SG = 1884,
	Sg = 1885,
	SH = 1886,
	Sh = 1887,
	SI = 1888,
	Si = 1889,
	SJ = 1890,
	Sj = 1891,
	SK = 1892,
	Sk = 1893,
	SL = 1894,
	Sl = 1895,
	SM = 1896,
	Sm = 1897,
	SN = 1898,
	Sn = 1899,
	SO = 1900,
	So = 1901,
	SP = 1902,
	Sp = 1903,
	SQ = 1904,
	Sq = 1905,
	SR = 1906,
	Sr = 1907,
	SS = 1908,
	Ss = 1909,
	ST = 1910,
	St = 1911,
	SU = 1912,
	Su = 1913,
	SV = 1914,
	Sv = 1915,
	SW = 1916,
	Sw = 1917,
	SX = 1918,
	Sx = 1919,
	SY = 1920,
	Sy = 1921,
	SZ = 1922,
	Sz = 1923,
	sA = 1924,
	sa = 1925,
	sB = 1926,
	sb = 1927,
	sC = 1928,
	sc = 1929,
	sD = 1930,
	sd = 1931,
	sE = 1932,
	se = 1933,
	sF = 1934,
	sf = 1935,
	sG = 1936,
	sg = 1937,
	sH = 1938,
	sh = 1939,
	sI = 1940,
	si = 1941,
	sJ = 1942,
	sj = 1943,
	sK = 1944,
	sk = 1945,
	sL = 1946,
	sl = 1947,
	sM = 1948,
	sm = 1949,
	sN = 1950,
	sn = 1951,
	sO = 1952,
	so = 1953,
	sP = 1954,
	sp = 1955,
	sQ = 1956,
	sq = 1957,
	sR = 1958,
	sr = 1959,
	sS = 1960,
	ss = 1961,
	sT = 1962,
	st = 1963,
	sU = 1964,
	su = 1965,
	sV = 1966,
	sv = 1967,
	sW = 1968,
	sw = 1969,
	sX = 1970,
	sx = 1971,
	sY = 1972,
	sy = 1973,
	sZ = 1974,
	sz = 1975,
	TA = 1976,
	Ta = 1977,
	TB = 1978,
	Tb = 1979,
	TC = 1980,
	Tc = 1981,
	TD = 1982,
	Td = 1983,
	TE = 1984,
	Te = 1985,
	TF = 1986,
	Tf = 1987,
	TG = 1988,
	Tg = 1989,
	TH = 1990,
	Th = 1991,
	TI = 1992,
	Ti = 1993,
	TJ = 1994,
	Tj = 1995,
	TK = 1996,
	Tk = 1997,
	TL = 1998,
	Tl = 1999,
	TM = 2000,
	Tm = 2001,
	TN = 2002,
	Tn = 2003,
	TO = 2004,
	To = 2005,
	TP = 2006,
	Tp = 2007,
	TQ = 2008,
	Tq = 2009,
	TR = 2010,
	Tr = 2011,
	TS = 2012,
	Ts = 2013,
	TT = 2014,
	Tt = 2015,
	TU = 2016,
	Tu = 2017,
	TV = 2018,
	Tv = 2019,
	TW = 2020,
	Tw = 2021,
	TX = 2022,
	Tx = 2023,
	TY = 2024,
	Ty = 2025,
	TZ = 2026,
	Tz = 2027,
	tA = 2028,
	ta = 2029,
	tB = 2030,
	tb = 2031,
	tC = 2032,
	tc = 2033,
	tD = 2034,
	td = 2035,
	tE = 2036,
	te = 2037,
	tF = 2038,
	tf = 2039,
	tG = 2040,
	tg = 2041,
	tH = 2042,
	th = 2043,
	tI = 2044,
	ti = 2045,
	tJ = 2046,
	tj = 2047,
	tK = 2048,
	tk = 2049,
	tL = 2050,
	tl = 2051,
	tM = 2052,
	tm = 2053,
	tN = 2054,
	tn = 2055,
	tO = 2056,
	to = 2057,
	tP = 2058,
	tp = 2059,
	tQ = 2060,
	tq = 2061,
	tR = 2062,
	tr = 2063,
	tS = 2064,
	ts = 2065,
	tT = 2066,
	tt = 2067,
	tU = 2068,
	tu = 2069,
	tV = 2070,
	tv = 2071,
	tW = 2072,
	tw = 2073,
	tX = 2074,
	tx = 2075,
	tY = 2076,
	ty = 2077,
	tZ = 2078,
	tz = 2079,
	UA = 2080,
	Ua = 2081,
	UB = 2082,
	Ub = 2083,
	UC = 2084,
	Uc = 2085,
	UD = 2086,
	Ud = 2087,
	UE = 2088,
	Ue = 2089,
	UF = 2090,
	Uf = 2091,
	UG = 2092,
	Ug = 2093,
	UH = 2094,
	Uh = 2095,
	UI = 2096,
	Ui = 2097,
	UJ = 2098,
	Uj = 2099,
	UK = 2100,
	Uk = 2101,
	UL = 2102,
	Ul = 2103,
	UM = 2104,
	Um = 2105,
	UN = 2106,
	Un = 2107,
	UO = 2108,
	Uo = 2109,
	UP = 2110,
	Up = 2111,
	UQ = 2112,
	Uq = 2113,
	UR = 2114,
	Ur = 2115,
	US = 2116,
	Us = 2117,
	UT = 2118,
	Ut = 2119,
	UU = 2120,
	Uu = 2121,
	UV = 2122,
	Uv = 2123,
	UW = 2124,
	Uw = 2125,
	UX = 2126,
	Ux = 2127,
	UY = 2128,
	Uy = 2129,
	UZ = 2130,
	Uz = 2131,
	uA = 2132,
	ua = 2133,
	uB = 2134,
	ub = 2135,
	uC = 2136,
	uc = 2137,
	uD = 2138,
	ud = 2139,
	uE = 2140,
	ue = 2141,
	uF = 2142,
	uf = 2143,
	uG = 2144,
	ug = 2145,
	uH = 2146,
	uh = 2147,
	uI = 2148,
	ui = 2149,
	uJ = 2150,
	uj = 2151,
	uK = 2152,
	uk = 2153,
	uL = 2154,
	ul = 2155,
	uM = 2156,
	um = 2157,
	uN = 2158,
	un = 2159,
	uO = 2160,
	uo = 2161,
	uP = 2162,
	up = 2163,
	uQ = 2164,
	uq = 2165,
	uR = 2166,
	ur = 2167,
	uS = 2168,
	us = 2169,
	uT = 2170,
	ut = 2171,
	uU = 2172,
	uu = 2173,
	uV = 2174,
	uv = 2175,
	uW = 2176,
	uw = 2177,
	uX = 2178,
	ux = 2179,
	uY = 2180,
	uy = 2181,
	uZ = 2182,
	uz = 2183,
	VA = 2184,
	Va = 2185,
	VB = 2186,
	Vb = 2187,
	VC = 2188,
	Vc = 2189,
	VD = 2190,
	Vd = 2191,
	VE = 2192,
	Ve = 2193,
	VF = 2194,
	Vf = 2195,
	VG = 2196,
	Vg = 2197,
	VH = 2198,
	Vh = 2199,
	VI = 2200,
	Vi = 2201,
	VJ = 2202,
	Vj = 2203,
	VK = 2204,
	Vk = 2205,
	VL = 2206,
	Vl = 2207,
	VM = 2208,
	Vm = 2209,
	VN = 2210,
	Vn = 2211,
	VO = 2212,
	Vo = 2213,
	VP = 2214,
	Vp = 2215,
	VQ = 2216,
	Vq = 2217,
	VR = 2218,
	Vr = 2219,
	VS = 2220,
	Vs = 2221,
	VT = 2222,
	Vt = 2223,
	VU = 2224,
	Vu = 2225,
	VV = 2226,
	Vv = 2227,
	VW = 2228,
	Vw = 2229,
	VX = 2230,
	Vx = 2231,
	VY = 2232,
	Vy = 2233,
	VZ = 2234,
	Vz = 2235,
	vA = 2236,
	va = 2237,
	vB = 2238,
	vb = 2239,
	vC = 2240,
	vc = 2241,
	vD = 2242,
	vd = 2243,
	vE = 2244,
	ve = 2245,
	vF = 2246,
	vf = 2247,
	vG = 2248,
	vg = 2249,
	vH = 2250,
	vh = 2251,
	vI = 2252,
	vi = 2253,
	vJ = 2254,
	vj = 2255,
	vK = 2256,
	vk = 2257,
	vL = 2258,
	vl = 2259,
	vM = 2260,
	vm = 2261,
	vN = 2262,
	vn = 2263,
	vO = 2264,
	vo = 2265,
	vP = 2266,
	vp = 2267,
	vQ = 2268,
	vq = 2269,
	vR = 2270,
	vr = 2271,
	vS = 2272,
	vs = 2273,
	vT = 2274,
	vt = 2275,
	vU = 2276,
	vu = 2277,
	vV = 2278,
	vv = 2279,
	vW = 2280,
	vw = 2281,
	vX = 2282,
	vx = 2283,
	vY = 2284,
	vy = 2285,
	vZ = 2286,
	vz = 2287,
	WA = 2288,
	Wa = 2289,
	WB = 2290,
	Wb = 2291,
	WC = 2292,
	Wc = 2293,
	WD = 2294,
	Wd = 2295,
	WE = 2296,
	We = 2297,
	WF = 2298,
	Wf = 2299,
	WG = 2300,
	Wg = 2301,
	WH = 2302,
	Wh = 2303,
	WI = 2304,
	Wi = 2305,
	WJ = 2306,
	Wj = 2307,
	WK = 2308,
	Wk = 2309,
	WL = 2310,
	Wl = 2311,
	WM = 2312,
	Wm = 2313,
	WN = 2314,
	Wn = 2315,
	WO = 2316,
	Wo = 2317,
	WP = 2318,
	Wp = 2319,
	WQ = 2320,
	Wq = 2321,
	WR = 2322,
	Wr = 2323,
	WS = 2324,
	Ws = 2325,
	WT = 2326,
	Wt = 2327,
	WU = 2328,
	Wu = 2329,
	WV = 2330,
	Wv = 2331,
	WW = 2332,
	Ww = 2333,
	WX = 2334,
	Wx = 2335,
	WY = 2336,
	Wy = 2337,
	WZ = 2338,
	Wz = 2339,
	wA = 2340,
	wa = 2341,
	wB = 2342,
	wb = 2343,
	wC = 2344,
	wc = 2345,
	wD = 2346,
	wd = 2347,
	wE = 2348,
	we = 2349,
	wF = 2350,
	wf = 2351,
	wG = 2352,
	wg = 2353,
	wH = 2354,
	wh = 2355,
	wI = 2356,
	wi = 2357,
	wJ = 2358,
	wj = 2359,
	wK = 2360,
	wk = 2361,
	wL = 2362,
	wl = 2363,
	wM = 2364,
	wm = 2365,
	wN = 2366,
	wn = 2367,
	wO = 2368,
	wo = 2369,
	wP = 2370,
	wp = 2371,
	wQ = 2372,
	wq = 2373,
	wR = 2374,
	wr = 2375,
	wS = 2376,
	ws = 2377,
	wT = 2378,
	wt = 2379,
	wU = 2380,
	wu = 2381,
	wV = 2382,
	wv = 2383,
	wW = 2384,
	ww = 2385,
	wX = 2386,
	wx = 2387,
	wY = 2388,
	wy = 2389,
	wZ = 2390,
	wz = 2391,
	XA = 2392,
	Xa = 2393,
	XB = 2394,
	Xb = 2395,
	XC = 2396,
	Xc = 2397,
	XD = 2398,
	Xd = 2399,
	XE = 2400,
	Xe = 2401,
	XF = 2402,
	Xf = 2403,
	XG = 2404,
	Xg = 2405,
	XH = 2406,
	Xh = 2407,
	XI = 2408,
	Xi = 2409,
	XJ = 2410,
	Xj = 2411,
	XK = 2412,
	Xk = 2413,
	XL = 2414,
	Xl = 2415,
	XM = 2416,
	Xm = 2417,
	XN = 2418,
	Xn = 2419,
	XO = 2420,
	Xo = 2421,
	XP = 2422,
	Xp = 2423,
	XQ = 2424,
	Xq = 2425,
	XR = 2426,
	Xr = 2427,
	XS = 2428,
	Xs = 2429,
	XT = 2430,
	Xt = 2431,
	XU = 2432,
	Xu = 2433,
	XV = 2434,
	Xv = 2435,
	XW = 2436,
	Xw = 2437,
	XX = 2438,
	Xx = 2439,
	XY = 2440,
	Xy = 2441,
	XZ = 2442,
	Xz = 2443,
	xA = 2444,
	xa = 2445,
	xB = 2446,
	xb = 2447,
	xC = 2448,
	xc = 2449,
	xD = 2450,
	xd = 2451,
	xE = 2452,
	xe = 2453,
	xF = 2454,
	xf = 2455,
	xG = 2456,
	xg = 2457,
	xH = 2458,
	xh = 2459,
	xI = 2460,
	xi = 2461,
	xJ = 2462,
	xj = 2463,
	xK = 2464,
	xk = 2465,
	xL = 2466,
	xl = 2467,
	xM = 2468,
	xm = 2469,
	xN = 2470,
	xn = 2471,
	xO = 2472,
	xo = 2473,
	xP = 2474,
	xp = 2475,
	xQ = 2476,
	xq = 2477,
	xR = 2478,
	xr = 2479,
	xS = 2480,
	xs = 2481,
	xT = 2482,
	xt = 2483,
	xU = 2484,
	xu = 2485,
	xV = 2486,
	xv = 2487,
	xW = 2488,
	xw = 2489,
	xX = 2490,
	xx = 2491,
	xY = 2492,
	xy = 2493,
	xZ = 2494,
	xz = 2495,
	YA = 2496,
	Ya = 2497,
	YB = 2498,
	Yb = 2499,
	YC = 2500,
	Yc = 2501,
	YD = 2502,
	Yd = 2503,
	YE = 2504,
	Ye = 2505,
	YF = 2506,
	Yf = 2507,
	YG = 2508,
	Yg = 2509,
	YH = 2510,
	Yh = 2511,
	YI = 2512,
	Yi = 2513,
	YJ = 2514,
	Yj = 2515,
	YK = 2516,
	Yk = 2517,
	YL = 2518,
	Yl = 2519,
	YM = 2520,
	Ym = 2521,
	YN = 2522,
	Yn = 2523,
	YO = 2524,
	Yo = 2525,
	YP = 2526,
	Yp = 2527,
	YQ = 2528,
	Yq = 2529,
	YR = 2530,
	Yr = 2531,
	YS = 2532,
	Ys = 2533,
	YT = 2534,
	Yt = 2535,
	YU = 2536,
	Yu = 2537,
	YV = 2538,
	Yv = 2539,
	YW = 2540,
	Yw = 2541,
	YX = 2542,
	Yx = 2543,
	YY = 2544,
	Yy = 2545,
	YZ = 2546,
	Yz = 2547,
	yA = 2548,
	ya = 2549,
	yB = 2550,
	yb = 2551,
	yC = 2552,
	yc = 2553,
	yD = 2554,
	yd = 2555,
	yE = 2556,
	ye = 2557,
	yF = 2558,
	yf = 2559,
	yG = 2560,
	yg = 2561,
	yH = 2562,
	yh = 2563,
	yI = 2564,
	yi = 2565,
	yJ = 2566,
	yj = 2567,
	yK = 2568,
	yk = 2569,
	yL = 2570,
	yl = 2571,
	yM = 2572,
	ym = 2573,
	yN = 2574,
	yn = 2575,
	yO = 2576,
	yo = 2577,
	yP = 2578,
	yp = 2579,
	yQ = 2580,
	yq = 2581,
	yR = 2582,
	yr = 2583,
	yS = 2584,
	ys = 2585,
	yT = 2586,
	yt = 2587,
	yU = 2588,
	yu = 2589,
	yV = 2590,
	yv = 2591,
	yW = 2592,
	yw = 2593,
	yX = 2594,
	yx = 2595,
	yY = 2596,
	yy = 2597,
	yZ = 2598,
	yz = 2599,
	ZA = 2600,
	Za = 2601,
	ZB = 2602,
	Zb = 2603,
	ZC = 2604,
	Zc = 2605,
	ZD = 2606,
	Zd = 2607,
	ZE = 2608,
	Ze = 2609,
	ZF = 2610,
	Zf = 2611,
	ZG = 2612,
	Zg = 2613,
	ZH = 2614,
	Zh = 2615,
	ZI = 2616,
	Zi = 2617,
	ZJ = 2618,
	Zj = 2619,
	ZK = 2620,
	Zk = 2621,
	ZL = 2622,
	Zl = 2623,
	ZM = 2624,
	Zm = 2625,
	ZN = 2626,
	Zn = 2627,
	ZO = 2628,
	Zo = 2629,
	ZP = 2630,
	Zp = 2631,
	ZQ = 2632,
	Zq = 2633,
	ZR = 2634,
	Zr = 2635,
	ZS = 2636,
	Zs = 2637,
	ZT = 2638,
	Zt = 2639,
	ZU = 2640,
	Zu = 2641,
	ZV = 2642,
	Zv = 2643,
	ZW = 2644,
	Zw = 2645,
	ZX = 2646,
	Zx = 2647,
	ZY = 2648,
	Zy = 2649,
	ZZ = 2650,
	Zz = 2651,
	zA = 2652,
	za = 2653,
	zB = 2654,
	zb = 2655,
	zC = 2656,
	zc = 2657,
	zD = 2658,
	zd = 2659,
	zE = 2660,
	ze = 2661,
	zF = 2662,
	zf = 2663,
	zG = 2664,
	zg = 2665,
	zH = 2666,
	zh = 2667,
	zI = 2668,
	zi = 2669,
	zJ = 2670,
	zj = 2671,
	zK = 2672,
	zk = 2673,
	zL = 2674,
	zl = 2675,
	zM = 2676,
	zm = 2677,
	zN = 2678,
	zn = 2679,
	zO = 2680,
	zo = 2681,
	zP = 2682,
	zp = 2683,
	zQ = 2684,
	zq = 2685,
	zR = 2686,
	zr = 2687,
	zS = 2688,
	zs = 2689,
	zT = 2690,
	zt = 2691,
	zU = 2692,
	zu = 2693,
	zV = 2694,
	zv = 2695,
	zW = 2696,
	zw = 2697,
	zX = 2698,
	zx = 2699,
	zY = 2700,
	zy = 2701,
	zZ = 2702,
	zz = 2703,
	aAA = 2704,
	aAa = 2705,
	aAB = 2706,
	aAb = 2707,
	aAC = 2708,
	aAc = 2709,
	aAD = 2710,
	aAd = 2711,
	aAE = 2712,
	aAe = 2713,
	aAF = 2714,
	aAf = 2715,
	aAG = 2716,
	aAg = 2717,
	aAH = 2718,
	aAh = 2719,
	aAI = 2720,
	aAi = 2721,
	aAJ = 2722,
	aAj = 2723,
	aAK = 2724,
	aAk = 2725,
	aAL = 2726,
	aAl = 2727,
	aAM = 2728,
	aAm = 2729,
	aAN = 2730,
	aAn = 2731,
	aAO = 2732,
	aAo = 2733,
	aAP = 2734,
	aAp = 2735,
	aAQ = 2736,
	aAq = 2737,
	aAR = 2738,
	aAr = 2739,
	aAS = 2740,
	aAs = 2741,
	aAT = 2742,
	aAt = 2743,
	aAU = 2744,
	aAu = 2745,
	aAV = 2746,
	aAv = 2747,
	aAW = 2748,
	aAw = 2749,
	aAX = 2750,
	aAx = 2751,
	aAY = 2752,
	aAy = 2753,
	aAZ = 2754,
	aAz = 2755,
	aaA = 2756,
	aaa = 2757,
	aaB = 2758,
	aab = 2759,
	aaC = 2760,
	aac = 2761,
	aaD = 2762,
	aad = 2763,
	aaE = 2764,
	aae = 2765,
	aaF = 2766,
	aaf = 2767,
	aaG = 2768,
	aag = 2769,
	aaH = 2770,
	aah = 2771,
	aaI = 2772,
	aai = 2773,
	aaJ = 2774,
	aaj = 2775,
	aaK = 2776,
	aak = 2777,
	aaL = 2778,
	aal = 2779,
	aaM = 2780,
	aam = 2781,
	aaN = 2782,
	aan = 2783,
	aaO = 2784,
	aao = 2785,
	aaP = 2786,
	aap = 2787,
	aaQ = 2788,
	aaq = 2789,
	aaR = 2790,
	aar = 2791,
	aaS = 2792,
	aas = 2793,
	aaT = 2794,
	aat = 2795,
	aaU = 2796,
	aau = 2797,
	aaV = 2798,
	aav = 2799,
	aaW = 2800,
	aaw = 2801,
	aaX = 2802,
	aax = 2803,
	aaY = 2804,
	aay = 2805,
	aaZ = 2806,
	aaz = 2807,
	aBA = 2808,
	aBa = 2809,
	aBB = 2810,
	aBb = 2811,
	aBC = 2812,
	aBc = 2813,
	aBD = 2814,
	aBd = 2815,
	aBE = 2816,
	aBe = 2817,
	aBF = 2818,
	aBf = 2819,
	aBG = 2820,
	aBg = 2821,
	aBH = 2822,
	aBh = 2823,
	aBI = 2824,
	aBi = 2825,
	aBJ = 2826,
	aBj = 2827,
	aBK = 2828,
	aBk = 2829,
	aBL = 2830,
	aBl = 2831,
	aBM = 2832,
	aBm = 2833,
	aBN = 2834,
	aBn = 2835,
	aBO = 2836,
	aBo = 2837,
	aBP = 2838,
	aBp = 2839,
	aBQ = 2840,
	aBq = 2841,
	aBR = 2842,
	aBr = 2843,
	aBS = 2844,
	aBs = 2845,
	aBT = 2846,
	aBt = 2847,
	aBU = 2848,
	aBu = 2849,
	aBV = 2850,
	aBv = 2851,
	aBW = 2852,
	aBw = 2853,
	aBX = 2854,
	aBx = 2855,
	aBY = 2856,
	aBy = 2857,
	aBZ = 2858,
	aBz = 2859,
	abA = 2860,
	aba = 2861,
	abB = 2862,
	abb = 2863,
	abC = 2864,
	abc = 2865,
	abD = 2866,
	abd = 2867,
	abE = 2868,
	abe = 2869,
	abF = 2870,
	abf = 2871,
	abG = 2872,
	abg = 2873,
	abH = 2874,
	abh = 2875,
	abI = 2876,
	abi = 2877,
	abJ = 2878,
	abj = 2879,
	abK = 2880,
	abk = 2881,
	abL = 2882,
	abl = 2883,
	abM = 2884,
	abm = 2885,
	abN = 2886,
	abn = 2887,
	abO = 2888,
	abo = 2889,
	abP = 2890,
	abp = 2891,
	abQ = 2892,
	abq = 2893,
	abR = 2894,
	abr = 2895,
	abS = 2896,
	abs = 2897,
	abT = 2898,
	abt = 2899,
	abU = 2900,
	abu = 2901,
	abV = 2902,
	abv = 2903,
	abW = 2904,
	abw = 2905,
	abX = 2906,
	abx = 2907,
	abY = 2908,
	aby = 2909,
	abZ = 2910,
	abz = 2911,
	aCA = 2912,
	aCa = 2913,
	aCB = 2914,
	aCb = 2915,
	aCC = 2916,
	aCc = 2917,
	aCD = 2918,
	aCd = 2919,
	aCE = 2920,
	aCe = 2921,
	aCF = 2922,
	aCf = 2923,
	aCG = 2924,
	aCg = 2925,
	aCH = 2926,
	aCh = 2927,
	aCI = 2928,
	aCi = 2929,
	aCJ = 2930,
	aCj = 2931,
	aCK = 2932,
	aCk = 2933,
	aCL = 2934,
	aCl = 2935,
	aCM = 2936,
	aCm = 2937,
	aCN = 2938,
	aCn = 2939,
	aCO = 2940,
	aCo = 2941,
	aCP = 2942,
	aCp = 2943,
	aCQ = 2944,
	aCq = 2945,
	aCR = 2946,
	aCr = 2947,
	aCS = 2948,
	aCs = 2949,
	aCT = 2950,
	aCt = 2951,
	aCU = 2952,
	aCu = 2953,
	aCV = 2954,
	aCv = 2955,
	aCW = 2956,
	aCw = 2957,
	aCX = 2958,
	aCx = 2959,
	aCY = 2960,
	aCy = 2961,
	aCZ = 2962,
	aCz = 2963,
	acA = 2964,
	aca = 2965,
	acB = 2966,
	acb = 2967,
	acC = 2968,
	acc = 2969,
	acD = 2970,
	acd = 2971,
	acE = 2972,
	ace = 2973,
	acF = 2974,
	acf = 2975,
	acG = 2976,
	acg = 2977,
	acH = 2978,
	ach = 2979,
	acI = 2980,
	aci = 2981,
	acJ = 2982,
	acj = 2983,
	acK = 2984,
	ack = 2985,
	acL = 2986,
	acl = 2987,
	acM = 2988,
	acm = 2989,
	acN = 2990,
	acn = 2991,
	acO = 2992,
	aco = 2993,
	acP = 2994,
	acp = 2995,
	acQ = 2996,
	acq = 2997,
	acR = 2998,
	acr = 2999,
	acS = 3000,
	acs = 3001,
	acT = 3002,
	act = 3003
}

enum Rarity : int {
	N = 0,
	R = 1,
	SR = 2,
	SSR = 3
}

enum ArenaRewardType : int {
	None = 0,
	Time = 1,
	Daily = 2,
	SeasonRecord = 3,
	OverallRecord = 4,
	SeasonClose = 5,
	AttackVictory = 6,
	DefenseVictory = 7,
	RankIcon = 8
}

enum ExternalBTNodeType : int {
	Sequence = 0,
	Selector = 1,
	Instant = 2,
	SubNode = 3,
	ExecuteAll = 4
}

enum ExternalBTTrigger : int {
	None = 0,
	HPUnder = 1,
	ApplySkillEffectCategory = 2,
	HaveNextExSkillActiveGauge = 3,
	UseNormalSkill = 4,
	UseExSkill = 5,
	CheckActiveGaugeOver = 6,
	CheckPeriod = 7,
	CheckSummonCharacterCountOver = 8,
	CheckSummonCharacterCountUnder = 9,
	ApplyGroggy = 10,
	ApplyLogicEffectTemplateId = 11,
	OnSpawned = 12,
	CheckActiveGaugeBetween = 13,
	DestroyParts = 14,
	CheckHallucinationCountOver = 15,
	CheckHallucinationCountUnder = 16,
	UseSkillEndGroupId = 17
}

enum ExternalBehavior : int {
	UseNextExSkill = 0,
	ChangePhase = 1,
	ChangeSection = 2,
	AddActiveGauge = 3,
	UseSelectExSkill = 4,
	ClearNormalSkill = 5,
	MoveLeft = 6,
	MoveRight = 7,
	AllUseSelectExSkill = 8,
	ConnectCharacterToDummy = 9,
	ConnectExSkillToParts = 10,
	SetMaxHPToParts = 11,
	AlivePartsUseExSkill = 12,
	ActivatePart = 13,
	AddGroggy = 14,
	SelectTargetToUseSkillAlly = 15,
	ForceChangePhase = 16,
	ClearUseSkillEndGroupId = 17
}

enum BulletType : int {
	Normal = 0,
	Pierce = 1,
	Explosion = 2,
	Siege = 3,
	Mystic = 4,
	None = 5,
	Sonic = 6
}

enum ArmorType : int {
	LightArmor = 0,
	HeavyArmor = 1,
	Unarmed = 2,
	Structure = 3,
	Normal = 4,
	ElasticArmor = 5
}

enum DamageAttribute : int {
	Resist = 0,
	Normal = 1,
	Weak = 2,
	Effective = 3
}

enum OpenConditionContent : int {
	Shop = 0,
	Gacha = 1,
	LobbyIllust = 2,
	Raid = 3,
	Cafe = 4,
	Unit_Growth_Skill = 5,
	Unit_Growth_LevelUp = 6,
	Unit_Growth_Transcendence = 7,
	Arena = 8,
	Academy = 9,
	Equip = 10,
	Item = 11,
	Favor = 12,
	Prologue = 13,
	Mission = 14,
	WeekDungeon_Chase = 15,
	__Deprecated_WeekDungeon_FindGift = 16,
	__Deprecated_WeekDungeon_Blood = 17,
	Story_Sub = 18,
	Story_Replay = 19,
	WeekDungeon = 20,
	None = 21,
	Shop_Gem = 22,
	Craft = 23,
	Student = 24,
	GuideMission = 25,
	Clan = 26,
	Echelon = 27,
	Campaign = 28,
	EventContent = 29,
	Guild = 30,
	EventStage_1 = 31,
	EventStage_2 = 32,
	Talk = 33,
	Billing = 34,
	Schedule = 35,
	Story = 36,
	Tactic_Speed = 37,
	Cafe_Invite = 38,
	EventMiniGame_1 = 39,
	SchoolDungeon = 40,
	TimeAttackDungeon = 41,
	ShiftingCraft = 42,
	WorldRaid = 43,
	Tactic_Skip = 44,
	Mulligan = 45,
	EventPermanent = 46,
	Main_L_1_2 = 47,
	Main_L_1_3 = 48,
	Main_L_1_4 = 49,
	EliminateRaid = 50,
	Cafe_2 = 51,
	Cafe_Invite_2 = 52,
	MultiFloorRaid = 53,
	StrategySkip = 54,
	MinigameDreamMaker = 55,
	MiniGameDefense = 56
}

enum BubbleType : int {
	Idle = 0,
	Monologue = 1,
	EmoticonNormal = 2,
	EmoticonFavorite = 3,
	EmoticonReward = 4,
	EmoticonGiveGift = 5
}

enum StageTopography : int {
	Street = 0,
	Outdoor = 1,
	Indoor = 2
}

enum StrategyEnvironment : int {
	None = 0,
	MapFog = 1
}

enum ContentType : int {
	None = 0,
	CampaignMainStage = 1,
	CampaignSubStage = 2,
	WeekDungeon = 3,
	EventContentMainStage = 4,
	EventContentSubStage = 5,
	CampaignTutorialStage = 6,
	EventContentMainGroundStage = 7,
	SchoolDungeon = 8,
	TimeAttackDungeon = 9,
	Raid = 10,
	Conquest = 11,
	EventContentStoryStage = 12,
	CampaignExtraStage = 13,
	StoryStrategyStage = 14,
	ScenarioMode = 15,
	EventContent = 16,
	WorldRaid = 17,
	EliminateRaid = 18,
	Chaser = 19,
	FieldContentStage = 20,
	MultiFloorRaid = 21,
	MinigameDefense = 22
}

enum EchelonExtensionType : int {
	Base = 0,
	Extension = 1
}

enum RewardTag : int {
	Default = 0,
	FirstClear = 1,
	StrategyObject = 2,
	Event = 3,
	ThreeStar = 4,
	ProductMonthly = 5,
	Rare = 6,
	EventBonus = 7,
	TimeWeight = 8,
	ProductWeekly = 9,
	ProductBiweekly = 10,
	EventPermanentReward = 11,
	ConquestManageEvent = 12,
	ConquestManageDefault = 13,
	ConquestCalculateDefault = 14,
	ConquestCalculateLevel2 = 15,
	ConquestCalculateLevel3 = 16,
	ConquestFootholdUpgrade2 = 17,
	ConquestFootholdUpgrade3 = 18,
	ConquestErosionPenalty = 19,
	GemBonus = 20,
	GemPaid = 21,
	ConquestTileConquer = 22
}

enum StrategyObjectType : int {
	None = 0,
	Start = 1,
	Heal = 2,
	Skill = 3,
	StatBuff = 4,
	Parcel = 5,
	ParcelOneTimePerAccount = 6,
	Portal = 7,
	PortalOneWayEnterance = 8,
	PortalOneWayExit = 9,
	Observatory = 10,
	Beacon = 11,
	BeaconOneTime = 12,
	EnemySpawn = 13,
	SwitchToggle = 14,
	SwitchMovableWhenToggleOff = 15,
	SwitchMovableWhenToggleOn = 16,
	FixedStart01 = 17,
	FixedStart02 = 18,
	FixedStart03 = 19,
	FixedStart04 = 20
}

enum StrategyAIType : int {
	None = 0,
	Guard = 1,
	Pursuit = 2
}

enum HexaUnitGrade : int {
	Grade1 = 0,
	Grade2 = 1,
	Grade3 = 2,
	Boss = 3
}

enum TacticEnvironment : int {
	None = 0,
	WarFog = 1
}

enum EngageType : int {
	SearchAndMove = 0,
	HoldPosition = 1
}

enum PositioningType : int {
	CloseToObstacle = 0,
	CloseToTarget = 1
}

enum TacticEntityType : int {
	None = 0,
	Student = 1,
	Minion = 2,
	Elite = 4,
	Champion = 8,
	Boss = 16,
	Obstacle = 32,
	Servant = 64,
	Vehicle = 128,
	Summoned = 256,
	Hallucination = 512,
	DestructibleProjectile = 1024
}

enum BattleCalculationStat : int {
	FinalDamage = 0,
	FinalHeal = 1,
	FinalDamageRatio = 2,
	FinalDamageRatio2 = 3,
	FinalCriticalRate = 4
}

enum FieldDialogType : int {
	None = 0,
	Talk = 1,
	Think = 2,
	Exclaim = 3,
	Question = 4,
	Upset = 5,
	Surprise = 6,
	Bulb = 7,
	Heart = 8,
	Sweat = 9,
	Angry = 10,
	Music = 11,
	Dot = 12,
	Momotalk = 13,
	Phone = 14,
	Keyword = 15,
	Evidence = 16,
	Chat = 17,
	Keyword_843 = 18
}

enum ProductionStep : int {
	ToDo = 0,
	Doing = 1,
	Complete = 2,
	Release = 3
}

enum TacticRole : int {
	None = 0,
	DamageDealer = 1,
	Tanker = 2,
	Supporter = 3,
	Healer = 4,
	Vehicle = 5
}

enum WeaponType : int {
	None = 0,
	SG = 1,
	SMG = 2,
	AR = 3,
	GL = 4,
	HG = 5,
	RL = 6,
	SR = 7,
	DSMG = 8,
	RG = 9,
	DSG = 10,
	Vulcan = 11,
	Missile = 12,
	Cannon = 13,
	Taser = 14,
	MG = 15,
	Binah = 16,
	MT = 17,
	Relic = 18,
	FT = 19,
	Akemi = 20
}

enum TacticRange : int {
	Back = 0,
	Front = 1,
	Middle = 2
}

enum AimIKType : int {
	None = 0,
	OneHandRight = 1,
	OneHandLeft = 2,
	TwoHandRight = 3,
	TwoHandLeft = 4,
	Tripod = 5,
	Dual = 6,
	Max = 7
}

enum Club : int {
	None = 0,
	Engineer = 1,
	CleanNClearing = 2,
	KnightsHospitaller = 3,
	IndeGEHENNA = 4,
	IndeMILLENNIUM = 5,
	IndeHyakkiyako = 6,
	IndeShanhaijing = 7,
	IndeTrinity = 8,
	FoodService = 9,
	Countermeasure = 10,
	BookClub = 11,
	MatsuriOffice = 12,
	GourmetClub = 13,
	HoukagoDessert = 14,
	RedwinterSecretary = 15,
	Schale = 16,
	TheSeminar = 17,
	AriusSqud = 18,
	Justice = 19,
	Fuuki = 20,
	Kohshinjo68 = 21,
	Meihuayuan = 22,
	SisterHood = 23,
	GameDev = 24,
	anzenkyoku = 25,
	RemedialClass = 26,
	SPTF = 27,
	TrinityVigilance = 28,
	Veritas = 29,
	TrainingClub = 30,
	Onmyobu = 31,
	Shugyobu = 32,
	Endanbou = 33,
	NinpoKenkyubu = 34,
	Class227 = 35,
	EmptyClub = 36,
	Emergentology = 37,
	RabbitPlatoon = 38,
	PandemoniumSociety = 39,
	HotSpringsDepartment = 40,
	TeaParty = 41,
	PublicPeaceBureau = 42,
	Genryumon = 43,
	BlackTortoisePromenade = 44,
	LaborParty = 45,
	KnowledgeLiberationFront = 46,
	Hyakkayouran = 47,
	ShinySparkleSociety = 48,
	AbydosStudentCouncil = 49,
	CentralControlCenter = 50,
	FreightLogisticsDepartment = 51
}

enum StatLevelUpType : int {
	Standard = 0,
	Premature = 1,
	LateBloom = 2,
	Obstacle = 3,
	TimeAttack = 4
}

enum SquadType : int {
	None = 0,
	Main = 1,
	Support = 2,
	TSS = 3
}

enum EquipmentCategory : int {
	Unable = 0,
	Exp = 1,
	Bag = 2,
	Hat = 3,
	Gloves = 4,
	Shoes = 5,
	Badge = 6,
	Hairpin = 7,
	Charm = 8,
	Watch = 9,
	Necklace = 10,
	WeaponExpGrowthA = 11,
	WeaponExpGrowthB = 12,
	WeaponExpGrowthC = 13,
	WeaponExpGrowthZ = 14
}

enum TerrainAdaptationStat : int {
	D = 0,
	C = 1,
	B = 2,
	A = 3,
	S = 4,
	SS = 5
}

enum StatType : int {
	None = 0,
	MaxHP = 1,
	AttackPower = 2,
	DefensePower = 3,
	HealPower = 4,
	AccuracyPoint = 5,
	AccuracyRate = 6,
	DodgePoint = 7,
	DodgeRate = 8,
	CriticalPoint = 9,
	CriticalChanceRate = 10,
	CriticalResistChanceRate = 11,
	CriticalDamageRate = 12,
	MoveSpeed = 13,
	SightRange = 14,
	ActiveGauge = 15,
	StabilityPoint = 16,
	StabilityRate = 17,
	ReloadTime = 18,
	MaxBulletCount = 19,
	IgnoreDelayCount = 20,
	WeaponRange = 21,
	BlockRate = 22,
	BodyRadius = 23,
	ActionCount = 24,
	StrategyMobility = 25,
	StrategySightRange = 26,
	StreetBattleAdaptation = 27,
	OutdoorBattleAdaptation = 28,
	IndoorBattleAdaptation = 29,
	HealEffectivenessRate = 30,
	CriticalChanceResistPoint = 31,
	CriticalDamageResistRate = 32,
	LifeRecoverOnHit = 33,
	NormalAttackSpeed = 34,
	AmmoCost = 35,
	GroggyGauge = 36,
	GroggyTime = 37,
	DamageRatio = 38,
	DamagedRatio = 39,
	OppressionPower = 40,
	OppressionResist = 41,
	RegenCost = 42,
	InitialWeaponRangeRate = 43,
	DefensePenetration = 44,
	DefensePenetrationResisit = 45,
	ExtendBuffDuration = 46,
	ExtendDebuffDuration = 47,
	ExtendCrowdControlDuration = 48,
	EnhanceExplosionRate = 49,
	EnhancePierceRate = 50,
	EnhanceMysticRate = 51,
	EnhanceLightArmorRate = 52,
	EnhanceHeavyArmorRate = 53,
	EnhanceUnarmedRate = 54,
	EnhanceSiegeRate = 55,
	EnhanceNormalRate = 56,
	EnhanceStructureRate = 57,
	EnhanceNormalArmorRate = 58,
	DamageRatio2Increase = 59,
	DamageRatio2Decrease = 60,
	DamagedRatio2Increase = 61,
	DamagedRatio2Decrease = 62,
	EnhanceSonicRate = 63,
	EnhanceElasticArmorRate = 64,
	ExDamagedRatioIncrease = 65,
	ExDamagedRatioDecrease = 66,
	EnhanceExDamageRate = 67,
	ReduceExDamagedRate = 68,
	HealRate = 69,
	HealLightArmorRate = 70,
	HealHeavyArmorRate = 71,
	HealUnarmedRate = 72,
	HealElasticArmorRate = 73,
	HealNormalArmorRate = 74,
	HealedExplosionRate = 75,
	HealedPierceRate = 76,
	HealedMysticRate = 77,
	HealedSonicRate = 78,
	HealedNormalRate = 79,
	Max = 80
}

enum StatTransType : int {
	SpecialTransStat = 0,
	TSATransStat = 1
}

enum VoiceEvent : int {
	OnTSA = 0,
	FormationPickUp = 1,
	CampaignResultDefeat = 2,
	CampaignResultVictory = 3,
	CharacterLevelUp = 4,
	CharacterTranscendence = 5,
	SkillLevelUp = 6,
	Formation = 7,
	CampaignCharacterSpawn = 8,
	BattleStartTimeline = 9,
	BattleVictoryTimeline = 10,
	CharacterFavor = 11,
	BattleMiss = 12,
	BattleBlock = 13,
	BattleCover = 14,
	BattleMove = 15,
	BattleMoveToForamtionBeacon = 16,
	MGS_GameStart = 17,
	MGS_CharacterSelect = 18,
	MGS_Attacking = 19,
	MGS_GeasGet = 20,
	EXSkill = 21,
	EXSkillLevel = 22,
	EXSkill2 = 23,
	EXSkillLevel2 = 24,
	EXSkill3 = 25,
	EXSkillLevel3 = 26,
	EXSkill4 = 27,
	EXSkillLevel4 = 28,
	PublicSkill01 = 29,
	PublicSkill02 = 30,
	InteractionPublicSkill01 = 31,
	InteractionPublicSkill02 = 32,
	FormationStyleChange = 33,
	BattleInteractionVictoryTimeline = 34
}

enum EquipmentOptionType : int {
	None = 0,
	MaxHP_Base = 1,
	MaxHP_Coefficient = 2,
	AttackPower_Base = 3,
	AttackPower_Coefficient = 4,
	DefensePower_Base = 5,
	DefensePower_Coefficient = 6,
	HealPower_Base = 7,
	HealPower_Coefficient = 8,
	CriticalPoint_Base = 9,
	CriticalPoint_Coefficient = 10,
	CriticalChanceRate_Base = 11,
	CriticalDamageRate_Base = 12,
	CriticalDamageRate_Coefficient = 13,
	SightRange_Base = 14,
	SightRange_Coefficient = 15,
	MaxBulletCount_Base = 16,
	MaxBulletCount_Coefficient = 17,
	HPRecoverOnKill_Base = 18,
	HPRecoverOnKill_Coefficient = 19,
	StreetBattleAdaptation_Base = 20,
	OutdoorBattleAdaptation_Base = 21,
	IndoorBattleAdaptation_Base = 22,
	HealEffectivenessRate_Base = 23,
	HealEffectivenessRate_Coefficient = 24,
	CriticalChanceResistPoint_Base = 25,
	CriticalChanceResistPoint_Coefficient = 26,
	CriticalDamageResistRate_Base = 27,
	CriticalDamageResistRate_Coefficient = 28,
	ExSkillUpgrade = 29,
	OppressionPower_Base = 30,
	OppressionPower_Coefficient = 31,
	OppressionResist_Base = 32,
	OppressionResist_Coefficient = 33,
	StabilityPoint_Base = 34,
	StabilityPoint_Coefficient = 35,
	AccuracyPoint_Base = 36,
	AccuracyPoint_Coefficient = 37,
	DodgePoint_Base = 38,
	DodgePoint_Coefficient = 39,
	MoveSpeed_Base = 40,
	MoveSpeed_Coefficient = 41,
	Max = 42,
	NormalAttackSpeed_Base = 43,
	NormalAttackSpeed_Coefficient = 44,
	DefensePenetration_Base = 45,
	DefensePenetrationResisit_Base = 46,
	ExtendBuffDuration_Base = 47,
	ExtendDebuffDuration_Base = 48,
	ExtendCrowdControlDuration_Base = 49,
	EnhanceExplosionRate_Base = 50,
	EnhanceExplosionRate_Coefficient = 51,
	EnhancePierceRate_Base = 52,
	EnhancePierceRate_Coefficient = 53,
	EnhanceMysticRate_Base = 54,
	EnhanceMysticRate_Coefficient = 55,
	EnhanceLightArmorRate_Base = 56,
	EnhanceLightArmorRate_Coefficient = 57,
	EnhanceHeavyArmorRate_Base = 58,
	EnhanceHeavyArmorRate_Coefficient = 59,
	EnhanceUnarmedRate_Base = 60,
	EnhanceUnarmedRate_Coefficient = 61,
	EnhanceSiegeRate_Base = 62,
	EnhanceSiegeRate_Coefficient = 63,
	EnhanceNormalRate_Base = 64,
	EnhanceNormalRate_Coefficient = 65,
	EnhanceStructureRate_Base = 66,
	EnhanceStructureRate_Coefficient = 67,
	EnhanceNormalArmorRate_Base = 68,
	EnhanceNormalArmorRate_Coefficient = 69,
	DamageRatio2Increase_Base = 70,
	DamageRatio2Increase_Coefficient = 71,
	DamageRatio2Decrease_Base = 72,
	DamageRatio2Decrease_Coefficient = 73,
	DamagedRatio2Increase_Base = 74,
	DamagedRatio2Increase_Coefficient = 75,
	DamagedRatio2Decrease_Base = 76,
	DamagedRatio2Decrease_Coefficient = 77,
	EnhanceSonicRate_Base = 78,
	EnhanceSonicRate_Coefficient = 79,
	EnhanceElasticArmorRate_Base = 80,
	EnhanceElasticArmorRate_Coefficient = 81,
	IgnoreDelayCount_Base = 82,
	WeaponRange_Base = 83,
	BlockRate_Base = 84,
	BlockRate_Coefficient = 85,
	AmmoCost_Base = 86,
	RegenCost_Base = 87,
	RegenCost_Coefficient = 88
}

enum ConquestErosionType : int {
	None = 0,
	IndividualErosion = 1,
	MassErosion = 2
}

enum ConquestConditionType : int {
	None = 0,
	OpenDateOffset = 1,
	ItemAcquire = 2,
	ParcelUse = 3,
	KillUnit = 4
}

enum ConquestEventType : int {
	None = 0,
	Event01 = 1,
	Event02 = 2
}

enum StageDifficulty : int {
	None = 0,
	Normal = 1,
	Hard = 2,
	VeryHard = 3,
	VeryHard_Ex = 4
}

enum ConquestObjectType : int {
	None = 0,
	ParcelOneTimePerAccount = 1
}

enum ConquestProgressType : int {
	None = 0,
	Upgrade = 1,
	Manage = 2
}

enum ConquestTileType : int {
	None = 0,
	Start = 1,
	Normal = 2,
	Battle = 3,
	Base = 4
}

enum ConquestEnemyType : int {
	None = 0,
	Normal = 1,
	MiddleBoss = 2,
	Boss = 3,
	UnexpectedEvent = 4,
	Challenge = 5,
	IndividualErosion = 6,
	MassErosion = 7
}

enum ConquestTeamType : int {
	None = 0,
	Team1 = 1,
	Team2 = 2,
	Team3 = 3
}

enum StarGoalType : int {
	None = 0,
	AllAlive = 1,
	Clear = 2,
	GetBoxes = 3,
	ClearTimeInSec = 4,
	AllyBaseDamage = 5
}

enum CurrencyTypes : int {
	Invalid = 0,
	Gold = 1,
	GemPaid = 2,
	GemBonus = 3,
	Gem = 4,
	ActionPoint = 5,
	AcademyTicket = 6,
	ArenaTicket = 7,
	RaidTicket = 8,
	WeekDungeonChaserATicket = 9,
	WeekDungeonFindGiftTicket = 10,
	WeekDungeonBloodTicket = 11,
	WeekDungeonChaserBTicket = 12,
	WeekDungeonChaserCTicket = 13,
	SchoolDungeonATicket = 14,
	SchoolDungeonBTicket = 15,
	SchoolDungeonCTicket = 16,
	TimeAttackDungeonTicket = 17,
	MasterCoin = 18,
	WorldRaidTicketA = 19,
	WorldRaidTicketB = 20,
	WorldRaidTicketC = 21,
	ChaserTotalTicket = 22,
	SchoolDungeonTotalTicket = 23,
	EliminateTicketA = 24,
	EliminateTicketB = 25,
	EliminateTicketC = 26,
	EliminateTicketD = 27,
	Max = 28
}

enum FeverBattleType : int {
	Campaign = 0,
	Raid = 1,
	WeekDungeon = 2,
	Arena = 3
}

enum SkillPriorityCheckTarget : int {
	Ally = 0,
	Enemy = 1,
	All = 2
}

enum EntityMaterialType : int {
	Wood = 0,
	Stone = 1,
	Flesh = 2,
	Metal = 3
}

enum FurnitureLocation : int {
	None = 0,
	Inventory = 1,
	Floor = 2,
	WallLeft = 3,
	WallRight = 4
}

enum MailType : int {
	System = 0,
	Attendance = 1,
	Event = 2,
	MassTrade = 3,
	InventoryFull = 4,
	ArenaDefenseVictory = 5,
	CouponUsageReward = 6,
	ArenaSeasonClose = 7,
	ProductReward = 8,
	MonthlyProductReward = 9,
	ExpiryChangeItem = 10,
	ClanAttendance = 11,
	AccountLink = 12,
	NewUserBonus = 13,
	LeftClanAssistReward = 14,
	CashShopBuy = 15,
	MonthlyProductPackage = 16,
	WebEventReward = 17,
	AttendanceImmediately = 18,
	WeeklyProductReward = 19,
	BiweeklyProductReward = 20,
	Temp_1 = 21,
	Temp_2 = 22,
	Temp_3 = 23,
	CouponCompleteReward = 24,
	BirthdayMail = 25,
	FromCS = 26,
	ExpiryChangeCurrency = 27
}

enum ItemCategory : int {
	Coin = 0,
	CharacterExpGrowth = 1,
	SecretStone = 2,
	Material = 3,
	Consumable = 4,
	Collectible = 5,
	Favor = 6,
	RecruitCoin = 7,
	MonthlyBonus = 8,
	InvisibleToken = 9
}

enum Difficulty : int {
	Normal = 0,
	Hard = 1,
	VeryHard = 2,
	Hardcore = 3,
	Extreme = 4,
	Insane = 5,
	Torment = 6,
	Lunatic = 7
}

enum ShopCategoryType : int {
	General = 0,
	SecretStone = 1,
	Raid = 2,
	Gold = 3,
	Ap = 4,
	PickupGacha = 5,
	NormalGacha = 6,
	PointGacha = 7,
	EventGacha = 8,
	ArenaTicket = 9,
	Arena = 10,
	TutoGacha = 11,
	RecruitSellection = 12,
	EventContent_0 = 13,
	EventContent_1 = 14,
	EventContent_2 = 15,
	EventContent_3 = 16,
	EventContent_4 = 17,
	_Obsolete = 18,
	LimitedGacha = 19,
	MasterCoin = 20,
	SecretStoneGrowth = 21,
	TicketGacha = 22,
	DirectPayGacha_DontUseGlobal = 23,
	FesGacha = 24,
	TimeAttack = 25,
	Chaser = 26,
	ChaserTicket = 27,
	SchoolDungeonTicket = 28,
	AcademyTicket = 29,
	Special = 30,
	Care = 31,
	BeforehandGacha = 32,
	EliminateRaid = 33,
	GlobalSpecialGacha = 34
}

enum EventContentBuffFindRule : int {
	None = 0,
	WeaponType = 1,
	SquadType = 2,
	StreetBattleAdaptation = 3,
	OutdoorBattleAdaptation = 4,
	IndoorBattleAdaptation = 5,
	BulletType = 6,
	School = 7,
	TacticRange = 8
}

enum EventChangeType : int {
	MainSub = 0,
	SubMain = 1
}

enum EventContentItemType : int {
	EventPoint = 0,
	EventToken1 = 1,
	EventToken2 = 2,
	EventToken3 = 3,
	EventToken4 = 4,
	EventToken5 = 5,
	EventMeetUpTicket = 6,
	EventEtcItem = 7
}

enum CollectionUnlockType : int {
	None = 0,
	ClearSpecificEventStage = 1,
	ClearSpecificEventScenario = 2,
	ClearSpecificEventMission = 3,
	PurchaseSpecificItemCount = 4,
	SpecificEventLocationRank = 5,
	DiceRaceConsumeDiceCount = 6,
	MinigameTBGThemaClear = 7,
	MinigameEnter = 8,
	MinigameDreamMakerParameter = 9,
	ClearSpecificScenario = 10
}

enum MultipleConditionCheckType : int {
	And = 0,
	Or = 1
}

enum EventContentDiceRaceResultType : int {
	DiceResult1 = 0,
	DiceResult2 = 1,
	DiceResult3 = 2,
	DiceResult4 = 3,
	DiceResult5 = 4,
	DiceResult6 = 5,
	MoveForward = 6,
	LapFinish = 7,
	EventOccur = 8,
	DiceResultFixed1 = 9,
	DiceResultFixed2 = 10,
	DiceResultFixed3 = 11,
	DiceResultFixed4 = 12,
	DiceResultFixed5 = 13,
	DiceResultFixed6 = 14,
	SpecialReward = 15
}

enum EventContentDiceRaceNodeType : int {
	StartNode = 0,
	RewardNode = 1,
	MoveForwardNode = 2,
	SpecialRewardNode = 3
}

enum EventContentType : int {
	Stage = 0,
	Gacha = 1,
	Mission = 2,
	Shop = 3,
	Raid = 4,
	Arena = 5,
	BoxGacha = 6,
	Collection = 7,
	Recollection = 8,
	MiniGameRhythm = 9,
	CardShop = 10,
	EventLocation = 11,
	MinigameRhythmEvent = 12,
	FortuneGachaShop = 13,
	SubEvent = 14,
	EventMeetup = 15,
	BoxGachaResult = 16,
	Conquest = 17,
	WorldRaid = 18,
	DiceRace = 19,
	MiniGameRhythmMission = 20,
	WorldRaidEntrance = 21,
	MiniEvent = 22,
	MiniGameShooting = 23,
	MiniGameShootingMission = 24,
	MiniGameTBG = 25,
	TimeAttackDungeon = 26,
	EliminateRaid = 27,
	Treasure = 28,
	Field = 29,
	MultiFloorRaid = 30,
	MinigameDreamMaker = 31,
	MiniGameDefense = 32,
	OpenWebView = 33,
	SpecialMiniEvent = 34,
	ScenarioCollection = 35,
	ScenarioShortcut = 36,
	SeasonalEvent = 37,
	MiniShop = 38,
	MiniGameRoad = 39
}

enum MeetupConditionType : int {
	None = 0,
	EventContentStageClear = 1,
	ScenarioClear = 2
}

enum MeetupConditionPrintType : int {
	None = 0,
	Lock = 1,
	Hide = 2
}

enum EventTargetType : int {
	WeekDungeon = 0,
	Chaser = 1,
	Campaign_Normal = 2,
	Campaign_Hard = 3,
	SchoolDungeon = 4,
	AcademySchedule = 5,
	TimeAttackDungeon = 6,
	AccountLevelExpIncrease = 7,
	Raid = 8,
	EliminateRaid = 9,
	MultiFloorRaid = 10
}

enum MissionCategory : int {
	Challenge = 0,
	Daily = 1,
	Weekly = 2,
	Achievement = 3,
	GuideMission = 4,
	All = 5,
	MiniGameScore = 6,
	MiniGameEvent = 7,
	EventAchievement = 8,
	DailySudden = 9,
	DailyFixed = 10,
	EventFixed = 11
}

enum MissionResetType : int {
	None = 0,
	Daily = 1,
	Weekly = 2,
	Limit = 3
}

enum MissionToastDisplayConditionType : int {
	Always = 0,
	Complete = 1,
	Never = 2
}

enum AccountState : int {
	WaitingSignIn = 0,
	Normal = 1,
	Dormant = 2,
	Comeback = 3,
	Newbie = 4
}

enum MissionCompleteConditionType : int {
	None = 0,
	Reset_DailyLogin = 1,
	Reset_DailyLoginCount = 2,
	Reset_CompleteMission = 3,
	Achieve_EquipmentLevelUpCount = 4,
	Achieve_EquipmentTierUpCount = 5,
	Achieve_CharacterLevelUpCount = 6,
	Reset_CharacterTranscendenceCount = 7,
	Reset_ClearTaticBattleCount = 8,
	Achieve_ClearCampaignStageCount = 9,
	Reset_KillSpecificEnemyCount = 10,
	Reset_KillEnemyWithTagCount = 11,
	Reset_GetCharacterCount = 12,
	Reset_GetCharacterWithTagCount = 13,
	Reset_GetSpecificCharacterCount = 14,
	Reset_AccountLevelUp = 15,
	Reset_GetEquipmentCount = 16,
	Reset_GachaCount = 17,
	Reset_UseGem = 18,
	Reset_GetGem = 19,
	Reset_GetGemPaid = 20,
	Achieve_GetGold = 21,
	Achieve_GetItem = 22,
	Reset_GetFavorLevel = 23,
	Reset___Deprecated_EquipmentAtSpecificLevelCount = 24,
	Reset_EquipmentAtSpecificTierUpCount = 25,
	Reset_CharacterAtSpecificLevelCount = 26,
	Reset_CharacterAtSpecificTranscendenceCount = 27,
	Achieve_CharacterSkillLevelUpCount = 28,
	Reset_CharacterAtSpecificSkillLevelCount = 29,
	Reset_CompleteScheduleCount = 30,
	Reset_CompleteScheduleGroupCount = 31,
	Reset_AcademyLocationRankSum = 32,
	Reset_CraftCount = 33,
	Achieve_GetComfortPoint = 34,
	Achieve_GetWeaponCount = 35,
	Reset_EquipWeaponCount_Obsolete = 36,
	Reset_CompleteScheduleWithSpecificCharacter = 37,
	Reset_CafeInteractionCount = 38,
	Reset_SpecificCharacterAtSpecificLevel = 39,
	Reset_SpecificCharacterAtSpecificTranscendence = 40,
	Reset_LobbyInteraction = 41,
	Achieve_ClearFindGiftAndBloodDungeonCount = 42,
	Reset_ClearSpecificFindGiftAndBloodDungeonCount = 43,
	Achieve_JoinRaidCount = 44,
	Reset_JoinSpecificRaidCount = 45,
	Achieve_JoinArenaCount = 46,
	Reset_ArenaVictoryCount = 47,
	Reset_RaidDamageAmountOnOneBattle = 48,
	Reset_ClearEventStageCount = 49,
	Reset_UseSpecificCharacterCount = 50,
	Achieve_UseGold = 51,
	Reset_UseTiket = 52,
	Reset_ShopBuyCount = 53,
	Reset_ShopBuyActionPointCount = 54,
	Reset_SpecificCharacterAtSpecificFavorRank = 55,
	Reset_ClearSpecificScenario = 56,
	Reset_GetSpecificItemCount = 57,
	Achieve_TotalGetClearStarCount = 58,
	Reset_CompleteCampaignStageMinimumTurn = 59,
	Achieve_TotalLoginCount = 60,
	Reset_LoginAtSpecificTime = 61,
	Reset_CompleteFavorSchedule = 62,
	Reset_CompleteFavorScheduleAtSpecificCharacter = 63,
	Reset_GetMemoryLobbyCount = 64,
	Reset_GetFurnitureGroupCount = 65,
	Reset_AcademyLocationAtSpecificRank = 66,
	Reset_ClearCampaignStageDifficultyNormal = 67,
	Reset_ClearCampaignStageDifficultyHard = 68,
	Achieve_ClearChaserDungeonCount = 69,
	Reset_ClearSpecificChaserDungeonCount = 70,
	Reset_GetCafeRank = 71,
	Reset_SpecificStarCharacterCount = 72,
	Reset_EventClearCampaignStageCount = 73,
	Reset_EventClearSpecificCampaignStageCount = 74,
	Reset_EventCompleteCampaignStageMinimumTurn = 75,
	Reset_EventClearCampaignStageDifficultyNormal = 76,
	Reset_EventClearCampaignStageDifficultyHard = 77,
	Reset_ClearSpecificCampaignStageCount = 78,
	Reset_GetItemWithTagCount = 79,
	Reset_GetFurnitureWithTagCount = 80,
	Reset_GetEquipmentWithTagCount = 81,
	Reset_ClearCampaignStageTimeLimitFromSecond = 82,
	Reset_ClearEventStageTimeLimitFromSecond = 83,
	Reset_ClearRaidTimeLimitFromSecond = 84,
	Reset_ClearBattleWithTagCount = 85,
	Reset_ClearFindGiftAndBloodDungeonTimeLimitFromSecond = 86,
	Reset_CompleteScheduleWithTagCount = 87,
	Reset_ClearChaserDungeonTimeLimitFromSecond = 88,
	Reset_GetTotalScoreRhythm = 89,
	Reset_GetBestScoreRhythm = 90,
	Reset_GetSpecificScoreRhythm = 91,
	Reset_ClearStageRhythm = 92,
	Reset_GetComboCountRhythm = 93,
	Reset_GetFullComboRhythm = 94,
	Reset_GetFeverCountRhythm = 95,
	Reset_UseActionPoint = 96,
	Achieve_ClearSchoolDungeonCount = 97,
	Reset_ClearSchoolDungeonTimeLimitFromSecond = 98,
	Reset_ClearSpecificSchoolDungeonCount = 99,
	Reset_GetCriticalCountRhythm = 100,
	Achieve_WeaponTranscendenceCount = 101,
	Achieve_WeaponLevelUpCount = 102,
	Reset_WeaponAtSpecificTranscendenceCount = 103,
	Reset_WeaponAtSpecificLevelUpCount = 104,
	Reset_BuyShopGoods = 105,
	Reset_ClanLogin = 106,
	Reset_AssistCharacterSetting = 107,
	Reset_DailyMissionFulfill = 108,
	Reset_SelectedMissionFulfill = 109,
	Reset_TotalDamageToWorldRaid = 110,
	Reset_JoinWorldRaidTypeNumber = 111,
	Reset_JoinWorldRaidBattleWithTagCount = 112,
	Reset_ClearWorldRaidTimeLimitFromSecond = 113,
	Achieve_KillEnemyWithDecagrammatonSPOTagCount = 114,
	Reset_ConquerTileCount = 115,
	Reset_ConquerSpecificStepTileCount = 116,
	Reset_ConquerSpecificStepTileAll = 117,
	Reset_UpgradeConquestBaseTileCount = 118,
	Reset_KillConquestBoss = 119,
	Reset_ClearEventConquestTileTimeLimitFromSecond = 120,
	Reset_DiceRaceUseDiceCount = 121,
	Reset_DiceRaceFinishLapCount = 122,
	Reset_FortuneGachaCount = 123,
	Reset_FortuneGachaCountByGrade = 124,
	Reset_ClearCountShooting = 125,
	Reset_ClearSpecificStageShooting = 126,
	Reset_ClearSpecificCharacterShooting = 127,
	Reset_ClearSpecificSectionShooting = 128,
	Achieve_JoinEliminateRaidCount = 129,
	Reset_TBGCompleteRoundCount = 130,
	Reset_CompleteStage = 131,
	Reset_TBGClearSpecificThema = 132,
	Reset_ClearGeneralChaserDungeonCount = 133,
	Reset_ClearGeneralFindGiftAndBloodDungeonCount = 134,
	Reset_ClearGeneralSchoolDungeonCount = 135,
	Reset_JoinArenaCount = 136,
	Reset_GetCafe2ndRank = 137,
	Achieve_GetComfort2ndPoint = 138,
	Reset_ClearSpecificTimeAttackDungeonCount = 139,
	Reset_GetScoreTimeAttackDungeon = 140,
	Reset_GetTotalScoreTimeAttackDungeon = 141,
	Reset_JoinRaidCount = 142,
	Reset_ClearTimeAttackDungeonCount = 143,
	Reset_JoinEliminateRaidCount = 144,
	Reset_FieldClearSpecificDate = 145,
	Reset_FieldGetEvidenceCount = 146,
	Reset_FieldMasteryLevel = 147,
	Reset_TreasureCheckedCellCount = 148,
	Reset_TreasureGetTreasureCount = 149,
	Reset_TreasureRoundRefreshCount = 150,
	Achieve_UseTicketCount = 151,
	Reset_ClearMultiFloorRaidStage = 152,
	Achieve_CharacterPotentialUpCount = 153,
	Reset_CharacterPotentialUpCount = 154,
	Reset_CharacterAtSpecificPotentialCount = 155,
	Reset_PotentialAttackPowerAtSpecificLevel = 156,
	Reset_PotentialMaxHPAtSpecificLevel = 157,
	Reset_PotentialHealPowerAtSpecificLevel = 158,
	Reset_DreamGetSpecificParameter = 159,
	Reset_DreamGetSpecificScheduleCount = 160,
	Reset_DreamGetScheduleCount = 161,
	Reset_DreamGetEndingCount = 162,
	Reset_DreamGetSpecificEndingCount = 163,
	Reset_DreamGetCollectionScenarioCount = 164,
	Reset_ClearCountDefense = 165,
	Reset_ClearSpecificDefenseStage = 166,
	Reset_ClearCharacterLimitDefense = 167,
	Reset_ClearTimeLimitDefenseFromSecond = 168,
	Reset_JoinMultiFloorRaidCount = 169,
	Reset_GivePresentCharacterCount = 170,
	Reset_CharacterInviteCount = 171,
	Reset_RoadpuzzleTileCount = 172,
	Reset_ClearSpecificRoundRoadpuzzle = 173,
	Reset_ClearCountRoadpuzzle = 174
}

enum EventContentScenarioConditionType : int {
	None = 0,
	DayAfter = 1,
	EventPoint = 2
}

enum SubEventType : int {
	None = 0,
	SubEvent = 1,
	SubEventPermanent = 2
}

enum EventContentReleaseType : int {
	None = 0,
	Permanent = 1,
	MainStory = 2,
	PermanentSpecialOperate = 3,
	PermanentConquest = 4
}

enum PurchaseCountResetType : int {
	None = 0,
	Day = 1,
	Week = 2,
	Month = 3
}

enum FieldConditionType : int {
	Invalid = 0,
	Interaction = 1,
	QuestInProgress = 2,
	QuestClear = 3,
	Date = 4,
	StageClear = 5,
	HasKeyword = 6,
	HasEvidence = 7,
	OpenDate = 8,
	OpenDateAfter = 9
}

enum FieldInteractionType : int {
	None = 0,
	Scenario = 1,
	Reward = 2,
	Dialog = 3,
	Stage = 4,
	KeywordFound = 5,
	EvidenceFound = 6,
	SceneChange = 7,
	Timeline = 8,
	ActionTrigger = 9,
	Interplay = 10,
	UnderCoverStage = 11
}

enum FieldConditionClass : int {
	AndOr = 0,
	OrAnd = 1,
	Multi = 2
}

enum FieldTutorialType : int {
	None = 0,
	MasteryHUD = 1,
	QuestHUD = 2,
	WorldMapHUD = 3
}

enum FieldWorldMapButtonType : int {
	DefaultMode = 0,
	Normal = 1,
	Combat = 2,
	Combat_VeryHard = 3,
	UnderCover = 4
}

enum FurnitureCategory : int {
	Furnitures = 0,
	Decorations = 1,
	Interiors = 2
}

enum FurnitureSubCategory : int {
	Table = 0,
	Closet = 1,
	Chair = 2,
	Bed = 3,
	Prop = 4,
	FurnitureEtc = 5,
	FurnitureSubCategory1 = 6,
	HomeAppliance = 7,
	WallDecoration = 8,
	FloorDecoration = 9,
	DecorationEtc = 10,
	DecorationSubCategory1 = 11,
	Floor = 12,
	Background = 13,
	Wallpaper = 14,
	InteriorsSubCategory1 = 15,
	All = 16
}

enum FurnitureFunctionType : int {
	None = 0,
	EventCollection = 1,
	VideoPlay = 2,
	TrophyCollection = 3,
	InteractionBGMPlay = 4
}

enum CraftNodeTier : int {
	Base = 0,
	Node01 = 1,
	Node02 = 2,
	Node03 = 3,
	Max = 4
}

enum GachaGroupType : int {
	None = 0,
	Reward_General = 1,
	System_Craft = 2,
	Reward_Pack = 3
}

enum ConsumeCondition : int {
	And = 0,
	Or = 1
}

enum GachaTicketType : int {
	None = 0,
	PackageThreeStar = 1,
	ThreeStar = 2,
	TwoStar = 3,
	Normal = 4,
	NormalOnce = 5,
	StartDash = 6,
	SelectRecruit = 7,
	PackagePropertyThreeStar = 8,
	Temp_1 = 9,
	PackageAcademyThreeStar = 10
}

enum GroundNodeType : int {
	None = 0,
	WalkAble = 1,
	JumpAble = 2,
	TSSOnly = 3,
	NotWalkAble = 2147483647
}

enum GuideMissionTabType : int {
	None = 0,
	Daily = 1,
	StageClear = 2
}

enum EffectBone : int {
	None = 0,
	Shot = 1,
	Head = 2,
	Body = 3,
	Shot2 = 4,
	Shot3 = 5,
	Extra = 6,
	Extra2 = 7,
	Extra3 = 8
}

enum RoadPuzzleMapTileType : int {
	None = 0,
	Start = 1,
	End = 2,
	Transit = 3,
	Obstacle = 4,
	Empty = 5
}

enum Geas : int {
	ForwardProjectile = 0,
	DiagonalProjectile = 1,
	SideProjectile = 2,
	Pierce = 3,
	Reflect = 4,
	Burn = 5,
	Chill = 6,
	AttackPower = 7,
	AttackSpeed = 8,
	Critical = 9,
	Heal = 10,
	MoveSpeed = 11,
	LifeSteal = 12,
	Evasion = 13
}

enum TBGProbModifyCondition : int {
	None = 0,
	AllyRevive = 1,
	DicePlayFail = 2
}

enum TBGThemaType : int {
	None = 0,
	Normal = 1,
	Hidden = 2
}

enum TBGObjectType : int {
	None = 0,
	EnemyBoss = 1,
	EnemyMinion = 2,
	Random = 3,
	Facility = 4,
	TreasureBox = 5,
	Start = 6,
	Portal = 7
}

enum TBGOptionSuccessType : int {
	None = 0,
	TBGItemAcquire = 1,
	ItemAcquire = 2,
	TBGDiceAcquire = 3,
	Portal = 4
}

enum TBGItemType : int {
	None = 0,
	Dice = 1,
	Heal = 2,
	HealExpansion = 3,
	Defence = 4,
	Guide = 5,
	DiceResultValue = 6,
	DefenceCritical = 7,
	DiceResultConfirm = 8
}

enum TBGItemEffectType : int {
	None = 0,
	PermanentContinuity = 1,
	TemporaryContinuation = 2,
	Immediately = 3
}

enum TBGPortalCondition : int {
	None = 0,
	ObjectAllEncounter = 1,
	Round = 2
}

enum MiniGameTBGThemaRewardType : int {
	TreasureReward = 0,
	EmptyTreasureReward = 1,
	HiddenThemaTreasureReward = 2
}

enum TBGVoiceCondition : int {
	None = 0,
	DiceResultSuccess = 1,
	DiceResultFailBattle = 2,
	DiceResultFailRandom = 3,
	EnemyDie = 4,
	TreasureBoxNormal = 5,
	TreasureBoxSpecial = 6,
	FacilityResult = 7
}

enum SuddenMissionContentType : int {
	OrdinaryState = 0,
	CampaignNormalStage = 1,
	CampaignHardStage = 2,
	EventStage = 3,
	WeekDungeon = 4,
	Chaser = 5,
	SchoolDungeon = 6,
	TimeAttackDungeon = 7,
	Raid = 8
}

enum ObstacleDestroyType : int {
	Remain = 0,
	Remove = 1
}

enum PotentialStatBonusRateType : int {
	None = 0,
	MaxHP = 1,
	AttackPower = 2,
	HealPower = 3
}

enum StoreType : int {
	None = 0,
	GooglePlay = 1,
	AppStore = 2,
	OneStore = 3,
	MicrosoftStore = 4,
	GalaxyStore = 5,
	STEAM = 6
}

enum PurchasePeriodType : int {
	None = 0,
	Day = 1,
	Week = 2,
	Month = 3
}

enum ProductTagType : int {
	Monthly = 0,
	Weekly = 1,
	Biweekly = 2
}

enum RecipeType : int {
	None = 0,
	Craft = 1,
	SkillLevelUp = 2,
	CharacterTranscendence = 3,
	EquipmentTierUp = 4,
	CafeRankUp = 5,
	SelectionItem = 6,
	WeaponTranscendence = 7,
	SelectRecruit = 8,
	CharacterPotential = 9
}

enum ScenarioBGType : int {
	None = 0,
	Image = 1,
	BlurRT = 2,
	Spine = 3,
	Hide = 4
}

enum ScenarioCharacterAction : int {
	Idle = 0,
	Shake = 1,
	Greeting = 2,
	FalldownLeft = 3,
	FalldownRight = 4,
	Stiff = 5,
	Hophop = 6,
	Jump = 7
}

enum DialogCategory : int {
	Cafe = 0,
	Echelon = 1,
	CharacterSSRNew = 2,
	CharacterGet = 3,
	Birthday = 4,
	Dating = 5,
	Title = 6,
	UILobby = 7,
	UILobbySpecial = 8,
	UIShop = 9,
	UIGacha = 10,
	UIRaidLobby = 11,
	UIWork = 12,
	UITitle = 13,
	UIWeekDungeon = 14,
	UIAcademyLobby = 15,
	UIRaidLobbySeasonOff = 16,
	UIRaidLobbySeasonOn = 17,
	UIWorkAronaSit = 18,
	UIWorkAronaSleep = 19,
	UIWorkAronaWatch = 20,
	UIGuideMission = 21,
	UILobby2 = 22,
	UIClanSearchList = 23,
	UIAttendance = 24,
	UIAttendanceEvent01 = 25,
	UIEventLobby = 26,
	UIEventShop = 27,
	UIEventBoxGachaShop = 28,
	UIAttendanceEvent02 = 29,
	UIAttendanceEvent03 = 30,
	UIEventCardShop = 31,
	UISchoolDungeon = 32,
	UIAttendanceEvent = 33,
	UISpecialOperationLobby = 34,
	WeaponGet = 35,
	UIAttendanceEvent04 = 36,
	UIEventFortuneGachaShop = 37,
	UIAttendanceEvent05 = 38,
	UIAttendanceEvent06 = 39,
	UIMission = 40,
	UIEventMission = 41,
	UIAttendanceEvent08 = 42,
	UIAttendanceEvent07 = 43,
	UIEventMiniGameMission = 44,
	UIAttendanceEvent09 = 45,
	UIAttendanceEvent10 = 46,
	UIAttendanceEvent11 = 47,
	UIWorkPlanaSit = 48,
	UIWorkPlanaUmbrella = 49,
	UIWorkPlanaCabinet = 50,
	UIWorkCoexist_AronaSleepSit = 51,
	UIWorkCoexist_PlanaWatchSky = 52,
	UIWorkCoexist_PlanaSitPeek = 53,
	UIWorkCoexist_AronaSleepPeek = 54,
	UIEventArchive = 55,
	UIAttendanceEvent12 = 56,
	UIAttendanceEvent13 = 57,
	UIAttendanceEvent14 = 58,
	GlobalAttendance01 = 59,
	GlobalAttendance02 = 60,
	GlobalAttendance03 = 61,
	GlobalAttendance04 = 62,
	GlobalAttendance05 = 63,
	UIAttendanceEvent15 = 64,
	UILobbySpecial2 = 65,
	UIAttendanceEvent16 = 66,
	UIEventTreasure = 67,
	UIMultiFloorRaid = 68,
	UIEventMiniGameDreamMaker = 69,
	UIAttendanceEvent17 = 70,
	UIAttendanceEvent18 = 71
}

enum DialogType : int {
	Talk = 0,
	Think = 1,
	UITalk = 2
}

enum StoryCondition : int {
	Open = 0,
	Locked = 1,
	ComingSoon = 2,
	Hide = 3
}

enum EmojiEvent : int {
	EnterConver = 0,
	EnterShelter = 1,
	SignalLeader = 2,
	Nice = 3,
	Reload = 4,
	Blind = 5,
	Panic = 6,
	Silence = 7,
	NearyDead = 8,
	Run = 9,
	TerrainAdaptionS = 10,
	TerrainAdaptionA = 11,
	TerrainAdaptionB = 12,
	TerrainAdaptionC = 13,
	TerrainAdaptionD = 14,
	TerrainAdaptionSS = 15,
	Dot = 16,
	Angry = 17,
	Bulb = 18,
	Exclaim = 19,
	Surprise = 20,
	Sad = 21,
	Sigh = 22,
	Steam = 23,
	Upset = 24,
	Respond = 25,
	Question = 26,
	Sweat = 27,
	Music = 28,
	Chat = 29,
	Twinkle = 30,
	Zzz = 31,
	Tear = 32,
	Heart = 33,
	Shy = 34,
	Think = 35
}

enum ScenarioZoomAnchors : int {
	Center = 0,
	LeftTop = 1,
	LeftBottom = 2,
	RightTop = 3,
	RightBottom = 4
}

enum ScenarioZoomType : int {
	Instant = 0,
	Slide = 1
}

enum ScenarioContentType : int {
	Prologue = 0,
	WeekDungeon = 1,
	Raid = 2,
	Arena = 3,
	Favor = 4,
	Shop = 5,
	EventContent = 6,
	Craft = 7,
	Chaser = 8,
	EventContentMeetup = 9,
	TimeAttack = 10,
	Mission = 11,
	EventContentPermanentPrologue = 12,
	EventContentReturnSeason = 13,
	MiniEvent = 14,
	EliminateRaid = 15,
	MultiFloorRaid = 16,
	EventContentPermanent = 17
}

enum ScenarioModeReplayTypes : int {
	None = 0,
	Event = 1,
	Favor = 2,
	Work = 3,
	EventMeetup = 4
}

enum PurchaseSourceType : int {
	None = 0,
	Product = 1,
	ProductMonthly = 2
}

enum ProductCategory : int {
	None = 0,
	Gem = 1,
	Monthly = 2,
	Package = 3,
	GachaDirect_DontUseGlobal = 4,
	TimeLimit = 5
}

enum ProductDisplayTag : int {
	None = 0,
	New = 1,
	Hot = 2,
	Sale = 3,
	Limited = 4
}

enum ShopFilterType : int {
	GachaTicket = 0,
	SecretStone = 1,
	SecretStone_1 = 2,
	SkillBook_Ultimate = 3,
	ExSkill = 4,
	SkillBook = 5,
	Craft = 6,
	AP = 7,
	CharacterExpItem = 8,
	Equip = 9,
	Material = 10,
	Creddit = 11,
	Furniture = 12,
	SelectItem = 13,
	Currency = 14,
	Hyakkiyako = 15,
	RedWinter = 16,
	Trinity = 17,
	Gehenna = 18,
	Abydos = 19,
	Millennium = 20,
	Arius = 21,
	Shanhaijing = 22,
	Valkyrie = 23,
	SRT = 24,
	Event = 25,
	ChaserTotalTicket = 26,
	SchoolTotalTicket = 27,
	Highlander = 28,
	ShopFilterDUMMY_2 = 29,
	ShopFilterDUMMY_3 = 30,
	ShopFilterDUMMY_4 = 31,
	ShopFilterDUMMY_5 = 32,
	ShopFilterDUMMY_6 = 33,
	ShopFilterDUMMY_7 = 34,
	ETC = 35,
	Bundle = 36
}

enum ShopFreeRecruitType : int {
	None = 0,
	Accumulation = 1,
	Reset = 2
}

enum GachaDisplayTag : int {
	None = 0,
	Limited = 1,
	TwoStar = 2,
	ThreeStar = 3,
	Free = 4,
	New = 5,
	Fes = 6,
	SelectRecruit = 7
}

enum ArenaSimulatorServer : int {
	Preset = 0,
	Live = 1,
	Dev = 2,
	QA = 3
}

enum TimeAttackDungeonType : int {
	None = 0,
	Defense = 1,
	Shooting = 2,
	Destruction = 3,
	Escort = 4
}

enum TimeAttackDungeonRewardType : int {
	Fixed = 0,
	TimeWeight = 1
}

enum WeekDungeonType : int {
	None = 0,
	ChaserA = 1,
	ChaserB = 2,
	ChaserC = 3,
	FindGift = 4,
	Blood = 5
}

enum WeekDay : int {
	Sunday = 0,
	Monday = 1,
	Tuesday = 2,
	Wednesday = 3,
	Thursday = 4,
	Friday = 5,
	Saturday = 6,
	All = 7
}

enum WorldRaidDifficulty : int {
	None = 0,
	A = 1,
	B = 2,
	C = 3,
	D = 4,
	E = 5,
	F = 6,
	G = 7
}

enum EchelonType : int {
	None = 0,
	Adventure = 1,
	Raid = 2,
	ArenaAttack = 3,
	ArenaDefence = 4,
	WeekDungeonChaserA = 5,
	Scenario = 6,
	WeekDungeonBlood = 7,
	WeekDungeonChaserB = 8,
	WeekDungeonChaserC = 9,
	WeekDungeonFindGift = 10,
	EventContent = 11,
	SchoolDungeonA = 12,
	SchoolDungeonB = 13,
	SchoolDungeonC = 14,
	TimeAttack = 15,
	WorldRaid = 16,
	Conquest = 17,
	ConquestManage = 18,
	StoryStrategyStage = 19,
	EliminateRaid01 = 20,
	EliminateRaid02 = 21,
	EliminateRaid03 = 22,
	Field = 23,
	MultiFloorRaid = 24,
	MinigameDefense = 25
}

enum AttendanceType : int {
	Basic = 0,
	Event = 1,
	Newbie = 2,
	EventCountDown = 3,
	Event20Days = 4
}

enum AttendanceCountRule : int {
	Accumulation = 0,
	Date = 1
}

enum AttendanceResetType : int {
	User = 0,
	Server = 1
}

enum Nation : int {
	None = 0,
	All = 1,
	JP = 2,
	GL = 3,
	KR = 4
}

enum DialogCondition : int {
	Idle = 0,
	Enter = 1,
	Exit = 2,
	Buy = 3,
	SoldOut = 4,
	BoxGachaNormal = 5,
	BoxGachaPrize = 6,
	Prize0 = 7,
	Prize1 = 8,
	Prize2 = 9,
	Prize3 = 10,
	Interaction = 11,
	Luck0 = 12,
	Luck1 = 13,
	Luck2 = 14,
	Luck3 = 15,
	Luck4 = 16,
	Luck5 = 17,
	StoryOpen = 18,
	CollectionOpen = 19,
	BoxGachaFinish = 20,
	FindTreasure = 21,
	GetTreasure = 22,
	RoundRenewal = 23,
	MiniGameDreamMakerEnough01 = 24,
	MiniGameDreamMakerEnough02 = 25,
	MiniGameDreamMakerEnough03 = 26,
	MiniGameDreamMakerEnough04 = 27,
	MiniGameDreamMakerDefault = 28
}

enum DialogConditionDetail : int {
	None = 0,
	Day = 1,
	Close = 2,
	MiniGameDreamMakerDay = 3
}

enum CVCollectionType : int {
	CVNormal = 0,
	CVEvent = 1,
	CVEtc = 2
}

enum CVUnlockScenarioType : int {
	Main = 0,
	Event = 1,
	SpecialOperation = 2
}

enum Anniversary : int {
	None = 0,
	UserBDay = 1,
	StudentBDay = 2
}

enum ClanRewardType : int {
	None = 0,
	AssistTerm = 1,
	AssistRent = 2,
	Attendance = 3
}

enum CurrencyOverChargeType : int {
	CanNotCharge = 0,
	FitToLimit = 1,
	ChargeOverLimit = 2
}

enum CurrencyAdditionalChargeType : int {
	EnableAutoChargeOverLimit = 0,
	DisableAutoChargeOverLimit = 1
}

enum DailyRefillType : int {
	None = 0,
	Default = 1,
	Login = 2
}

enum EmblemCategory : int {
	None = 0,
	Default = 1,
	Mission = 2,
	GroupStory = 3,
	Event = 4,
	MainStory = 5,
	Favor = 6,
	Boss = 7,
	Etc = 8,
	Etc_Anniversary = 9,
	MultiFloorRaid = 10,
	Potential = 11
}

enum EmblemDisplayType : int {
	Always = 0,
	Time = 1,
	Favor = 2,
	Potential = 3
}

enum EmblemCheckPassType : int {
	None = 0,
	Default = 1,
	Favor = 2,
	Story = 3,
	Potential = 4
}

enum EventNotifyType : int {
	RewardIncreaseEvent = 0,
	AccountExpIncreaseEvent = 1,
	RaidSeasonManager = 2,
	TimeAttackDungeonSeasonManage = 3,
	EliminateRaidSeasonManage = 4,
	MultiFloorRaidSeasonManage = 5
}

enum SchoolDungeonType : int {
	SchoolA = 0,
	SchoolB = 1,
	SchoolC = 2,
	None = 3
}

enum TacticSpeed : int {
	None = 0,
	Slow = 1,
	Normal = 2,
	Fast = 3
}

enum TacticSkillUse : int {
	None = 0,
	Auto = 1,
	Manual = 2
}

enum ShowSkillCutIn : int {
	None = 0,
	Once = 1,
	Always = 2
}

enum WebAPIErrorLevel : int {
	None = 0,
	Warning = 1,
	Error = 2
}

enum MemoryLobbyCategory : int {
	None = 0,
	UILobbySpecial = 1,
	UILobbySpecial2 = 2
}

enum MessagePopupLayout : int {
	TextOnly = 0,
	ImageBig = 1,
	ImageSmall = 2,
	UnlockCondition = 3
}

enum MessagePopupImagePositionType : int {
	ImageFirst = 0,
	TextFirst = 1
}

enum MessagePopupButtonType : int {
	Accept = 0,
	Cancel = 1,
	Command = 2
}

enum DreamMakerParameterType : int {
	None = 0,
	Param01 = 1,
	Param02 = 2,
	Param03 = 3,
	Param04 = 4
}

enum DreamMakerEndingType : int {
	None = 0,
	Normal = 1,
	Special = 2
}

enum DreamMakerEndingCondition : int {
	None = 0,
	Param01 = 1,
	Param02 = 2,
	Param03 = 3,
	Param04 = 4,
	Round = 5,
	CollectionCount = 6
}

enum DreamMakerEndingRewardType : int {
	None = 0,
	FirstEndingReward = 1,
	LoopEndingReward = 2
}

enum DreamMakerMultiplierCondition : int {
	None = 0,
	Round = 1,
	CollectionCount = 2,
	EndingCount = 3
}

enum DreamMakerResult : int {
	None = 0,
	Fail = 1,
	Success = 2,
	Perfect = 3
}

enum DreamMakerParamOperationType : int {
	None = 0,
	GrowUpHigh = 1,
	GrowUp = 2,
	GrowDownHigh = 3,
	GrowDown = 4
}

enum DreamMakerVoiceCondition : int {
	None = 0,
	Fail = 1,
	Success = 2,
	Perfect = 3,
	DailyResult = 4
}

enum RoadPuzzleRailTileType : int {
	None = 0,
	Straight = 1,
	CurveBig = 2,
	CurveSmall = 3
}

enum RoadPuzzleVoiceCondition : int {
	None = 0,
	TrainDepart = 1,
	RailConnectSuccess = 2,
	SaveSuccess = 3
}

enum OperatorCondition : int {
	None = 0,
	StrategyStart = 1,
	StrategyVictory = 2,
	StrategyDefeat = 3,
	AdventureCombatStart = 4,
	AdventureCombatVictory = 5,
	AdventureCombatDefeat = 6,
	ArenaCombatStart = 7,
	ArenaCombatVictory = 8,
	ArenaCombatDefeat = 9,
	WeekDungeonCombatStart = 10,
	WeekDungeonCombatVictory = 11,
	WeekDungeonCombatDefeat = 12,
	SchoolDungeonCombatStart = 13,
	SchoolDungeonCombatVictory = 14,
	SchoolDungeonCombatDefeat = 15,
	StrategyWarpUnitFromHideTile = 16,
	TimeAttackDungeonStart = 17,
	TimeAttackDungeonVictory = 18,
	TimeAttackDungeonDefeat = 19,
	WorldRaidBossSpawn = 20,
	WorldRaidBossKill = 21,
	WorldRaidBossDamaged = 22,
	WorldRaidScenarioBattle = 23,
	MinigameTBGThemaOpen = 24,
	MinigameTBGThemaComeback = 25,
	MinigameTBGAllyRevive = 26,
	MinigameTBGItemUse = 27
}

enum ScenarioBGScroll : int {
	None = 0,
	Vertical = 1,
	Horizontal = 2
}

enum ScenarioCharacterShapes : int {
	None = 0,
	Signal = 1,
	BlackSilhouette = 2,
	Closeup = 4,
	Highlight = 8,
	WhiteSilhouette = 16
}

enum ScenarioModeTypes : int {
	None = 0,
	Main = 1,
	Sub = 2,
	Replay = 3,
	Mini = 4,
	SpecialOperation = 5,
	Prologue = 6
}

enum ScenarioModeSubTypes : int {
	None = 0,
	Club = 1
}

enum ServiceActionType : int {
	ClanCreate = 0,
	HardAdventurePlayCountRecover = 1
}

enum ShortcutContentType : int {
	None = 0,
	CampaignStage = 1,
	EventStage = 2,
	Blood = 3,
	WeekDungeon = 4,
	Arena = 5,
	Raid = 6,
	Shop = 7,
	ItemInventory = 8,
	Craft = 9,
	SchoolDungeon = 10,
	Academy = 11,
	Mission = 12,
	MultiFloorRaid = 13
}

enum StickerGetConditionType : int {
	None = 0,
	StickerCheckPass = 1,
	GetStickerCondition = 2
}

enum StickerCheckPassType : int {
	None = 0,
	ClearScenarioModeId = 1,
	ClearCampaignStageId = 2
}

enum GetStickerConditionType : int {
	None = 0,
	Reset_StikcerGetCondition_AccountLevel = 1,
	Reset_StickerGetCondition_ScenarioModeId = 2,
	Reset_StickerGetCondition_EnemyKillCount = 3,
	Reset_StickerGetCondition_GetItemCount = 4,
	Reset_StickerGetCondition_BuyItemCount = 5,
	Reset_StickerGetCondition_ScheduleRank = 6,
	Reset_StickerGetCondition_Change_LobbyCharacter = 7,
	Reset_StickerGetCondition_Cafe_Character_Visit_Count = 8,
	Reset_StickerGetCondition_Cafe_Chracter_Invite_Count = 9,
	Reset_StickerGetCondition_GetChracterCount = 10,
	Reset_StickerGetCondition_Cafe_Furniture_Interaction = 11,
	Reset_StickerGetCondition_GetFurniture = 12,
	Reset_StickerGetCondition_SetFurniture = 13,
	Reset_StickerGetCondition_GivePresentChracterCount = 14,
	Reset_StickerGetCondition_GivePresentCount = 15,
	Reset_StickerGetCondition_MomotalkStudentCount = 16,
	Reset_StickerGetCondition_CombatwithCharacterCount = 17,
	Reset_StickerGetCondition_GachaCharacterCount = 18,
	Reset_StickerGetCondition_TouchLobbyCharacter = 19,
	Reset_StickerGetCondition_UseCircleEmoticonCount = 20,
	Reset_StickerGetCondition_CraftCount = 21,
	Reset_StickerGetCondition_NormalStageClear = 22,
	Reset_StickerGetCondition_NormalStageClear3Star = 23,
	Reset_StickerGetCondition_HardStageClear = 24,
	Reset_StickerGetCondition_HardStageClear3Star = 25,
	Achieve_StikcerGetCondition_AccountLevel = 26,
	Achieve_StickerGetCondition_ClearStageId = 27,
	Achieve_StickerGetCondition_ScenarioModeId = 28,
	Achieve_StickerGetCondition_EnemyKillCount = 29,
	Achieve_StickerGetCondition_GetItemCount = 30,
	Achieve_StickerGetCondition_BuyItemCount = 31,
	Achieve_StickerGetCondition_ScheduleRank = 32,
	Achieve_StickerGetCondition_Change_LobbyCharacter = 33,
	Achieve_StickerGetCondition_Cafe_Character_Visit_Count = 34,
	Achieve_StickerGetCondition_Cafe_Chracter_Invite_Count = 35,
	Achieve_StickerGetCondition_GetChracterCount = 36,
	Achieve_StickerGetCondition_Cafe_Furniture_Interaction = 37,
	Achieve_StickerGetCondition_GetFurniture = 38,
	Achieve_StickerGetCondition_SetFurniture = 39,
	Achieve_StickerGetCondition_GivePresentChracterCount = 40,
	Achieve_StickerGetCondition_GivePresentCount = 41,
	Achieve_StickerGetCondition_MomotalkStudentCount = 42,
	Achieve_StickerGetCondition_CombatwithCharacterCount = 43,
	Achieve_StickerGetCondition_GachaCharacterCount = 44,
	Achieve_StickerGetCondition_TouchLobbyCharacter = 45,
	Achieve_StickerGetCondition_UseCircleEmoticonCount = 46,
	Achieve_StickerGetCondition_CraftCount = 47,
	Achieve_StickerGetCondition_NormalStageClear = 48,
	Achieve_StickerGetCondition_NormalStageClear3Star = 49,
	Achieve_StickerGetCondition_HardStageClear = 50,
	Achieve_StickerGetCondition_HardStageClear3Star = 51,
	Reset_StickerGetCondition_EnemyKillCountbyTag = 52,
	Reset_StickerGetCondition_GetItemCountbyTag = 53,
	Reset_StickerGetCondition_ClearCampaignOrEventStageCount = 54,
	Reset_StickerGetCondition_CompleteCampaignStageMinimumTurn = 55,
	Reset_StickerGetCondition_ClearCampaignStageDifficultyNormal = 56,
	Reset_StickerGetCondition_ClearCampaignStageDifficultyHard = 57,
	Reset_StickerGetCondition_EventClearCampaignStageCount = 58,
	Reset_StickerGetCondition_EventClearSpecificCampaignStageCount = 59,
	Reset_StickerGetCondition_EventCompleteCampaignStageMinimumTurn = 60,
	Reset_StickerGetCondition_EventClearCampaignStageDifficultyNormal = 61,
	Reset_StickerGetCondition_EventClearCampaignStageDifficultyHard = 62,
	Reset_StickerGetCondition_ClearSpecificCampaignStageCount = 63,
	Reset_StickerGetCondition_ClearCampaignStageTimeLimitFromSecond = 64,
	Reset_StickerGetCondition_ClearEventStageTimeLimitFromSecond = 65,
	Reset_StickerGetCondition_ClearStageRhythm = 66,
	Reset_StickerGetCondition_ClearSpecificStageShooting = 67,
	Reset_StickerGetCondition_CompleteStage = 68,
	Achieve_StickerGetCondition_ClearCampaignStageCount = 69,
	Achieve_StickerGetCondition_ClearChaserDungeonCount = 70,
	Reset_StickerGetCondition_ClearSpecificChaserDungeonCount = 71,
	Achieve_StickerGetCondition_ClearSchoolDungeonCount = 72,
	Reset_StickerGetCondition_ClearSpecificSchoolDungeonCount = 73,
	Reset_StickerGetCondition_ClearSpecificWeekDungeonCount = 74,
	Achieve_StickerGetCondition_ClearFindGiftAndBloodDungeonCount = 75
}

enum ToastType : int {
	None = 0,
	Tactic_Left = 1,
	Tactic_Right = 2,
	Social_Center = 3,
	Social_Mission = 4,
	Social_Right = 5,
	Notice_Center = 6,
	PC_LeftCenter = 7
}

enum TutorialFailureContentType : int {
	None = 0,
	Campaign = 1,
	WeekDungeon = 2,
	Raid = 3,
	TimeAttackDungeon = 4,
	WorldRaid = 5,
	Conquest = 6,
	EliminateRaid = 7,
	MultiFloorRaid = 8
}

enum CVPrintType : int {
	CharacterOverwrite = 0,
	PrefabOverwrite = 1,
	Add = 2
}

table GroundVector3 {
	x: float; // index 0x0
	y: float; // index 0x0
	z: float; // index 0x0
}

table AcademyFavorScheduleExcelTable {
	DataList: [AcademyFavorScheduleExcel]; // index 0x0
}

table AcademyFavorScheduleExcel {
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	ScheduleGroupId: long; // index 0x0
	OrderInGroup: long; // index 0x0
	Location: string; // index 0x0
	LocalizeScenarioId: uint; // index 0x0
	FavorRank: long; // index 0x0
	SecretStoneAmount: long; // index 0x0
	ScenarioSriptGroupId: long; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardAmount: [long]; // index 0x0
}

table AcademyLocationExcelTable {
	DataList: [AcademyLocationExcel]; // index 0x0
}

table AcademyLocationExcel {
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	PrefabPath: string; // index 0x0
	IconImagePath: string; // index 0x0
	openCondition: [School]; // index 0x0
	OpenConditionCount: [long]; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	OpenTeacherRank: long; // index 0x0
}

table AcademyLocationRankExcelTable {
	DataList: [AcademyLocationRankExcel]; // index 0x0
}

table AcademyLocationRankExcel {
	Rank: long; // index 0x0
	RankExp: long; // index 0x0
	TotalExp: long; // index 0x0
}

table AcademyMessanger1ExcelTable {
	DataList: [AcademyMessanger1Excel]; // index 0x0
}

table AcademyMessanger1Excel {
	MessageGroupId: long; // index 0x0
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	MessageCondition: AcademyMessageConditions; // index 0x0
	ConditionValue: long; // index 0x0
	PreConditionGroupId: long; // index 0x0
	PreConditionFavorScheduleId: long; // index 0x0
	FavorScheduleId: long; // index 0x0
	NextGroupId: long; // index 0x0
	FeedbackTimeMillisec: long; // index 0x0
	MessageType: AcademyMessageTypes; // index 0x0
	ImagePath: string; // index 0x0
	MessageKR: string; // index 0x0
	MessageJP: string; // index 0x0
	MessageTH: string; // index 0x0
	MessageTW: string; // index 0x0
	MessageEN: string; // index 0x0
}

table AcademyMessanger2ExcelTable {
	DataList: [AcademyMessanger2Excel]; // index 0x0
}

table AcademyMessanger2Excel {
	MessageGroupId: long; // index 0x0
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	MessageCondition: AcademyMessageConditions; // index 0x0
	ConditionValue: long; // index 0x0
	PreConditionGroupId: long; // index 0x0
	PreConditionFavorScheduleId: long; // index 0x0
	FavorScheduleId: long; // index 0x0
	NextGroupId: long; // index 0x0
	FeedbackTimeMillisec: long; // index 0x0
	MessageType: AcademyMessageTypes; // index 0x0
	ImagePath: string; // index 0x0
	MessageKR: string; // index 0x0
	MessageJP: string; // index 0x0
	MessageTH: string; // index 0x0
	MessageTW: string; // index 0x0
	MessageEN: string; // index 0x0
}

table AcademyMessanger3ExcelTable {
	DataList: [AcademyMessanger3Excel]; // index 0x0
}

table AcademyMessanger3Excel {
	MessageGroupId: long; // index 0x0
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	MessageCondition: AcademyMessageConditions; // index 0x0
	ConditionValue: long; // index 0x0
	PreConditionGroupId: long; // index 0x0
	PreConditionFavorScheduleId: long; // index 0x0
	FavorScheduleId: long; // index 0x0
	NextGroupId: long; // index 0x0
	FeedbackTimeMillisec: long; // index 0x0
	MessageType: AcademyMessageTypes; // index 0x0
	ImagePath: string; // index 0x0
	MessageKR: string; // index 0x0
	MessageJP: string; // index 0x0
	MessageTH: string; // index 0x0
	MessageTW: string; // index 0x0
	MessageEN: string; // index 0x0
}

table AcademyMessangerExcelTable {
	DataList: [AcademyMessangerExcel]; // index 0x0
}

table AcademyMessangerExcel {
	MessageGroupId: long; // index 0x0
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	MessageCondition: AcademyMessageConditions; // index 0x0
	ConditionValue: long; // index 0x0
	PreConditionGroupId: long; // index 0x0
	PreConditionFavorScheduleId: long; // index 0x0
	FavorScheduleId: long; // index 0x0
	NextGroupId: long; // index 0x0
	FeedbackTimeMillisec: long; // index 0x0
	MessageType: AcademyMessageTypes; // index 0x0
	ImagePath: string; // index 0x0
	MessageKR: string; // index 0x0
	MessageJP: string; // index 0x0
	MessageTH: string; // index 0x0
	MessageTW: string; // index 0x0
	MessageEN: string; // index 0x0
}

table AcademyRewardExcelTable {
	DataList: [AcademyRewardExcel]; // index 0x0
}

table AcademyRewardExcel {
	Location: string; // index 0x0
	ScheduleGroupId: long; // index 0x0
	OrderInGroup: long; // index 0x0
	Id: long; // index 0x0
	ProgressTexture: string; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	LocationRank: long; // index 0x0
	FavorExp: long; // index 0x0
	SecretStoneAmount: long; // index 0x0
	SecretStoneProb: long; // index 0x0
	ExtraFavorExp: long; // index 0x0
	ExtraFavorExpProb: long; // index 0x0
	ExtraRewardParcelType: [ParcelType]; // index 0x0
	ExtraRewardParcelId: [long]; // index 0x0
	extraRewardAmount: [long]; // index 0x0
	extraRewardProb: [long]; // index 0x0
	isExtraRewardDisplayed: [bool]; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	rewardAmount: [long]; // index 0x0
}

table AcademyTicketExcelTable {
	DataList: [AcademyTicketExcel]; // index 0x0
}

table AcademyTicketExcel {
	LocationRankSum: long; // index 0x0
	ScheduleTicktetMax: long; // index 0x0
}

table AcademyZoneExcelTable {
	DataList: [AcademyZoneExcel]; // index 0x0
}

table AcademyZoneExcel {
	Id: long; // index 0x0
	LocationId: long; // index 0x0
	LocationRankForUnlock: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	StudentVisitProb: [long]; // index 0x0
	RewardGroupId: long; // index 0x0
	Tags: [Tag]; // index 0x0
}

table AddressableBlackListExcelTable {
	DataList: [AddressableBlackListExcel]; // index 0x0
}

table AddressableBlackListExcel {
	Id: long; // index 0x0
	folderPath: [string]; // index 0x0
	resourcePath: [string]; // index 0x0
}

table AddressableWhiteListExcelTable {
	DataList: [AddressableWhiteListExcel]; // index 0x0
}

table AddressableWhiteListExcel {
	Id: long; // index 0x0
	FolderPath: [string]; // index 0x0
	resourcePath: [string]; // index 0x0
}

table AnimationBlendTable {
	DataList: [BlendData]; // index 0x0
}

table BlendData {
	Type: int; // index 0x0
	InfoList: [BlendInfo]; // index 0x0
}

table BlendInfo {
	From: int; // index 0x0
	To: int; // index 0x0
	blend: float; // index 0x0
}

table AnimatorDataTable {
	DataList: [AnimatorData]; // index 0x0
}

table AnimatorData {
	DefaultStateName: string; // index 0x0
	Name: string; // index 0x0
	DataList: [AniStateData]; // index 0x0
}

table AniStateData {
	StateName: string; // index 0x0
	StatePrefix: string; // index 0x0
	StateNameWithPrefix: string; // index 0x0
	Tag: string; // index 0x0
	SpeedParameterName: string; // index 0x0
	SpeedParamter: float; // index 0x0
	StateSpeed: float; // index 0x0
	ClipName: string; // index 0x0
	Length: float; // index 0x0
	FrameRate: float; // index 0x0
	IsLooping: bool; // index 0x0
	Events: [AniEventData]; // index 0x0
}

table AniEventData {
	Name: string; // index 0x0
	Time: float; // index 0x0
	IntParam: int; // index 0x0
	FloatParam: float; // index 0x0
	StringParam: string; // index 0x0
}

table ArenaLevelSectionExcelTable {
	DataList: [ArenaLevelSectionExcel]; // index 0x0
}

table ArenaLevelSectionExcel {
	ArenaSeasonId: long; // index 0x0
	StartLevel: long; // index 0x0
	LastLevel: long; // index 0x0
	UserCount: long; // index 0x0
}

table ArenaMapExcelTable {
	DataList: [ArenaMapExcel]; // index 0x0
}

table ArenaMapExcel {
	UniqueId: long; // index 0x0
	TerrainType: long; // index 0x0
	TerrainTypeLocalizeKey: string; // index 0x0
	ImagePath: string; // index 0x0
	GroundGroupId: long; // index 0x0
	GroundGroupNameLocalizeKey: string; // index 0x0
	StartRank: long; // index 0x0
	EndRank: long; // index 0x0
	GroundId: long; // index 0x0
}

table ArenaNPCExcelTable {
	DataList: [ArenaNPCExcel]; // index 0x0
}

table ArenaNPCExcel {
	UniqueId: long; // index 0x0
	Rank: long; // index 0x0
	NPCAccountLevel: long; // index 0x0
	NPCLevel: long; // index 0x0
	NPCLevelDeviation: long; // index 0x0
	NPCStarGrade: long; // index 0x0
	exceptionCharacterRarities: [Rarity]; // index 0x0
	ExceptionMainCharacterIds: [long]; // index 0x0
	exceptionSupportCharacterIds: [long]; // index 0x0
	ExceptionTSSIds: [long]; // index 0x0
}

table ArenaRewardExcelTable {
	DataList: [ArenaRewardExcel]; // index 0x0
}

table ArenaRewardExcel {
	UniqueId: long; // index 0x0
	ArenaRewardType: ArenaRewardType; // index 0x0
	RankStart: long; // index 0x0
	RankEnd: long; // index 0x0
	RankIconPath: string; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	rewardParcelUniqueId: [long]; // index 0x0
	RewardParcelUniqueName: [string]; // index 0x0
	rewardParcelAmount: [long]; // index 0x0
}

table ArenaSeasonCloseRewardExcelTable {
	DataList: [ArenaSeasonCloseRewardExcel]; // index 0x0
}

table ArenaSeasonCloseRewardExcel {
	SeasonId: long; // index 0x0
	RankStart: long; // index 0x0
	RankEnd: long; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardParcelUniqueId: [long]; // index 0x0
	RewardParcelUniqueName: [string]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table ArenaSeasonExcelTable {
	DataList: [ArenaSeasonExcel]; // index 0x0
}

table ArenaSeasonExcel {
	UniqueId: long; // index 0x0
	SeasonStartDate: string; // index 0x0
	SeasonEndDate: string; // index 0x0
	SeasonGroupLimit: long; // index 0x0
	PrevSeasonId: long; // index 0x0
}

table BattleLevelFactorExcelTable {
	DataList: [BattleLevelFactorExcel]; // index 0x0
}

table BattleLevelFactorExcel {
	LevelDiff: int; // index 0x0
	DamageRate: long; // index 0x0
}

table BossExternalBTExcelTable {
	DataList: [BossExternalBTExcel]; // index 0x0
}

table BossExternalBTExcel {
	ExternalBTId: long; // index 0x0
	AIPhase: long; // index 0x0
	ExternalBTNodeType: ExternalBTNodeType; // index 0x0
	ExternalBTTrigger: ExternalBTTrigger; // index 0x0
	TriggerArgument: string; // index 0x0
	BehaviorRate: long; // index 0x0
	ExternalBehavior: ExternalBehavior; // index 0x0
	BehaviorArgument: string; // index 0x0
}

table BossPhaseExcelTable {
	DataList: [BossPhaseExcel]; // index 0x0
}

table BossPhaseExcel {
	Id: long; // index 0x0
	AIPhase: long; // index 0x0
	NormalAttackSkillUniqueName: string; // index 0x0
	useExSkill: [bool]; // index 0x0
}

table BuffParticleExcelTable {
	DataList: [BuffParticleExcel]; // index 0x0
}

table BuffParticleExcel {
	UniqueId: long; // index 0x0
	UniqueName: string; // index 0x0
	BuffType: string; // index 0x0
	BuffName: string; // index 0x0
	ResourcePath: string; // index 0x0
}

table BulletArmorDamageFactorExcelTable {
	DataList: [BulletArmorDamageFactorExcel]; // index 0x0
}

table BulletArmorDamageFactorExcel {
	DamageFactorGroupId: string; // index 0x0
	BulletType: BulletType; // index 0x0
	ArmorType: ArmorType; // index 0x0
	DamageRate: long; // index 0x0
	DamageAttribute: DamageAttribute; // index 0x0
	MinDamageRate: long; // index 0x0
	MaxDamageRate: long; // index 0x0
	ShowHighlightFloater: bool; // index 0x0
}

table CafeInfoExcelTable {
	DataList: [CafeInfoExcel]; // index 0x0
}

table CafeInfoExcel {
	CafeId: long; // index 0x0
	IsDefault: bool; // index 0x0
	OpenConditionCafeId: OpenConditionContent; // index 0x0
	OpenConditionCafeInvite: OpenConditionContent; // index 0x0
}

table CafeInteractionExcelTable {
	DataList: [CafeInteractionExcel]; // index 0x0
}

table CafeInteractionExcel {
	CharacterId: long; // index 0x0
	IgnoreIfUnobtained: bool; // index 0x0
	IgnoreIfUnobtainedStartDate: string; // index 0x0
	IgnoreIfUnobtainedEndDate: string; // index 0x0
	bubbleType: [BubbleType]; // index 0x0
	BubbleDuration: [long]; // index 0x0
	FavorEmoticonRewardParcelType: ParcelType; // index 0x0
	FavorEmoticonRewardId: long; // index 0x0
	FavorEmoticonRewardAmount: long; // index 0x0
	CafeCharacterState: [string]; // index 0x0
}

table CafeProductionExcelTable {
	DataList: [CafeProductionExcel]; // index 0x0
}

table CafeProductionExcel {
	CafeId: long; // index 0x0
	Rank: long; // index 0x0
	CafeProductionParcelType: ParcelType; // index 0x0
	CafeProductionParcelId: long; // index 0x0
	ParcelProductionCoefficient: long; // index 0x0
	ParcelProductionCorrectionValue: long; // index 0x0
	ParcelStorageMax: long; // index 0x0
}

table CafeRankExcelTable {
	DataList: [CafeRankExcel]; // index 0x0
}

table CafeRankExcel {
	CafeId: long; // index 0x0
	Rank: long; // index 0x0
	RecipeId: long; // index 0x0
	ComfortMax: long; // index 0x0
	TagCountMax: long; // index 0x0
	CharacterVisitMin: int; // index 0x0
	CharacterVisitMax: int; // index 0x0
	CafeVisitWeightBase: int; // index 0x0
	cafeVisitWeightTagBonusStep: [int]; // index 0x0
	CafeVisitWeightTagBonus: [int]; // index 0x0
}

table CampaignChapterExcelTable {
	DataList: [CampaignChapterExcel]; // index 0x0
}

table CampaignChapterExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	NormalImagePath: string; // index 0x0
	HardImagePath: string; // index 0x0
	Order: long; // index 0x0
	preChapterId: [long]; // index 0x0
	ChapterRewardId: long; // index 0x0
	ChapterHardRewardId: long; // index 0x0
	ChapterVeryHardRewardId: long; // index 0x0
	NormalCampaignStageId: [long]; // index 0x0
	NormalExtraStageId: [long]; // index 0x0
	hardCampaignStageId: [long]; // index 0x0
	veryHardCampaignStageId: [long]; // index 0x0
	IsTacticSkip: bool; // index 0x0
}

table CampaignChapterRewardExcelTable {
	DataList: [CampaignChapterRewardExcel]; // index 0x0
}

table CampaignChapterRewardExcel {
	Id: long; // index 0x0
	CampaignChapterStar: long; // index 0x0
	chapterRewardParcelType: [ParcelType]; // index 0x0
	ChapterRewardId: [long]; // index 0x0
	chapterRewardAmount: [int]; // index 0x0
}

table CampaignStageExcelTable {
	DataList: [CampaignStageExcel]; // index 0x0
}

table CampaignStageExcel {
	Id: long; // index 0x0
	Deprecated: bool; // index 0x0
	Name: string; // index 0x0
	StageNumber: string; // index 0x0
	CleardScenarioId: long; // index 0x0
	BattleDuration: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	StageEnterEchelonCount: int; // index 0x0
	StarConditionTacticRankSCount: long; // index 0x0
	StarConditionTurnCount: long; // index 0x0
	EnterScenarioGroupId: [long]; // index 0x0
	ClearScenarioGroupId: [long]; // index 0x0
	StrategyMap: string; // index 0x0
	StrategyMapBG: string; // index 0x0
	CampaignStageRewardId: long; // index 0x0
	MaxTurn: int; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	BgmId: string; // index 0x0
	StrategyEnvironment: StrategyEnvironment; // index 0x0
	GroundId: long; // index 0x0
	StrategySkipGroundId: int; // index 0x0
	ContentType: ContentType; // index 0x0
	BGMId: long; // index 0x0
	FirstClearReportEventName: string; // index 0x0
	FirstClearFunnelMessage: string; // index 0x0
	FirstClearEventMessage: string; // index 0x0
	TacticRewardExp: long; // index 0x0
	FixedEchelonId: long; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table CampaignStageRewardExcelTable {
	DataList: [CampaignStageRewardExcel]; // index 0x0
}

table CampaignStageRewardExcel {
	GroupId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	StageRewardProb: int; // index 0x0
	StageRewardParcelType: ParcelType; // index 0x0
	StageRewardId: long; // index 0x0
	StageRewardAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table CampaignStrategyObjectExcelTable {
	DataList: [CampaignStrategyObjectExcel]; // index 0x0
}

table CampaignStrategyObjectExcel {
	Id: long; // index 0x0
	Key: uint; // index 0x0
	Name: string; // index 0x0
	PrefabName: string; // index 0x0
	StrategyObjectType: StrategyObjectType; // index 0x0
	StrategyRewardParcelType: ParcelType; // index 0x0
	StrategyRewardID: long; // index 0x0
	StrategyRewardName: string; // index 0x0
	StrategyRewardAmount: int; // index 0x0
	StrategySightRange: long; // index 0x0
	PortalId: int; // index 0x0
	HealValue: int; // index 0x0
	SwithId: int; // index 0x0
	BuffId: int; // index 0x0
	Disposable: bool; // index 0x0
}

table CampaignUnitExcelTable {
	DataList: [CampaignUnitExcel]; // index 0x0
}

table CampaignUnitExcel {
	Id: long; // index 0x0
	Key: uint; // index 0x0
	Name: string; // index 0x0
	PrefabName: string; // index 0x0
	StrategyPrefabName: string; // index 0x0
	EnterScenarioGroupId: [long]; // index 0x0
	ClearScenarioGroupId: [long]; // index 0x0
	GroundId: long; // index 0x0
	MoveRange: int; // index 0x0
	AIMoveType: StrategyAIType; // index 0x0
	Grade: HexaUnitGrade; // index 0x0
	EnvironmentType: TacticEnvironment; // index 0x0
	Scale: float; // index 0x0
	IsTacticSkip: bool; // index 0x0
}

table CharacterAcademyTagsExcelTable {
	DataList: [CharacterAcademyTagsExcel]; // index 0x0
}

table CharacterAcademyTagsExcel {
	Id: long; // index 0x0
	favorTags: [Tag]; // index 0x0
	favorItemTags: [Tag]; // index 0x0
	FavorItemUniqueTags: [Tag]; // index 0x0
	forbiddenTags: [Tag]; // index 0x0
	ZoneWhiteListTags: [Tag]; // index 0x0
}

table CharacterAIExcelTable {
	DataList: [CharacterAIExcel]; // index 0x0
}

table CharacterAIExcel {
	Id: long; // index 0x0
	EngageType: EngageType; // index 0x0
	Positioning: PositioningType; // index 0x0
	CheckCanUseAutoSkill: bool; // index 0x0
	DistanceReduceRatioObstaclePath: long; // index 0x0
	DistanceReduceObstaclePath: long; // index 0x0
	DistanceReduceRatioFormationPath: long; // index 0x0
	DistanceReduceFormationPath: long; // index 0x0
	MinimumPositionGap: long; // index 0x0
	CanUseObstacleOfKneelMotion: bool; // index 0x0
	CanUseObstacleOfStandMotion: bool; // index 0x0
	HasTargetSwitchingMotion: bool; // index 0x0
}

table CharacterCalculationLimitExcelTable {
	DataList: [CharacterCalculationLimitExcel]; // index 0x0
}

table CharacterCalculationLimitExcel {
	Id: long; // index 0x0
	TacticEntityType: TacticEntityType; // index 0x0
	CalculationValue: BattleCalculationStat; // index 0x0
	MinValue: long; // index 0x0
	MaxValue: long; // index 0x0
	limitStartValue: [long]; // index 0x0
	DecreaseRate: [long]; // index 0x0
}

table CharacterCombatSkinExcelTable {
	DataList: [CharacterCombatSkinExcel]; // index 0x0
}

table CharacterCombatSkinExcel {
	GroupId: string; // index 0x0
	UniqueId: long; // index 0x0
	ResourcePath: string; // index 0x0
}

table CharacterDialogFieldExcelTable {
	DataList: [CharacterDialogFieldExcel]; // index 0x0
}

table CharacterDialogFieldExcel {
	GroupId: long; // index 0x0
	Phase: int; // index 0x0
	TargetIndex: int; // index 0x0
	DialogType: FieldDialogType; // index 0x0
	Duration: long; // index 0x0
	MotionName: string; // index 0x0
	IsInteractionDialog: bool; // index 0x0
	HideUI: bool; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
}

table CharacterExcelTable {
	DataList: [CharacterExcel]; // index 0x0
}

table CharacterExcel {
	Id: long; // index 0x0
	DevName: string; // index 0x0
	CostumeGroupId: long; // index 0x0
	IsPlayable: bool; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	CollectionVisible: bool; // index 0x0
	ReleaseDate: string; // index 0x0
	CollectionVisibleStartDate: string; // index 0x0
	CollectionVisibleEndDate: string; // index 0x0
	isPlayableCharacter: bool; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	Rarity: Rarity; // index 0x0
	IsNPC: bool; // index 0x0
	TacticEntityType: TacticEntityType; // index 0x0
	CanSurvive: bool; // index 0x0
	IsDummy: bool; // index 0x0
	SubPartsCount: int; // index 0x0
	TacticRole: TacticRole; // index 0x0
	WeaponType: WeaponType; // index 0x0
	TacticRange: TacticRange; // index 0x0
	BulletType: BulletType; // index 0x0
	ArmorType: ArmorType; // index 0x0
	AimIKType: AimIKType; // index 0x0
	School: School; // index 0x0
	Club: Club; // index 0x0
	DefaultStarGrade: int; // index 0x0
	MaxStarGrade: int; // index 0x0
	StatLevelUpType: StatLevelUpType; // index 0x0
	SquadType: SquadType; // index 0x0
	Jumpable: bool; // index 0x0
	PersonalityId: long; // index 0x0
	CharacterAIId: long; // index 0x0
	ExternalBTId: long; // index 0x0
	MainCombatStyleId: long; // index 0x0
	CombatStyleIndex: int; // index 0x0
	ScenarioCharacter: string; // index 0x0
	SpawnTemplateId: uint; // index 0x0
	FavorLevelupType: int; // index 0x0
	equipmentSlot: [EquipmentCategory]; // index 0x0
	WeaponLocalizeId: uint; // index 0x0
	DisplayEnemyInfo: bool; // index 0x0
	bodyRadius: long; // index 0x0
	RandomEffectRadius: long; // index 0x0
	HPBarHide: bool; // index 0x0
	HpBarHeight: float; // index 0x0
	HighlightFloaterHeight: float; // index 0x0
	EmojiOffsetX: float; // index 0x0
	EmojiOffsetY: float; // index 0x0
	MoveStartFrame: int; // index 0x0
	MoveEndFrame: int; // index 0x0
	JumpMotionFrame: int; // index 0x0
	AppearFrame: int; // index 0x0
	CanMove: bool; // index 0x0
	CanFix: bool; // index 0x0
	CanCrowdControl: bool; // index 0x0
	CanBattleItemMove: bool; // index 0x0
	IgnoreObstacle: bool; // index 0x0
	IsAirUnit: bool; // index 0x0
	AirUnitHeight: long; // index 0x0
	Tags: [Tag]; // index 0x0
	SecretStoneItemId: long; // index 0x0
	SecretStoneItemAmount: int; // index 0x0
	CharacterPieceItemId: long; // index 0x0
	CharacterPieceItemAmount: int; // index 0x0
	CombineRecipeId: long; // index 0x0
}

table CharacterIllustCoordinateExcelTable {
	DataList: [CharacterIllustCoordinateExcel]; // index 0x0
}

table CharacterIllustCoordinateExcel {
	Id: long; // index 0x0
	CharacterBodyCenterX: float; // index 0x0
	CharacterBodyCenterY: float; // index 0x0
	DefaultScale: float; // index 0x0
	MinScale: float; // index 0x0
	MaxScale: float; // index 0x0
}

table CharacterLevelExcelTable {
	DataList: [CharacterLevelExcel]; // index 0x0
}

table CharacterLevelExcel {
	Level: int; // index 0x0
	Exp: long; // index 0x0
	TotalExp: long; // index 0x0
}

table CharacterLevelStatFactorExcelTable {
	DataList: [CharacterLevelStatFactorExcel]; // index 0x0
}

table CharacterLevelStatFactorExcel {
	Level: long; // index 0x0
	CriticalFactor: long; // index 0x0
	StabilityFactor: long; // index 0x0
	DefenceFactor: long; // index 0x0
	AccuracyFactor: long; // index 0x0
}

table CharacterSkillListExcelTable {
	DataList: [CharacterSkillListExcel]; // index 0x0
}

table CharacterSkillListExcel {
	CharacterSkillListGroupId: long; // index 0x0
	MinimumGradeCharacterWeapon: int; // index 0x0
	MinimumTierCharacterGear: int; // index 0x0
	FormIndex: int; // index 0x0
	IsRootMotion: bool; // index 0x0
	IsMoveLeftRight: bool; // index 0x0
	UseRandomExSkillTimeline: bool; // index 0x0
	TSAInteractionId: long; // index 0x0
	NormalSkillGroupId: [string]; // index 0x0
	normalSkillTimeLineIndex: [int]; // index 0x0
	exSkillGroupId: [string]; // index 0x0
	ExSkillCutInTimeLineIndex: [string]; // index 0x0
	ExSkillLevelTimeLineIndex: [string]; // index 0x0
	publicSkillGroupId: [string]; // index 0x0
	PublicSkillTimeLineIndex: [int]; // index 0x0
	PassiveSkillGroupId: [string]; // index 0x0
	LeaderSkillGroupId: [string]; // index 0x0
	ExtraPassiveSkillGroupId: [string]; // index 0x0
	HiddenPassiveSkillGroupId: [string]; // index 0x0
}

table CharacterStatExcelTable {
	DataList: [CharacterStatExcel]; // index 0x0
}

table CharacterStatExcel {
	CharacterId: long; // index 0x0
	StabilityRate: long; // index 0x0
	StabilityPoint: long; // index 0x0
	AttackPower1: long; // index 0x0
	AttackPower100: long; // index 0x0
	MaxHP1: long; // index 0x0
	MaxHP100: long; // index 0x0
	DefensePower1: long; // index 0x0
	DefensePower100: long; // index 0x0
	HealPower1: long; // index 0x0
	HealPower100: long; // index 0x0
	DodgePoint: long; // index 0x0
	AccuracyPoint: long; // index 0x0
	CriticalPoint: long; // index 0x0
	CriticalResistPoint: long; // index 0x0
	CriticalDamageRate: long; // index 0x0
	CriticalDamageResistRate: long; // index 0x0
	BlockRate: long; // index 0x0
	HealEffectivenessRate: long; // index 0x0
	OppressionPower: long; // index 0x0
	OppressionResist: long; // index 0x0
	DefensePenetration1: long; // index 0x0
	DefensePenetration100: long; // index 0x0
	DefensePenetrationResist1: long; // index 0x0
	DefensePenetrationResist100: long; // index 0x0
	EnhanceExplosionRate: long; // index 0x0
	EnhancePierceRate: long; // index 0x0
	EnhanceMysticRate: long; // index 0x0
	EnhanceSonicRate: long; // index 0x0
	EnhanceSiegeRate: long; // index 0x0
	EnhanceNormalRate: long; // index 0x0
	EnhanceLightArmorRate: long; // index 0x0
	EnhanceHeavyArmorRate: long; // index 0x0
	EnhanceUnarmedRate: long; // index 0x0
	EnhanceElasticArmorRate: long; // index 0x0
	EnhanceStructureRate: long; // index 0x0
	EnhanceNormalArmorRate: long; // index 0x0
	ExtendBuffDuration: long; // index 0x0
	ExtendDebuffDuration: long; // index 0x0
	ExtendCrowdControlDuration: long; // index 0x0
	AmmoCount: long; // index 0x0
	AmmoCost: long; // index 0x0
	IgnoreDelayCount: long; // index 0x0
	NormalAttackSpeed: long; // index 0x0
	Range: long; // index 0x0
	InitialRangeRate: long; // index 0x0
	MoveSpeed: long; // index 0x0
	SightPoint: long; // index 0x0
	ActiveGauge: long; // index 0x0
	GroggyGauge: int; // index 0x0
	GroggyTime: int; // index 0x0
	StrategyMobility: long; // index 0x0
	ActionCount: long; // index 0x0
	StrategySightRange: long; // index 0x0
	DamageRatio: long; // index 0x0
	DamagedRatio: long; // index 0x0
	DamageRatio2Increase: long; // index 0x0
	DamageRatio2Decrease: long; // index 0x0
	DamagedRatio2Increase: long; // index 0x0
	DamagedRatio2Decrease: long; // index 0x0
	ExDamagedRatioIncrease: long; // index 0x0
	ExDamagedRatioDecrease: long; // index 0x0
	EnhanceExDamageRate: long; // index 0x0
	ReduceExDamagedRate: long; // index 0x0
	HealRate: long; // index 0x0
	HealLightArmorRate: long; // index 0x0
	HealHeavyArmorRate: long; // index 0x0
	HealUnarmedRate: long; // index 0x0
	HealElasticArmorRate: long; // index 0x0
	HealNormalArmorRate: long; // index 0x0
	HealedExplosionRate: long; // index 0x0
	HealedPierceRate: long; // index 0x0
	HealedMysticRate: long; // index 0x0
	HealedSonicRate: long; // index 0x0
	HealedNormalRate: long; // index 0x0
	StreetBattleAdaptation: TerrainAdaptationStat; // index 0x0
	OutdoorBattleAdaptation: TerrainAdaptationStat; // index 0x0
	IndoorBattleAdaptation: TerrainAdaptationStat; // index 0x0
	RegenCost: long; // index 0x0
}

table CharacterStatLimitExcelTable {
	DataList: [CharacterStatLimitExcel]; // index 0x0
}

table CharacterStatLimitExcel {
	Id: long; // index 0x0
	TacticEntityType: TacticEntityType; // index 0x0
	StatType: StatType; // index 0x0
	StatMinValue: long; // index 0x0
	StatMaxValue: long; // index 0x0
	StatRatioMinValue: long; // index 0x0
	StatRatioMaxValue: long; // index 0x0
}

table CharacterStatsDetailExcelTable {
	DataList: [CharacterStatsDetailExcel]; // index 0x0
}

table CharacterStatsDetailExcel {
	Id: long; // index 0x0
	DetailShowStats: [StatType]; // index 0x0
	IsStatsPercent: [bool]; // index 0x0
}

table CharacterStatsTransExcelTable {
	DataList: [CharacterStatsTransExcel]; // index 0x0
}

table CharacterStatsTransExcel {
	TransSupportStats: StatType; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
	TransSupportStatsFactor: int; // index 0x0
	StatTransType: StatTransType; // index 0x0
}

table CharacterTranscendenceExcelTable {
	DataList: [CharacterTranscendenceExcel]; // index 0x0
}

table CharacterTranscendenceExcel {
	CharacterId: long; // index 0x0
	MaxFavorLevel: [int]; // index 0x0
	statBonusRateAttack: [long]; // index 0x0
	statBonusRateHP: [long]; // index 0x0
	StatBonusRateHeal: [long]; // index 0x0
	RecipeId: [long]; // index 0x0
	SkillSlotA: [string]; // index 0x0
	skillSlotB: [string]; // index 0x0
	skillSlotC: [string]; // index 0x0
	maxlevelStar: [int]; // index 0x0
}

table CharacterVictoryInteractionExcelTable {
	DataList: [CharacterVictoryInteractionExcel]; // index 0x0
}

table CharacterVictoryInteractionExcel {
	InteractionId: long; // index 0x0
	CostumeId01: long; // index 0x0
	PositionIndex01: int; // index 0x0
	VictoryStartAnimationPath01: string; // index 0x0
	VictoryEndAnimationPath01: string; // index 0x0
	VoiceEvent01: VoiceEvent; // index 0x0
	CostumeId02: long; // index 0x0
	PositionIndex02: int; // index 0x0
	VictoryStartAnimationPath02: string; // index 0x0
	VictoryEndAnimationPath02: string; // index 0x0
	VoiceEvent02: VoiceEvent; // index 0x0
	CostumeId03: long; // index 0x0
	PositionIndex03: int; // index 0x0
	VictoryStartAnimationPath03: string; // index 0x0
	VictoryEndAnimationPath03: string; // index 0x0
	VoiceEvent03: VoiceEvent; // index 0x0
	CostumeId04: long; // index 0x0
	PositionIndex04: int; // index 0x0
	VictoryStartAnimationPath04: string; // index 0x0
	VictoryEndAnimationPath04: string; // index 0x0
	VoiceEvent04: VoiceEvent; // index 0x0
	CostumeId05: long; // index 0x0
	PositionIndex05: int; // index 0x0
	VictoryStartAnimationPath05: string; // index 0x0
	VictoryEndAnimationPath05: string; // index 0x0
	VoiceEvent05: VoiceEvent; // index 0x0
	CostumeId06: long; // index 0x0
	PositionIndex06: int; // index 0x0
	VictoryStartAnimationPath06: string; // index 0x0
	VictoryEndAnimationPath06: string; // index 0x0
	VoiceEvent06: VoiceEvent; // index 0x0
}

table CharacterWeaponExcelTable {
	DataList: [CharacterWeaponExcel]; // index 0x0
}

table CharacterWeaponExcel {
	Id: long; // index 0x0
	ImagePath: string; // index 0x0
	SetRecipe: long; // index 0x0
	StatLevelUpType: StatLevelUpType; // index 0x0
	AttackPower: long; // index 0x0
	AttackPower100: long; // index 0x0
	MaxHP: long; // index 0x0
	MaxHP100: long; // index 0x0
	HealPower: long; // index 0x0
	HealPower100: long; // index 0x0
	tags: [Tag]; // index 0x0
	Unlock: [bool]; // index 0x0
	RecipeId: [long]; // index 0x0
	MaxLevel: [int]; // index 0x0
	learnSkillSlot: [string]; // index 0x0
	statType: [EquipmentOptionType]; // index 0x0
	statValue: [long]; // index 0x0
}

table CharacterWeaponExpBonusExcelTable {
	DataList: [CharacterWeaponExpBonusExcel]; // index 0x0
}

table CharacterWeaponExpBonusExcel {
	WeaponType: WeaponType; // index 0x0
	WeaponExpGrowthA: int; // index 0x0
	WeaponExpGrowthB: int; // index 0x0
	WeaponExpGrowthC: int; // index 0x0
	WeaponExpGrowthZ: int; // index 0x0
}

table CharacterWeaponLevelExcelTable {
	DataList: [CharacterWeaponLevelExcel]; // index 0x0
}

table CharacterWeaponLevelExcel {
	Level: int; // index 0x0
	Exp: long; // index 0x0
	TotalExp: long; // index 0x0
}

table CheatCodeListExcelTable {
	DataList: [CheatCodeListExcel]; // index 0x0
}

table CheatCodeListExcel {
	Id: long; // index 0x0
	cheatCode: [string]; // index 0x0
	InputTitle: [string]; // index 0x0
	Desc: string; // index 0x0
}

table ClearDeckRuleExcelTable {
	DataList: [ClearDeckRuleExcel]; // index 0x0
}

table ClearDeckRuleExcel {
	ContentType: ContentType; // index 0x0
	SizeLimit: long; // index 0x0
}

table ConquestCalculateExcelTable {
	DataList: [ConquestCalculateExcel]; // index 0x0
}

table ConquestCalculateExcel {
	EventContentId: long; // index 0x0
	CalculateConditionParcelType: ParcelType; // index 0x0
	CalculateConditionParcelUniqueId: long; // index 0x0
	CalculateConditionParcelAmount: long; // index 0x0
}

table ConquestCameraSettingExcelTable {
	DataList: [ConquestCameraSettingExcel]; // index 0x0
}

table ConquestCameraSettingExcel {
	Id: long; // index 0x0
	ConquestMapBoundaryOffsetLeft: float; // index 0x0
	ConquestMapBoundaryOffsetRight: float; // index 0x0
	ConquestMapBoundaryOffsetTop: float; // index 0x0
	ConquestMapBoundaryOffsetBottom: float; // index 0x0
	ConquestMapCenterOffsetX: float; // index 0x0
	ConquestMapCenterOffsetY: float; // index 0x0
	CameraAngle: float; // index 0x0
	CameraZoomMax: float; // index 0x0
	CameraZoomMin: float; // index 0x0
	CameraZoomDefault: float; // index 0x0
}

table ConquestErosionExcelTable {
	DataList: [ConquestErosionExcel]; // index 0x0
}

table ConquestErosionExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	ErosionType: ConquestErosionType; // index 0x0
	Phase: int; // index 0x0
	PhaseAlarm: bool; // index 0x0
	StepIndex: int; // index 0x0
	PhaseStartConditionType: [ConquestConditionType]; // index 0x0
	PhaseStartConditionParameter: [string]; // index 0x0
	PhaseBeforeExposeConditionType: [ConquestConditionType]; // index 0x0
	phaseBeforeExposeConditionParameter: [string]; // index 0x0
	ErosionBattleConditionParcelType: ParcelType; // index 0x0
	ErosionBattleConditionParcelUniqueId: long; // index 0x0
	ErosionBattleConditionParcelAmount: long; // index 0x0
	ConquestRewardId: long; // index 0x0
}

table ConquestErosionUnitExcelTable {
	DataList: [ConquestErosionUnitExcel]; // index 0x0
}

table ConquestErosionUnitExcel {
	TilePrefabId: long; // index 0x0
	MassErosionUnitId: long; // index 0x0
	MassErosionUnitRotationY: float; // index 0x0
	IndividualErosionUnitId: long; // index 0x0
	IndividualErosionUnitRotationY: float; // index 0x0
}

table ConquestEventExcelTable {
	DataList: [ConquestEventExcel]; // index 0x0
}

table ConquestEventExcel {
	EventContentId: long; // index 0x0
	MainStoryEventContentId: long; // index 0x0
	ConquestEventType: ConquestEventType; // index 0x0
	UseErosion: bool; // index 0x0
	UseUnexpectedEvent: bool; // index 0x0
	UseCalculate: bool; // index 0x0
	UseConquestObject: bool; // index 0x0
	EvnetMapGoalLocalize: string; // index 0x0
	EvnetMapNameLocalize: string; // index 0x0
	MapEnterScenarioGroupId: long; // index 0x0
	EvnetScenarioBG: string; // index 0x0
	ManageUnitChange: int; // index 0x0
	AssistCount: int; // index 0x0
	PlayTimeLimitInSeconds: int; // index 0x0
	AnimationUnitAmountMin: int; // index 0x0
	AnimationUnitAmountMax: int; // index 0x0
	AnimationUnitDelay: float; // index 0x0
	LocalizeUnexpected: string; // index 0x0
	LocalizeErosions: string; // index 0x0
	LocalizeStep: string; // index 0x0
	LocalizeTile: string; // index 0x0
	LocalizeMapInfo: string; // index 0x0
	LocalizeManage: string; // index 0x0
	LocalizeUpgrade: string; // index 0x0
	LocalizeTreasureBox: string; // index 0x0
	IndividualErosionDailyCount: long; // index 0x0
}

table ConquestGroupBonusExcelTable {
	DataList: [ConquestGroupBonusExcel]; // index 0x0
}

table ConquestGroupBonusExcel {
	ConquestBonusId: long; // index 0x0
	school: [School]; // index 0x0
	RecommandLocalizeEtcId: uint; // index 0x0
	BonusParcelType: [ParcelType]; // index 0x0
	bonusId: [long]; // index 0x0
	BonusCharacterCount1: [int]; // index 0x0
	BonusPercentage1: [long]; // index 0x0
	bonusCharacterCount2: [int]; // index 0x0
	bonusPercentage2: [long]; // index 0x0
	BonusCharacterCount3: [int]; // index 0x0
	bonusPercentage3: [long]; // index 0x0
}

table ConquestGroupBuffExcelTable {
	DataList: [ConquestGroupBuffExcel]; // index 0x0
}

table ConquestGroupBuffExcel {
	ConquestBuffId: long; // index 0x0
	school: [School]; // index 0x0
	RecommandLocalizeEtcId: uint; // index 0x0
	SkillGroupId: string; // index 0x0
}

table ConquestMapExcelTable {
	DataList: [ConquestMapExcel]; // index 0x0
}

table ConquestMapExcel {
	EventContentId: long; // index 0x0
	DevName: string; // index 0x0
	MapDifficulty: StageDifficulty; // index 0x0
	StepIndex: int; // index 0x0
	ConquestMap: string; // index 0x0
	StepEnterScenarioGroupId: long; // index 0x0
	stepOpenConditionType: [ConquestConditionType]; // index 0x0
	StepOpenConditionParameter: [string]; // index 0x0
	MapGoalLocalize: string; // index 0x0
	StepGoalLocalize: string; // index 0x0
	StepNameLocalize: string; // index 0x0
	ConquestMapBG: string; // index 0x0
	CameraSettingId: long; // index 0x0
}

table ConquestObjectExcelTable {
	DataList: [ConquestObjectExcel]; // index 0x0
}

table ConquestObjectExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	ConquestObjectType: ConquestObjectType; // index 0x0
	Key: uint; // index 0x0
	Name: string; // index 0x0
	PrefabName: string; // index 0x0
	ConquestRewardParcelType: ParcelType; // index 0x0
	ConquestRewardID: long; // index 0x0
	ConquestRewardAmount: int; // index 0x0
	Disposable: bool; // index 0x0
	StepIndex: int; // index 0x0
	StepObjectCount: int; // index 0x0
}

table ConquestPlayGuideExcelTable {
	DataList: [ConquestPlayGuideExcel]; // index 0x0
}

table ConquestPlayGuideExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	DisplayOrder: int; // index 0x0
	GuideTitle: string; // index 0x0
	GuideImagePath: string; // index 0x0
	GuideText: string; // index 0x0
}

table ConquestProgressResourceExcelTable {
	DataList: [ConquestProgressResourceExcel]; // index 0x0
}

table ConquestProgressResourceExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	Group: ConquestProgressType; // index 0x0
	ProgressResource: string; // index 0x0
	voiceId: [uint]; // index 0x0
	ProgressLocalizeCode: string; // index 0x0
}

table ConquestRewardExcelTable {
	DataList: [ConquestRewardExcel]; // index 0x0
}

table ConquestRewardExcel {
	GroupId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table ConquestStepExcelTable {
	DataList: [ConquestStepExcel]; // index 0x0
}

table ConquestStepExcel {
	EventContentId: long; // index 0x0
	MapDifficulty: StageDifficulty; // index 0x0
	Step: int; // index 0x0
	StepGoalLocalize: string; // index 0x0
	StepEnterScenarioGroupId: long; // index 0x0
	StepEnterItemType: ParcelType; // index 0x0
	StepEnterItemUniqueId: long; // index 0x0
	StepEnterItemAmount: long; // index 0x0
	unexpectedEventUnitId: [long]; // index 0x0
	UnexpectedEventPrefab: string; // index 0x0
	TreasureBoxObjectId: long; // index 0x0
	TreasureBoxCountPerStepOpen: int; // index 0x0
}

table ConquestTileExcelTable {
	DataList: [ConquestTileExcel]; // index 0x0
}

table ConquestTileExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	EventId: long; // index 0x0
	Step: int; // index 0x0
	PrefabName: string; // index 0x0
	TileNameLocalize: string; // index 0x0
	TileImageName: string; // index 0x0
	Playable: bool; // index 0x0
	TileType: ConquestTileType; // index 0x0
	NotMapFog: bool; // index 0x0
	GroupBonusId: long; // index 0x0
	ConquestCostType: ParcelType; // index 0x0
	ConquestCostId: long; // index 0x0
	ConquestCostAmount: int; // index 0x0
	ManageCostType: ParcelType; // index 0x0
	ManageCostId: long; // index 0x0
	ManageCostAmount: int; // index 0x0
	ConquestRewardId: long; // index 0x0
	MassErosionId: long; // index 0x0
	Upgrade2CostType: ParcelType; // index 0x0
	Upgrade2CostId: long; // index 0x0
	Upgrade2CostAmount: int; // index 0x0
	Upgrade3CostType: ParcelType; // index 0x0
	Upgrade3CostId: long; // index 0x0
	Upgrade3CostAmount: int; // index 0x0
}

table ConquestUnexpectedEventExcelTable {
	DataList: [ConquestUnexpectedEventExcel]; // index 0x0
}

table ConquestUnexpectedEventExcel {
	EventContentId: long; // index 0x0
	UnexpectedEventConditionType: ParcelType; // index 0x0
	UnexpectedEventConditionUniqueId: long; // index 0x0
	UnexpectedEventConditionAmount: long; // index 0x0
	UnexpectedEventOccurDailyLimitCount: int; // index 0x0
	UnitCountPerStep: int; // index 0x0
	unexpectedEventPrefab: [string]; // index 0x0
	UnexpectedEventUnitId: [long]; // index 0x0
}

table ConquestUnitExcelTable {
	DataList: [ConquestUnitExcel]; // index 0x0
}

table ConquestUnitExcel {
	Id: long; // index 0x0
	Key: uint; // index 0x0
	Name: string; // index 0x0
	PrefabName: string; // index 0x0
	StrategyPrefabName: string; // index 0x0
	Scale: float; // index 0x0
	ShieldEffectScale: float; // index 0x0
	UnitFxPrefabName: string; // index 0x0
	PointAnimation: string; // index 0x0
	EnemyType: ConquestEnemyType; // index 0x0
	Team: ConquestTeamType; // index 0x0
	UnitGroup: long; // index 0x0
	PrevUnitGroup: long; // index 0x0
	BattleDuration: long; // index 0x0
	GroundId: long; // index 0x0
	StarGoal: [StarGoalType]; // index 0x0
	starGoalAmount: [int]; // index 0x0
	GroupBuffId: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	ManageEchelonStageEnterCostType: ParcelType; // index 0x0
	ManageEchelonStageEnterCostId: long; // index 0x0
	ManageEchelonStageEnterCostAmount: int; // index 0x0
	EnterScenarioGroupId: long; // index 0x0
	ClearScenarioGroupId: long; // index 0x0
	ConquestRewardId: long; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	TacticRewardExp: long; // index 0x0
	FixedEchelonId: long; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table ConstArenaExcelTable {
	DataList: [ConstArenaExcel]; // index 0x0
}

table ConstArenaExcel {
	AttackCoolTime: long; // index 0x0
	BattleDuration: long; // index 0x0
	DefenseCoolTime: long; // index 0x0
	TSSStartCoolTime: long; // index 0x0
	EndAlarm: long; // index 0x0
	TimeRewardMaxAmount: long; // index 0x0
	EnterCostType: ParcelType; // index 0x0
	EnterCostId: long; // index 0x0
	TicketCost: long; // index 0x0
	DailyRewardResetTime: string; // index 0x0
	OpenScenarioId: string; // index 0x0
	characterSlotHideRank: [long]; // index 0x0
	MapSlotHideRank: long; // index 0x0
	RelativeOpponentRankStart: [long]; // index 0x0
	RelativeOpponentRankEnd: [long]; // index 0x0
	ModifiedStatType: [StatType]; // index 0x0
	statMulFactor: [long]; // index 0x0
	StatSumFactor: [long]; // index 0x0
	NPCName: [string]; // index 0x0
	NPCMainCharacterCount: long; // index 0x0
	NPCSupportCharacterCount: long; // index 0x0
	NPCCharacterSkillLevel: long; // index 0x0
	TimeSpanInDaysForBattleHistory: long; // index 0x0
	HiddenCharacterImagePath: string; // index 0x0
	DefenseVictoryRewardMaxCount: long; // index 0x0
	TopRankerCountLimit: long; // index 0x0
	AutoRefreshIntervalMilliSeconds: long; // index 0x0
	EchelonSettingIntervalMilliSeconds: long; // index 0x0
	SkipAllowedTimeMilliSeconds: long; // index 0x0
	ShowSeasonChangeInfoStartTime: string; // index 0x0
	ShowSeasonChangeInfoEndTime: string; // index 0x0
	ShowSeasonId: long; // index 0x0
	ArenaHistoryQueryLimitDays: int; // index 0x0
}

table ConstAudioExcelTable {
	DataList: [ConstAudioExcel]; // index 0x0
}

table ConstAudioExcel {
	DefaultSnapShotName: string; // index 0x0
	BattleSnapShotName: string; // index 0x0
	RaidSnapShotName: string; // index 0x0
	ExSkillCutInSnapShotName: string; // index 0x0
}

table ConstCombatExcelTable {
	DataList: [ConstCombatExcel]; // index 0x0
}

table ConstCombatExcel {
	SkillHandCount: int; // index 0x0
	DyingTime: int; // index 0x0
	BuffIconBlinkTime: int; // index 0x0
	ShowBufficonEXSkill: bool; // index 0x0
	ShowBufficonPassiveSkill: bool; // index 0x0
	ShowBufficonExtraPassiveSkill: bool; // index 0x0
	ShowBufficonLeaderSkill: bool; // index 0x0
	ShowBufficonGroundPassiveSkill: bool; // index 0x0
	SuppliesConditionStringId: string; // index 0x0
	PublicSpeechBubbleOffsetX: float; // index 0x0
	PublicSpeechBubbleOffsetY: float; // index 0x0
	PublicSpeechBubbleOffsetZ: float; // index 0x0
	ShowRaidListCount: int; // index 0x0
	MaxRaidTicketCount: long; // index 0x0
	MaxRaidBossSkillSlot: long; // index 0x0
	EngageTimelinePath: string; // index 0x0
	EngageWithSupporterTimelinePath: string; // index 0x0
	VictoryTimelinePath: string; // index 0x0
	TimeLimitAlarm: long; // index 0x0
	EchelonMaxCommonCost: int; // index 0x0
	EchelonInitCommonCost: int; // index 0x0
	SkillSlotCoolTime: long; // index 0x0
	EnemyRegenCost: long; // index 0x0
	ChampionRegenCost: long; // index 0x0
	PlayerRegenCostDelay: long; // index 0x0
	CrowdControlFactor: long; // index 0x0
	RaidOpenScenarioId: string; // index 0x0
	EliminateRaidOpenScenarioId: string; // index 0x0
	DefenceConstA: long; // index 0x0
	DefenceConstB: long; // index 0x0
	DefenceConstC: long; // index 0x0
	DefenceConstD: long; // index 0x0
	AccuracyConstA: long; // index 0x0
	AccuracyConstB: long; // index 0x0
	AccuracyConstC: long; // index 0x0
	AccuracyConstD: long; // index 0x0
	CriticalConstA: long; // index 0x0
	CriticalConstB: long; // index 0x0
	CriticalConstC: long; // index 0x0
	CriticalConstD: long; // index 0x0
	MaxGroupBuffLevel: int; // index 0x0
	EmojiDefaultTime: int; // index 0x0
	TimeLineActionRotateSpeed: long; // index 0x0
	BodyRotateSpeed: long; // index 0x0
	NormalTimeScale: long; // index 0x0
	FastTimeScale: long; // index 0x0
	BulletTimeScale: long; // index 0x0
	UIDisplayDelayAfterSkillCutIn: long; // index 0x0
	UseInitialRangeForCoverMove: bool; // index 0x0
	SlowTimeScale: long; // index 0x0
	AimIKMinDegree: float; // index 0x0
	AimIKMaxDegree: float; // index 0x0
	MinimumClearTime: int; // index 0x0
	MinimumClearLevelGap: int; // index 0x0
	CheckCheaterMaxUseCostNonArena: int; // index 0x0
	CheckCheaterMaxUseCostArena: int; // index 0x0
	AllowedMaxTimeScale: long; // index 0x0
	RandomAnimationOutput: long; // index 0x0
	SummonedTeleportDistance: long; // index 0x0
	ArenaMinimumClearTime: int; // index 0x0
	WORLDBOSSBATTLELITTLE: long; // index 0x0
	WORLDBOSSBATTLELITTLETw: long; // index 0x0
	WORLDBOSSBATTLELITTLEAsia: long; // index 0x0
	WORLDBOSSBATTLELITTLENa: long; // index 0x0
	WORLDBOSSBATTLELITTLEGlobal: long; // index 0x0
	WORLDBOSSBATTLEMIDDLE: long; // index 0x0
	WORLDBOSSBATTLEMIDDLETw: long; // index 0x0
	WORLDBOSSBATTLEMIDDLEAsia: long; // index 0x0
	WORLDBOSSBATTLEMIDDLENa: long; // index 0x0
	WORLDBOSSBATTLEMIDDLEGlobal: long; // index 0x0
	WORLDBOSSBATTLEHIGH: long; // index 0x0
	WORLDBOSSBATTLEHIGHTw: long; // index 0x0
	WORLDBOSSBATTLEHIGHAsia: long; // index 0x0
	WORLDBOSSBATTLEHIGHNa: long; // index 0x0
	WORLDBOSSBATTLEHIGHGlobal: long; // index 0x0
	WORLDBOSSBATTLEVERYHIGH: long; // index 0x0
	WORLDBOSSBATTLEVERYHIGHTw: long; // index 0x0
	WORLDBOSSBATTLEVERYHIGHAsia: long; // index 0x0
	WORLDBOSSBATTLEVERYHIGHNa: long; // index 0x0
	WORLDBOSSBATTLEVERYHIGHGlobal: long; // index 0x0
	WorldRaidAutoSyncTermSecond: long; // index 0x0
	WorldRaidBossHpDecreaseTerm: long; // index 0x0
	WorldRaidBossParcelReactionDelay: long; // index 0x0
	RaidRankingJumpMinimumWaitingTime: long; // index 0x0
	EffectTeleportDistance: float; // index 0x0
	AuraExitThresholdMargin: long; // index 0x0
	TSAInteractionDamageFactor: long; // index 0x0
	VictoryInteractionRate: long; // index 0x0
	EchelonExtensionEngageTimelinePath: string; // index 0x0
	EchelonExtensionEngageWithSupporterTimelinePath: string; // index 0x0
	EchelonExtensionVictoryTimelinePath: string; // index 0x0
	EchelonExtensionEchelonMaxCommonCost: int; // index 0x0
	EchelonExtensionEchelonInitCommonCost: int; // index 0x0
	EchelonExtensionCostRegenRatio: long; // index 0x0
	CheckCheaterMaxUseCostMultiFloorRaid: int; // index 0x0
	ExcessiveTouchCheckTime: float; // index 0x0
	ExcessiveTouchCheckCount: int; // index 0x0
}

table ConstCommonExcelTable {
	DataList: [ConstCommonExcel]; // index 0x0
}

table ConstCommonExcel {
	ClearDeck1StarViewCount: int; // index 0x0
	CallnameLengthEn: int; // index 0x0
	MissionToastLifeTime: int; // index 0x0
	WorldRaidGemEnterAmout: long; // index 0x0
	ClearDeckWorldRaidSaveConditionCoefficient: int; // index 0x0
	WeekDungoenTacticPlayTimeLimitInSeconds: long; // index 0x0
	AssistStrangerMinLevel: int; // index 0x0
	CafeTravelSyncIntervalByMillisec: int; // index 0x0
	ClearDeck3StarViewCount: int; // index 0x0
	CallNameRenameCoolTimeFromHour: long; // index 0x0
	PotentialBonusStatMaxLevelAttackPower: int; // index 0x0
	BaseTimeScale: long; // index 0x0
	BirthdayMailStartDate: string; // index 0x0
	CharProfilePopupRowIntervalKr: int; // index 0x0
	AddEquipmentSlotOpenLevel: [int]; // index 0x0
	IdCardDefaultBgId: long; // index 0x0
	AddCommonFavorItemTags: [int]; // index 0x0
	LimitedStageEntryTimeLimit: long; // index 0x0
	FormationPresetEchelonSlotTextLengthKr: int; // index 0x0
	AccountExpRatio: int; // index 0x0
	PostExpiredDayAttendance: int; // index 0x0
	HardAdventurePlayCountRecoverDailyNumber: int; // index 0x0
	MonthlyProductCheckDays: int; // index 0x0
	DDosCheckIntervalInSeconds: int; // index 0x0
	DDosDetectCount: int; // index 0x0
	TutorialShopCategoryType: ShopCategoryType; // index 0x0
	CraftTicketConsumeAmount: int; // index 0x0
	WeekDungeonFindGiftRewardLimitCount: int; // index 0x0
	PotentialOpenConditionCharacterLevel: int; // index 0x0
	TimeAttackDungeonScenarioId: string; // index 0x0
	HardStageCount: int; // index 0x0
	FriendsSearchRequestCount: int; // index 0x0
	ShiftingCraftTicketConsumeAmount: int; // index 0x0
	FriendIdCardCommentMaxLength: long; // index 0x0
	RaidTacticPlayTimeLimitInSeconds: long; // index 0x0
	SupportSquadExpBonus: int; // index 0x0
	FormationPresetRecentNumberOfEchelon: int; // index 0x0
	LimitedStagePointPerApMax: long; // index 0x0
	ClanWordBalloonMaxCharacter: int; // index 0x0
	BirthdayMailParcelType: ParcelType; // index 0x0
	ShowRaidMyListCount: int; // index 0x0
	RenewalDisplayOrderDay: int; // index 0x0
	AccountCommentMaxLength: int; // index 0x0
	CafeMonologueDefaultDuration: long; // index 0x0
	CafeRandomVisitMinComfortBonus: long; // index 0x0
	ExpItemInsertLimit: int; // index 0x0
	ClanMaxApplicant: long; // index 0x0
	WeaponLvUpCoefficient: int; // index 0x0
	PrologueScenarioID02: long; // index 0x0
	AccountLinkReward: int; // index 0x0
	AssistStrangerMaxLevel: int; // index 0x0
	CraftOpenExpTier3: long; // index 0x0
	CraftLimitTime: int; // index 0x0
	MonthlyProductRepurchasePopupLimit: int; // index 0x0
	BeforehandGachaCount: int; // index 0x0
	GachaPercentage: int; // index 0x0
	PotentialBonusStatMaxLevelMaxHP: int; // index 0x0
	LimitedStagePointPerApMin: long; // index 0x0
	CafeSetGroupApplyCount: int; // index 0x0
	EnterDeposit: int; // index 0x0
	WorldRaidGemEnterCost: long; // index 0x0
	CraftLeafNodeGenerateLv2Count: int; // index 0x0
	MailStorageHardCap: int; // index 0x0
	EquipmentLvUpCoefficient: int; // index 0x0
	CharProfileRowIntervalKr: int; // index 0x0
	FormationPresetNumberOfEchelon: int; // index 0x0
	BirthdayMailRemainDate: int; // index 0x0
	MaxFriendsRequest: int; // index 0x0
	PostExpiredDayGameManager: int; // index 0x0
	ScenarioAutoDelayMillisec: float; // index 0x0
	CraftLeafNodeGenerateLv1Count: int; // index 0x0
	FindGiftTimeLimit: int; // index 0x0
	CraftTicketItemUniqueId: int; // index 0x0
	ClearDeck2StarViewCount: int; // index 0x0
	FormationPresetEchelonTabTextLengthKr: int; // index 0x0
	AccountMaxLevel: int; // index 0x0
	TacticRankClearTime: int; // index 0x0
	AddCraftDuration: [int]; // index 0x0
	AcademyTicketCost: int; // index 0x0
	NicknameLength: int; // index 0x0
	ClanChattingNoticeCautionDelay: float; // index 0x0
	CharProfilePopupRowIntervalJp: int; // index 0x0
	ExpItemInsertAccelTime: int; // index 0x0
	MaxFriendsCount: int; // index 0x0
	CafeRandomVisitMinLastLogin: int; // index 0x0
	IdCardDefaultCharacterId: long; // index 0x0
	ClanMaxMember: long; // index 0x0
	AddShiftingCraftDuration: [int]; // index 0x0
	UILabelCharacterWrap: string; // index 0x0
	ScreenshotToLobbyButtonHideDelay: long; // index 0x0
	ClanSearchResultCount: long; // index 0x0
	CallNameMinimumLength: long; // index 0x0
	StageFailedCurrencyRefundRate: int; // index 0x0
	RaidOpponentListAmount: long; // index 0x0
	CallNameWaitTimeGL: float; // index 0x0
	TimeAttackDungeonEnterCost: long; // index 0x0
	RaidEnterCostType: ParcelType; // index 0x0
	RaidTicketCost: long; // index 0x0
	AdventureStrategyPlayTimeLimitInSeconds: long; // index 0x0
	BeforehandGachaGroupId: int; // index 0x0
	PostExpiredDayInventoryOverflow: int; // index 0x0
	AcademyFavorZoneId: long; // index 0x0
	CharacterMaxLevel: int; // index 0x0
	ShiftingCraftSlotMaxCapacity: int; // index 0x0
	LimitedStagePointAmount: long; // index 0x0
	CafePresetSlotCount: int; // index 0x0
	MainSquadExpBonus: int; // index 0x0
	CafeProductionDecimalPosition: int; // index 0x0
	CafePresetEditNameLength: int; // index 0x0
	LowMemorySizeGL: long; // index 0x0
	MaxBlockedUserCount: int; // index 0x0
	AcademyEnterCostId: long; // index 0x0
	CharacterEquipmentGearSlot: long; // index 0x0
	TutorialGachaGoodsId: int; // index 0x0
	ClanLeaderTransferLastLoginLimit: long; // index 0x0
	AddCraftBaseGoldRequired: [int]; // index 0x0
	FormationPresetEchelonSlotTextLength: int; // index 0x0
	FormationPresetEchelonTabTextLength: int; // index 0x0
	PotentialBonusStatMaxLevelHealPower: int; // index 0x0
	CallnameLengthKr: int; // index 0x0
	CraftOpenExpTier1: long; // index 0x0
	EmblemDefaultId: long; // index 0x0
	PassiveSkillLevelMax: int; // index 0x0
	FormationPresetNumberOfEchelonTab: int; // index 0x0
	LobbyToScreenModeWaitTime: long; // index 0x0
	ClanRejoinCoolTimeFromSecond: long; // index 0x0
	RaidEnterCostId: long; // index 0x0
	TutorialGachaShopId: int; // index 0x0
	CafeSummonCoolTimeFromHour: int; // index 0x0
	ExSkillLevelMax: int; // index 0x0
	CafeAutoChargePeriodInMsc: int; // index 0x0
	EquipLvUpCoefficient: int; // index 0x0
	ClearDeckNoStarViewCount: int; // index 0x0
	TimeAttackDungeonEnterCostId: long; // index 0x0
	ClanNameLength: int; // index 0x0
	CampaignMainStageBestRecord: int; // index 0x0
	PublicSkillLevelMax: int; // index 0x0
	ExtraPassiveSkillLevelMax: int; // index 0x0
	MaxApMasterCoinPerWeek: long; // index 0x0
	LimitedStageEntryTimeBuffer: long; // index 0x0
	BirthDayDDay: int; // index 0x0
	CampaignMainStageMaxRank: int; // index 0x0
	TutorialHardStage11: long; // index 0x0
	CallNameMaximumLength: long; // index 0x0
	FriendsMaxApplicant: int; // index 0x0
	RequestTimeOut: float; // index 0x0
	TutorialCharacterDefaultCount: long; // index 0x0
	AcademyEnterCostType: ParcelType; // index 0x0
	JoinOrCreateClanCoolTimeFromHour: long; // index 0x0
	TimeAttackDungeonEnterCostType: ParcelType; // index 0x0
	NicknameLengthKr: int; // index 0x0
	CharProfileRowIntervalJp: int; // index 0x0
	ClearDeckStorageSize: int; // index 0x0
	MassangerMessageExpireDay: int; // index 0x0
	BirthdayMailParcelAmount: int; // index 0x0
	BirthdayMailParcelId: long; // index 0x0
	CafeBubbleIdleDurationMilliSec: long; // index 0x0
	ClearDeckShowCount: int; // index 0x0
	PrologueScenarioID01: long; // index 0x0
	ClearDeckAverageDeckCount: int; // index 0x0
	BeforehandGachaShopId: int; // index 0x0
	MailStorageSoftCap: int; // index 0x0
	ExpEquipInsertLimit: int; // index 0x0
	TutorialSpeedButtonStage: long; // index 0x0
	CharacterLvUpCoefficient: int; // index 0x0
	LimitedStageDailyClearCount: long; // index 0x0
	CafeMonologueIntervalMillisec: long; // index 0x0
	CraftOpenExpTier2: long; // index 0x0
	MaxLevelExpMasterCoinRatio: int; // index 0x0
	TimeAttackDungoenPlayCountPerTicket: int; // index 0x0
	RecommendedFriendsLvDifferenceLimit: int; // index 0x0
}

table ConstConquestExcelTable {
	DataList: [ConstConquestExcel]; // index 0x0
}

table ConstConquestExcel {
	ManageUnitChange: int; // index 0x0
	AssistCount: int; // index 0x0
	PlayTimeLimitInSeconds: int; // index 0x0
	AnimationUnitAmountMin: int; // index 0x0
	AnimationUnitAmountMax: int; // index 0x0
	AnimationUnitDelay: float; // index 0x0
}

table ConstEventCommonExcelTable {
	DataList: [ConstEventCommonExcel]; // index 0x0
}

table ConstEventCommonExcel {
	EventContentHardStageCount: int; // index 0x0
	EventStrategyPlayTimeLimitInSeconds: long; // index 0x0
	SubEventChangeLimitSeconds: long; // index 0x0
	SubEventInstantClear: bool; // index 0x0
	CardShopProbWeightCount: long; // index 0x0
	CardShopProbWeightRarity: Rarity; // index 0x0
	MeetupScenarioReplayResource: string; // index 0x0
	MeetupScenarioReplayTitleLocalize: string; // index 0x0
	SpecialOperactionCollectionGroupId: long; // index 0x0
	TreasureNormalVariationAmount: int; // index 0x0
	TreasureLoopVariationAmount: int; // index 0x0
	TreasureLimitVariationLoopCount: int; // index 0x0
	TreasureLimitVariationClearLoopCount: int; // index 0x0
	EventStoryReplayHideEventContentId: int; // index 0x0
}

table ConstFieldExcelTable {
	DataList: [ConstFieldExcel]; // index 0x0
}

table ConstFieldExcel {
	DialogSmoothTime: int; // index 0x0
	TalkDialogDurationDefault: int; // index 0x0
	ThinkDialogDurationDefault: int; // index 0x0
	IdleThinkDelayMin: int; // index 0x0
	IdleThinkDelayMax: int; // index 0x0
}

table ConstKeyMappingExcelTable {
	DataList: [ConstKeyMappingExcel]; // index 0x0
}

table ConstKeyMappingExcel {
	DragSensitivity: float; // index 0x0
	PcInformationGroupID: long; // index 0x0
	ScrollWheelFactor: float; // index 0x0
	RemoveKeycodeWord: string; // index 0x0
	TutorialDialogTouchKey: string; // index 0x0
}

table ConstMinigameRoadPuzzleExcelTable {
	DataList: [ConstMinigameRoadPuzzleExcel]; // index 0x0
}

table ConstMinigameRoadPuzzleExcel {
	RoadPuzzleMapBoundaryOffsetLeft: float; // index 0x0
	RoadPuzzleMapBoundaryOffsetRight: float; // index 0x0
	RoadPuzzleMapBoundaryOffsetTop: float; // index 0x0
	RoadPuzzleMapBoundaryOffsetBottom: float; // index 0x0
	RoadPuzzleMapCenterOffsetX: float; // index 0x0
	RoadPuzzleMapCenterOffsetY: float; // index 0x0
	CameraAngle: float; // index 0x0
	CameraZoomMax: float; // index 0x0
	CameraZoomMin: float; // index 0x0
	CameraZoomDefault: float; // index 0x0
	StageLoadingProgressTime: float; // index 0x0
	TileRotationDegree: int; // index 0x0
	StartStageIndex: int; // index 0x0
	LoopStageIndex: int; // index 0x0
}

table ConstMiniGameShootingExcelTable {
	DataList: [ConstMiniGameShootingExcel]; // index 0x0
}

table ConstMiniGameShootingExcel {
	NormalStageId: long; // index 0x0
	NormalSectionCount: int; // index 0x0
	HardStageId: long; // index 0x0
	HardSectionCount: int; // index 0x0
	FreeStageId: long; // index 0x0
	FreeSectionCount: int; // index 0x0
	playerCharacterId: [long]; // index 0x0
	HiddenPlayerCharacterId: long; // index 0x0
	CameraSmoothTime: float; // index 0x0
	SpawnEffectPath: string; // index 0x0
	WaitTimeAfterSpawn: float; // index 0x0
	FreeGearInterval: int; // index 0x0
}

table ConstMinigameTBGExcelTable {
	DataList: [ConstMinigameTBGExcel]; // index 0x0
}

table ConstMinigameTBGExcel {
	ConquestMapBoundaryOffsetLeft: float; // index 0x0
	ConquestMapBoundaryOffsetRight: float; // index 0x0
	ConquestMapBoundaryOffsetTop: float; // index 0x0
	ConquestMapBoundaryOffsetBottom: float; // index 0x0
	ConquestMapCenterOffsetX: float; // index 0x0
	ConquestMapCenterOffsetY: float; // index 0x0
	CameraAngle: float; // index 0x0
	CameraZoomMax: float; // index 0x0
	CameraZoomMin: float; // index 0x0
	CameraZoomDefault: float; // index 0x0
	ThemaLoadingProgressTime: float; // index 0x0
	MapAllyRotation: float; // index 0x0
	AniAllyBattleAttack: string; // index 0x0
	EffectAllyBattleAttack: string; // index 0x0
	EffectAllyBattleDamage: string; // index 0x0
	AniEnemyBattleAttack: string; // index 0x0
	EffectEnemyBattleAttack: string; // index 0x0
	EffectEnemyBattleDamage: string; // index 0x0
	EncounterAllyRotation: float; // index 0x0
	EncounterEnemyRotation: float; // index 0x0
	EncounterRewardReceiveIndex: int; // index 0x0
}

table ConstNewbieContentExcelTable {
	DataList: [ConstNewbieContentExcel]; // index 0x0
}

table ConstNewbieContentExcel {
	NewbieGachaReleaseDate: string; // index 0x0
	NewbieGachaCheckDays: int; // index 0x0
	NewbieGachaTokenGraceTime: int; // index 0x0
	NewbieAttendanceReleaseDate: string; // index 0x0
	NewbieAttendanceStartableEndDay: int; // index 0x0
	NewbieAttendanceEndDay: int; // index 0x0
}

table ConstStrategyExcelTable {
	DataList: [ConstStrategyExcel]; // index 0x0
}

table ConstStrategyExcel {
	HexaMapBoundaryOffset: float; // index 0x0
	HexaMapStartCameraOffset: float; // index 0x0
	CameraZoomMax: float; // index 0x0
	CameraZoomMin: float; // index 0x0
	CameraZoomDefault: float; // index 0x0
	HealCostType: CurrencyTypes; // index 0x0
	HealCostAmount: [long]; // index 0x0
	CanHealHpRate: int; // index 0x0
	PlayTimeLimitInSeconds: long; // index 0x0
	AdventureEchelonCount: int; // index 0x0
	RaidEchelonCount: int; // index 0x0
	DefaultEchelonCount: int; // index 0x0
	EventContentEchelonCount: int; // index 0x0
	TimeAttackDungeonEchelonCount: int; // index 0x0
	WorldRaidEchelonCount: int; // index 0x0
	TacticSkipClearTimeSeconds: int; // index 0x0
	TacticSkipFramePerSecond: int; // index 0x0
	ConquestEchelonCount: int; // index 0x0
	StoryEchelonCount: int; // index 0x0
	MultiSweepPresetCount: int; // index 0x0
	MultiSweepPresetNameMaxLength: int; // index 0x0
	MultiSweepPresetNameMaxLengthKr: int; // index 0x0
	MultiSweepPresetSelectStageMaxCount: int; // index 0x0
	MultiSweepPresetMaxSweepCount: int; // index 0x0
	MultiSweepPresetSelectParcelMaxCount: int; // index 0x0
}

table ContentsFeverExcelTable {
	DataList: [ContentsFeverExcel]; // index 0x0
}

table ContentsFeverExcel {
	ConditionContent: FeverBattleType; // index 0x0
	SkillFeverCheckCondition: SkillPriorityCheckTarget; // index 0x0
	SkillCostFever: long; // index 0x0
	FeverStartTime: long; // index 0x0
	FeverDurationTime: long; // index 0x0
}

table CostumeExcelTable {
	DataList: [CostumeExcel]; // index 0x0
}

table CostumeExcel {
	CostumeGroupId: long; // index 0x0
	CostumeUniqueId: long; // index 0x0
	DevName: string; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	IsDefault: bool; // index 0x0
	CollectionVisible: bool; // index 0x0
	ReleaseDate: string; // index 0x0
	CollectionVisibleStartDate: string; // index 0x0
	CollectionVisibleEndDate: string; // index 0x0
	Rarity: Rarity; // index 0x0
	CharacterSkillListGroupId: long; // index 0x0
	SpineResourceName: string; // index 0x0
	SpineResourceNameDiorama: string; // index 0x0
	SpineResourceNameDioramaForFormConversion: [string]; // index 0x0
	EntityMaterialType: EntityMaterialType; // index 0x0
	ModelPrefabName: string; // index 0x0
	CafeModelPrefabName: string; // index 0x0
	EchelonModelPrefabName: string; // index 0x0
	StrategyModelPrefabName: string; // index 0x0
	TextureDir: string; // index 0x0
	CollectionTexturePath: string; // index 0x0
	CollectionBGTexturePath: string; // index 0x0
	CombatStyleTexturePath: string; // index 0x0
	UseObjectHPBAR: bool; // index 0x0
	TextureBoss: string; // index 0x0
	textureSkillCard: [string]; // index 0x0
	InformationPacel: string; // index 0x0
	AnimationSSR: string; // index 0x0
	EnterStrategyAnimationName: string; // index 0x0
	AnimationValidator: bool; // index 0x0
	CharacterVoiceGroupId: long; // index 0x0
	ShowObjectHpStatus: bool; // index 0x0
}

table CouponStuffExcelTable {
	DataList: [CouponStuffExcel]; // index 0x0
}

table CouponStuffExcel {
	StuffId: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	ParcelId: long; // index 0x0
	LimitAmount: int; // index 0x0
	CouponStuffNameLocalizeKey: string; // index 0x0
}

table CumulativeTimeRewardExcelTable {
	DataList: [CumulativeTimeRewardExcel]; // index 0x0
}

table CumulativeTimeRewardExcel {
	Id: long; // index 0x0
	Description: string; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	TimeCondition: [long]; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	RewardId: [long]; // index 0x0
	RewardAmount: [int]; // index 0x0
}

table DefaultCharacterExcelTable {
	DataList: [DefaultCharacterExcel]; // index 0x0
}

table DefaultCharacterExcel {
	CharacterId: long; // index 0x0
	FavoriteCharacter: bool; // index 0x0
	Level: int; // index 0x0
	Exp: int; // index 0x0
	FavorExp: int; // index 0x0
	FavorRank: int; // index 0x0
	StarGrade: int; // index 0x0
	ExSkillLevel: int; // index 0x0
	PassiveSkillLevel: int; // index 0x0
	ExtraPassiveSkillLevel: int; // index 0x0
	CommonSkillLevel: int; // index 0x0
	LeaderSkillLevel: int; // index 0x0
}

table DefaultEchelonExcelTable {
	DataList: [DefaultEchelonExcel]; // index 0x0
}

table DefaultEchelonExcel {
	EchlonId: int; // index 0x0
	LeaderId: long; // index 0x0
	MainId: [long]; // index 0x0
	SupportId: [long]; // index 0x0
	TssId: long; // index 0x0
}

table DefaultFurnitureExcelTable {
	DataList: [DefaultFurnitureExcel]; // index 0x0
}

table DefaultFurnitureExcel {
	Id: long; // index 0x0
	Location: FurnitureLocation; // index 0x0
	PositionX: float; // index 0x0
	PositionY: float; // index 0x0
	Rotation: float; // index 0x0
}

table DefaultMailExcelTable {
	DataList: [DefaultMailExcel]; // index 0x0
}

table DefaultMailExcel {
	Id: long; // index 0x0
	LocalizeCodeId: uint; // index 0x0
	MailType: MailType; // index 0x0
	MailSendPeriodFrom: string; // index 0x0
	MailSendPeriodTo: string; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	rewardParcelAmount: [long]; // index 0x0
}

table DefaultParcelExcelTable {
	DataList: [DefaultParcelExcel]; // index 0x0
}

table DefaultParcelExcel {
	ParcelType: ParcelType; // index 0x0
	ParcelId: long; // index 0x0
	ParcelAmount: long; // index 0x0
}

table DuplicateBonusExcelTable {
	DataList: [DuplicateBonusExcel]; // index 0x0
}

table DuplicateBonusExcel {
	Id: long; // index 0x0
	ItemCategory: ItemCategory; // index 0x0
	ItemId: long; // index 0x0
	CharacterId: long; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
}

table EchelonConstraintExcelTable {
	DataList: [EchelonConstraintExcel]; // index 0x0
}

table EchelonConstraintExcel {
	GroupId: long; // index 0x0
	IsWhiteList: bool; // index 0x0
	characterId: [long]; // index 0x0
	PersonalityId: [long]; // index 0x0
	WeaponType: WeaponType; // index 0x0
	School: School; // index 0x0
	Club: Club; // index 0x0
	Role: TacticRole; // index 0x0
}

table EliminateRaidRankingRewardExcelTable {
	DataList: [EliminateRaidRankingRewardExcel]; // index 0x0
}

table EliminateRaidRankingRewardExcel {
	RankingRewardGroupId: long; // index 0x0
	Id: long; // index 0x0
	RankStart: long; // index 0x0
	RankEnd: long; // index 0x0
	RankStartTw: long; // index 0x0
	RankEndTw: long; // index 0x0
	RankStartAsia: long; // index 0x0
	RankEndAsia: long; // index 0x0
	RankStartNa: long; // index 0x0
	RankEndNa: long; // index 0x0
	RankStartGlobal: long; // index 0x0
	RankEndGlobal: long; // index 0x0
	PercentRankStart: long; // index 0x0
	PercentRankEnd: long; // index 0x0
	Tier: int; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardParcelUniqueId: [long]; // index 0x0
	RewardParcelUniqueName: [string]; // index 0x0
	rewardParcelAmount: [long]; // index 0x0
}

table EliminateRaidSeasonManageExcelTable {
	DataList: [EliminateRaidSeasonManageExcel]; // index 0x0
}

table EliminateRaidSeasonManageExcel {
	SeasonId: long; // index 0x0
	SeasonDisplay: long; // index 0x0
	SeasonStartData: string; // index 0x0
	EndNoteLabelStartDate: string; // index 0x0
	SeasonEndData: string; // index 0x0
	SettlementEndDate: string; // index 0x0
	LobbyTableBGPath: string; // index 0x0
	LobbyScreenBGPath: string; // index 0x0
	OpenRaidBossGroup01: string; // index 0x0
	OpenRaidBossGroup02: string; // index 0x0
	OpenRaidBossGroup03: string; // index 0x0
	RankingRewardGroupId: long; // index 0x0
	MaxSeasonRewardGauage: int; // index 0x0
	StackedSeasonRewardGauge: [long]; // index 0x0
	SeasonRewardId: [long]; // index 0x0
	LimitedRewardIdNormal: long; // index 0x0
	LimitedRewardIdHard: long; // index 0x0
	LimitedRewardIdVeryhard: long; // index 0x0
	LimitedRewardIdHardcore: long; // index 0x0
	LimitedRewardIdExtreme: long; // index 0x0
	LimitedRewardIdInsane: long; // index 0x0
	LimitedRewardIdTorment: long; // index 0x0
}

table EliminateRaidStageExcelTable {
	DataList: [EliminateRaidStageExcel]; // index 0x0
}

table EliminateRaidStageExcel {
	Id: long; // index 0x0
	UseBossIndex: bool; // index 0x0
	UseBossAIPhaseSync: bool; // index 0x0
	RaidBossGroup: string; // index 0x0
	RaidEnterCostType: ParcelType; // index 0x0
	RaidEnterCostId: long; // index 0x0
	RaidEnterCostAmount: int; // index 0x0
	BossSpinePath: string; // index 0x0
	PortraitPath: string; // index 0x0
	BGPath: string; // index 0x0
	RaidCharacterId: long; // index 0x0
	bossCharacterId: [long]; // index 0x0
	Difficulty: Difficulty; // index 0x0
	IsOpen: bool; // index 0x0
	MaxPlayerCount: long; // index 0x0
	RaidRoomLifeTime: int; // index 0x0
	BattleDuration: long; // index 0x0
	GroundId: long; // index 0x0
	GroundDevName: string; // index 0x0
	EnterTimeLine: string; // index 0x0
	TacticEnvironment: TacticEnvironment; // index 0x0
	DefaultClearScore: long; // index 0x0
	MaximumScore: long; // index 0x0
	PerSecondMinusScore: long; // index 0x0
	HPPercentScore: long; // index 0x0
	MinimumAcquisitionScore: long; // index 0x0
	MaximumAcquisitionScore: long; // index 0x0
	RaidRewardGroupId: long; // index 0x0
	battleReadyTimelinePath: [string]; // index 0x0
	BattleReadyTimelinePhaseStart: [int]; // index 0x0
	battleReadyTimelinePhaseEnd: [int]; // index 0x0
	VictoryTimelinePath: string; // index 0x0
	PhaseChangeTimelinePath: string; // index 0x0
	TimeLinePhase: long; // index 0x0
	EnterScenarioKey: uint; // index 0x0
	ClearScenarioKey: uint; // index 0x0
	ShowSkillCard: bool; // index 0x0
	BossBGInfoKey: uint; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table EliminateRaidStageLimitedRewardExcelTable {
	DataList: [EliminateRaidStageLimitedRewardExcel]; // index 0x0
}

table EliminateRaidStageLimitedRewardExcel {
	LimitedRewardId: long; // index 0x0
	limitedRewardParcelType: [ParcelType]; // index 0x0
	limitedRewardParcelUniqueId: [long]; // index 0x0
	LimitedRewardAmount: [long]; // index 0x0
}

table EliminateRaidStageRewardExcelTable {
	DataList: [EliminateRaidStageRewardExcel]; // index 0x0
}

table EliminateRaidStageRewardExcel {
	GroupId: long; // index 0x0
	IsClearStageRewardHideInfo: bool; // index 0x0
	ClearStageRewardProb: long; // index 0x0
	ClearStageRewardParcelType: ParcelType; // index 0x0
	ClearStageRewardParcelUniqueID: long; // index 0x0
	ClearStageRewardParcelUniqueName: string; // index 0x0
	ClearStageRewardAmount: long; // index 0x0
}

table EliminateRaidStageSeasonRewardExcelTable {
	DataList: [EliminateRaidStageSeasonRewardExcel]; // index 0x0
}

table EliminateRaidStageSeasonRewardExcel {
	SeasonRewardId: long; // index 0x0
	seasonRewardParcelType: [ParcelType]; // index 0x0
	seasonRewardParcelUniqueId: [long]; // index 0x0
	seasonRewardParcelUniqueName: [string]; // index 0x0
	seasonRewardAmount: [long]; // index 0x0
}

table EmoticonSpecialExcelTable {
	DataList: [EmoticonSpecialExcel]; // index 0x0
}

table EmoticonSpecialExcel {
	UniqueId: long; // index 0x0
	CharacterUniqueId: long; // index 0x0
	Random: string; // index 0x0
}

table EquipmentExcelTable {
	DataList: [EquipmentExcel]; // index 0x0
}

table EquipmentExcel {
	Id: long; // index 0x0
	EquipmentCategory: EquipmentCategory; // index 0x0
	Rarity: Rarity; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	Wear: bool; // index 0x0
	MaxLevel: int; // index 0x0
	RecipeId: int; // index 0x0
	TierInit: long; // index 0x0
	NextTierEquipment: long; // index 0x0
	StackableMax: int; // index 0x0
	Icon: string; // index 0x0
	ImageName: string; // index 0x0
	tags: [Tag]; // index 0x0
	CraftQualityTier0: long; // index 0x0
	CraftQualityTier1: long; // index 0x0
	CraftQualityTier2: long; // index 0x0
	ShiftingCraftQuality: long; // index 0x0
	shopCategory: [ShopCategoryType]; // index 0x0
	ShortcutTypeId: long; // index 0x0
}

table EquipmentLevelExcelTable {
	DataList: [EquipmentLevelExcel]; // index 0x0
}

table EquipmentLevelExcel {
	Level: int; // index 0x0
	tierLevelExp: [long]; // index 0x0
	TotalExp: [long]; // index 0x0
}

table EquipmentStatExcelTable {
	DataList: [EquipmentStatExcel]; // index 0x0
}

table EquipmentStatExcel {
	EquipmentId: long; // index 0x0
	StatLevelUpType: StatLevelUpType; // index 0x0
	statType: [EquipmentOptionType]; // index 0x0
	minStat: [long]; // index 0x0
	maxStat: [long]; // index 0x0
	LevelUpInsertLimit: int; // index 0x0
	LevelUpFeedExp: long; // index 0x0
	LevelUpFeedCostCurrency: CurrencyTypes; // index 0x0
	LevelUpFeedCostAmount: long; // index 0x0
	EquipmentCategory: EquipmentCategory; // index 0x0
	LevelUpFeedAddExp: long; // index 0x0
	DefaultMaxLevel: int; // index 0x0
	TranscendenceMax: int; // index 0x0
	DamageFactorGroupId: string; // index 0x0
}

table EventContentArchiveBannerOffsetExcelTable {
	DataList: [EventContentArchiveBannerOffsetExcel]; // index 0x0
}

table EventContentArchiveBannerOffsetExcel {
	EventContentId: long; // index 0x0
	OffsetX: float; // index 0x0
	OffsetY: float; // index 0x0
	ScaleX: float; // index 0x0
	ScaleY: float; // index 0x0
}

table EventContentBoxGachaElementExcelTable {
	DataList: [EventContentBoxGachaElementExcel]; // index 0x0
}

table EventContentBoxGachaElementExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	Round: long; // index 0x0
	GroupId: long; // index 0x0
}

table EventContentBoxGachaManageExcelTable {
	DataList: [EventContentBoxGachaManageExcel]; // index 0x0
}

table EventContentBoxGachaManageExcel {
	EventContentId: long; // index 0x0
	Round: long; // index 0x0
	GoodsId: long; // index 0x0
	IsLoop: bool; // index 0x0
}

table EventContentBoxGachaShopExcelTable {
	DataList: [EventContentBoxGachaShopExcel]; // index 0x0
}

table EventContentBoxGachaShopExcel {
	EventContentId: long; // index 0x0
	GroupId: long; // index 0x0
	GroupElementAmount: long; // index 0x0
	Round: long; // index 0x0
	IsLegacy: bool; // index 0x0
	IsPrize: bool; // index 0x0
	GoodsId: [long]; // index 0x0
	DisplayOrder: long; // index 0x0
}

table EventContentBuffExcelTable {
	DataList: [EventContentBuffExcel]; // index 0x0
}

table EventContentBuffExcel {
	EventContentBuffId: long; // index 0x0
	IsBuff: bool; // index 0x0
	CharacterTag: Tag; // index 0x0
	EnumType: EventContentBuffFindRule; // index 0x0
	EnumTypeValue: [string]; // index 0x0
	SkillGroupId: string; // index 0x0
	IconPath: string; // index 0x0
	SpriteName: string; // index 0x0
	BuffDescriptionLocalizeCodeId: string; // index 0x0
}

table EventContentBuffGroupExcelTable {
	DataList: [EventContentBuffGroupExcel]; // index 0x0
}

table EventContentBuffGroupExcel {
	EventContentId: long; // index 0x0
	BuffContentId: long; // index 0x0
	BuffGroupId: long; // index 0x0
	BuffGroupNameLocalizeCodeId: string; // index 0x0
	EventContentBuffId1: long; // index 0x0
	BuffNameLocalizeCodeId1: string; // index 0x0
	BuffDescriptionIconPath1: string; // index 0x0
	EventContentBuffId2: long; // index 0x0
	BuffNameLocalizeCodeId2: string; // index 0x0
	BuffDescriptionIconPath2: string; // index 0x0
	EventContentDebuffId: long; // index 0x0
	DebuffNameLocalizeCodeId: string; // index 0x0
	DeBuffDescriptionIconPath: string; // index 0x0
	BuffGroupProb: long; // index 0x0
}

table EventContentCardExcelTable {
	DataList: [EventContentCardExcel]; // index 0x0
}

table EventContentCardExcel {
	CardGroupId: int; // index 0x0
	EventContentId: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IconPath: string; // index 0x0
	BackIconPath: string; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	rewardParcelId: [long]; // index 0x0
}

table EventContentCardShopExcelTable {
	DataList: [EventContentCardShopExcel]; // index 0x0
}

table EventContentCardShopExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	Rarity: Rarity; // index 0x0
	CostGoodsId: long; // index 0x0
	CardGroupId: int; // index 0x0
	IsLegacy: bool; // index 0x0
	RefreshGroup: int; // index 0x0
	Prob: int; // index 0x0
	ProbWeight1: int; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table EventContentChangeExcelTable {
	DataList: [EventContentChangeExcel]; // index 0x0
}

table EventContentChangeExcel {
	EventContentId: long; // index 0x0
	ChangeCount: long; // index 0x0
	IsLast: bool; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
	ChangeCostType: ParcelType; // index 0x0
	ChangeCostId: long; // index 0x0
	ChangeCostAmount: int; // index 0x0
}

table EventContentChangeScenarioExcelTable {
	DataList: [EventContentChangeScenarioExcel]; // index 0x0
}

table EventContentChangeScenarioExcel {
	EventContentId: long; // index 0x0
	ChangeType: EventChangeType; // index 0x0
	ChangeCount: long; // index 0x0
	ScenarioGroupId: long; // index 0x0
}

table EventContentCharacterBonusExcelTable {
	DataList: [EventContentCharacterBonusExcel]; // index 0x0
}

table EventContentCharacterBonusExcel {
	EventContentId: long; // index 0x0
	CharacterId: long; // index 0x0
	eventContentItemType: [EventContentItemType]; // index 0x0
	bonusPercentage: [long]; // index 0x0
}

table EventContentCollectionExcelTable {
	DataList: [EventContentCollectionExcel]; // index 0x0
}

table EventContentCollectionExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	GroupId: long; // index 0x0
	UnlockConditionType: CollectionUnlockType; // index 0x0
	unlockConditionParameter: [long]; // index 0x0
	MultipleConditionCheckType: MultipleConditionCheckType; // index 0x0
	UnlockConditionCount: long; // index 0x0
	IsObject: bool; // index 0x0
	IsObjectOnFullResource: bool; // index 0x0
	IsHorizon: bool; // index 0x0
	EmblemResource: string; // index 0x0
	ThumbResource: string; // index 0x0
	FullResource: string; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	SubNameLocalizeCodeId: string; // index 0x0
}

table EventContentCurrencyItemExcelTable {
	DataList: [EventContentCurrencyItemExcel]; // index 0x0
}

table EventContentCurrencyItemExcel {
	EventContentId: long; // index 0x0
	EventContentItemType: EventContentItemType; // index 0x0
	ItemUniqueId: long; // index 0x0
	UseShortCutContentType: string; // index 0x0
}

table EventContentDebuffRewardExcelTable {
	DataList: [EventContentDebuffRewardExcel]; // index 0x0
}

table EventContentDebuffRewardExcel {
	EventContentId: long; // index 0x0
	EventStageId: long; // index 0x0
	EventContentItemType: EventContentItemType; // index 0x0
	RewardPercentage: long; // index 0x0
}

table EventContentDiceRaceEffectExcelTable {
	DataList: [EventContentDiceRaceEffectExcel]; // index 0x0
}

table EventContentDiceRaceEffectExcel {
	EventContentId: long; // index 0x0
	EventContentDiceRaceResultType: EventContentDiceRaceResultType; // index 0x0
	isDiceResult: bool; // index 0x0
	AniClip: string; // index 0x0
	VoiceId: [uint]; // index 0x0
}

table EventContentDiceRaceExcelTable {
	DataList: [EventContentDiceRaceExcel]; // index 0x0
}

table EventContentDiceRaceExcel {
	EventContentId: long; // index 0x0
	DiceCostGoodsId: long; // index 0x0
	SkipableLap: int; // index 0x0
	DiceRacePawnPrefab: string; // index 0x0
	IsUsingFixedDice: bool; // index 0x0
	DiceRaceEventType: [string]; // index 0x0
}

table EventContentDiceRaceNodeExcelTable {
	DataList: [EventContentDiceRaceNodeExcel]; // index 0x0
}

table EventContentDiceRaceNodeExcel {
	EventContentId: long; // index 0x0
	NodeId: long; // index 0x0
	EventContentDiceRaceNodeType: EventContentDiceRaceNodeType; // index 0x0
	MoveForwardTypeArg: int; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardAmount: [long]; // index 0x0
}

table EventContentDiceRaceProbExcelTable {
	DataList: [EventContentDiceRaceProbExcel]; // index 0x0
}

table EventContentDiceRaceProbExcel {
	EventContentId: long; // index 0x0
	EventContentDiceRaceResultType: EventContentDiceRaceResultType; // index 0x0
	CostItemId: long; // index 0x0
	CostItemAmount: int; // index 0x0
	DiceResult: int; // index 0x0
	Prob: int; // index 0x0
}

table EventContentDiceRaceTotalRewardExcelTable {
	DataList: [EventContentDiceRaceTotalRewardExcel]; // index 0x0
}

table EventContentDiceRaceTotalRewardExcel {
	EventContentId: long; // index 0x0
	RewardID: long; // index 0x0
	RequiredLapFinishCount: int; // index 0x0
	DisplayLapFinishCount: int; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	rewardParcelId: [long]; // index 0x0
	rewardParcelAmount: [long]; // index 0x0
}

table EventContentExcelTable {
	DataList: [EventContentExcel]; // index 0x0
}

table EventContentExcel {
	Id: long; // index 0x0
	DevName: string; // index 0x0
	EventContentId: long; // index 0x0
	BgImagePath: string; // index 0x0
}

table EventContentFortuneGachaExcelTable {
	DataList: [EventContentFortuneGachaExcel]; // index 0x0
}

table EventContentFortuneGachaExcel {
	FortuneGachaGroupId: int; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	NameImagePath: string; // index 0x0
	IconPath: string; // index 0x0
}

table EventContentFortuneGachaModifyExcelTable {
	DataList: [EventContentFortuneGachaModifyExcel]; // index 0x0
}

table EventContentFortuneGachaModifyExcel {
	EventContentId: int; // index 0x0
	TargetGrade: int; // index 0x0
	ProbModifyStartCount: int; // index 0x0
	UsePrefabName: string; // index 0x0
	BucketImagePath: string; // index 0x0
	ShopBgImagePath: string; // index 0x0
	TitleLocalizeKey: string; // index 0x0
}

table EventContentFortuneGachaShopExcelTable {
	DataList: [EventContentFortuneGachaShopExcel]; // index 0x0
}

table EventContentFortuneGachaShopExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	Grade: int; // index 0x0
	CostGoodsId: long; // index 0x0
	IsLegacy: bool; // index 0x0
	FortuneGachaGroupId: int; // index 0x0
	Prob: int; // index 0x0
	ProbModifyValue: int; // index 0x0
	ProbModifyLimit: int; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table EventContentLobbyMenuExcelTable {
	DataList: [EventContentLobbyMenuExcel]; // index 0x0
}

table EventContentLobbyMenuExcel {
	EventContentId: long; // index 0x0
	EventContentType: EventContentType; // index 0x0
	IconSpriteName: string; // index 0x0
	ButtonText: string; // index 0x0
	DisplayOrder: int; // index 0x0
	IconOffsetX: float; // index 0x0
	IconOffsetY: float; // index 0x0
	ReddotSpriteName: string; // index 0x0
}

table EventContentLocationExcelTable {
	DataList: [EventContentLocationExcel]; // index 0x0
}

table EventContentLocationExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	PrefabPath: string; // index 0x0
	LocationResetScheduleCount: int; // index 0x0
	ScheduleEventPointCostParcelType: ParcelType; // index 0x0
	ScheduleEventPointCostParcelId: long; // index 0x0
	ScheduleEventPointCostParcelAmount: long; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	InformationGroupId: long; // index 0x0
}

table EventContentLocationRewardExcelTable {
	DataList: [EventContentLocationRewardExcel]; // index 0x0
}

table EventContentLocationRewardExcel {
	Location: string; // index 0x0
	ScheduleGroupId: long; // index 0x0
	OrderInGroup: long; // index 0x0
	Id: long; // index 0x0
	ProgressTexture: string; // index 0x0
	VoiceId: [uint]; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	LocationRank: long; // index 0x0
	FavorExp: long; // index 0x0
	SecretStoneAmount: long; // index 0x0
	SecretStoneProb: long; // index 0x0
	ExtraFavorExp: long; // index 0x0
	ExtraFavorExpProb: long; // index 0x0
	extraRewardParcelType: [ParcelType]; // index 0x0
	ExtraRewardParcelId: [long]; // index 0x0
	ExtraRewardAmount: [long]; // index 0x0
	ExtraRewardProb: [long]; // index 0x0
	IsExtraRewardDisplayed: [bool]; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardParcelId: [long]; // index 0x0
	RewardAmount: [long]; // index 0x0
}

table EventContentMeetupExcelTable {
	DataList: [EventContentMeetupExcel]; // index 0x0
}

table EventContentMeetupExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	CharacterId: long; // index 0x0
	ConditionScenarioGroupId: long; // index 0x0
	ConditionType: MeetupConditionType; // index 0x0
	conditionParameter: [long]; // index 0x0
	ConditionPrintType: MeetupConditionPrintType; // index 0x0
}

table EventContentMeetupInfoExcelTable {
	DataList: [EventContentMeetupInfoExcel]; // index 0x0
}

table EventContentMeetupInfoExcel {
	EventContentId: long; // index 0x0
	CostParcelType: ParcelType; // index 0x0
	CostId: long; // index 0x0
	CostAmount: int; // index 0x0
}

table EventContentMiniEventShortCutExcelTable {
	DataList: [EventContentMiniEventShortCutExcel]; // index 0x0
}

table EventContentMiniEventShortCutExcel {
	Id: int; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	ShorcutContentType: EventTargetType; // index 0x0
	ShortcutUI: string; // index 0x0
}

table EventContentMiniEventTokenExcelTable {
	DataList: [EventContentMiniEventTokenExcel]; // index 0x0
}

table EventContentMiniEventTokenExcel {
	EventContentId: long; // index 0x0
	ItemUniqueId: long; // index 0x0
	MaximumAmount: long; // index 0x0
}

table EventContentMissionExcelTable {
	DataList: [EventContentMissionExcel]; // index 0x0
}

table EventContentMissionExcel {
	id: long; // index 0x0
	EventContentId: long; // index 0x0
	GroupId: long; // index 0x0
	GroupName: string; // index 0x0
	Category: MissionCategory; // index 0x0
	Description: uint; // index 0x0
	ResetType: MissionResetType; // index 0x0
	ToastDisplayType: MissionToastDisplayConditionType; // index 0x0
	ToastImagePath: string; // index 0x0
	ViewFlag: bool; // index 0x0
	DisplayOrder: long; // index 0x0
	PreMissionId: [long]; // index 0x0
	AccountType: AccountState; // index 0x0
	AccountLevel: long; // index 0x0
	ShortcutUI: [string]; // index 0x0
	ChallengeStageShortcut: long; // index 0x0
	CompleteConditionType: MissionCompleteConditionType; // index 0x0
	IsCompleteExtensionTime: bool; // index 0x0
	CompleteConditionCount: long; // index 0x0
	CompleteConditionParameter: [long]; // index 0x0
	CompleteConditionParameterTag: [Tag]; // index 0x0
	RewardIcon: string; // index 0x0
	completeConditionMissionId: [long]; // index 0x0
	CompleteConditionMissionCount: long; // index 0x0
	missionRewardParcelType: [ParcelType]; // index 0x0
	missionRewardParcelId: [long]; // index 0x0
	missionRewardAmount: [int]; // index 0x0
	conditionRewardParcelType: [ParcelType]; // index 0x0
	ConditionRewardParcelId: [long]; // index 0x0
	ConditionRewardAmount: [int]; // index 0x0
}

table EventContentPlayGuideExcelTable {
	DataList: [EventContentPlayGuideExcel]; // index 0x0
}

table EventContentPlayGuideExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	IsPcBuild: bool; // index 0x0
	DisplayOrder: int; // index 0x0
	GuideTitle: string; // index 0x0
	GuideImagePath: string; // index 0x0
	GuideText: string; // index 0x0
}

table EventContentScenarioExcelTable {
	DataList: [EventContentScenarioExcel]; // index 0x0
}

table EventContentScenarioExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	ReplayDisplayGroup: int; // index 0x0
	Order: long; // index 0x0
	RecollectionNumber: long; // index 0x0
	IsRecollection: bool; // index 0x0
	IsMeetup: bool; // index 0x0
	IsOmnibus: bool; // index 0x0
	scenarioGroupId: [long]; // index 0x0
	ScenarioConditionType: EventContentScenarioConditionType; // index 0x0
	ConditionAmount: long; // index 0x0
	ConditionEventContentId: long; // index 0x0
	ClearedScenarioGroupId: long; // index 0x0
	RecollectionSummaryLocalizeScenarioId: uint; // index 0x0
	RecollectionResource: string; // index 0x0
	IsRecollectionHorizon: bool; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardId: [long]; // index 0x0
	rewardAmount: [int]; // index 0x0
}

table EventContentSeasonExcelTable {
	DataList: [EventContentSeasonExcel]; // index 0x0
}

table EventContentSeasonExcel {
	EventContentId: long; // index 0x0
	OriginalEventContentId: long; // index 0x0
	IsReturn: bool; // index 0x0
	Name: string; // index 0x0
	EventContentType: EventContentType; // index 0x0
	OpenConditionContent: OpenConditionContent; // index 0x0
	EventDisplay: bool; // index 0x0
	IconOrder: int; // index 0x0
	SubEventType: SubEventType; // index 0x0
	SubEvent: bool; // index 0x0
	EventItemId: long; // index 0x0
	MainEventId: long; // index 0x0
	EventChangeOpenCondition: long; // index 0x0
	BeforehandExposedTime: string; // index 0x0
	EventContentOpenTime: string; // index 0x0
	EventContentCloseTime: string; // index 0x0
	ExtensionTime: string; // index 0x0
	MainIconParcelPath: string; // index 0x0
	SubIconParcelPath: string; // index 0x0
	BeforehandBgImagePath: string; // index 0x0
	MinigamePrologScenarioGroupId: long; // index 0x0
	BeforehandScenarioGroupId: [long]; // index 0x0
	MainBannerImagePath: string; // index 0x0
	MainBgImagePath: string; // index 0x0
	ShiftTriggerStageId: long; // index 0x0
	ShiftMainBgImagePath: string; // index 0x0
	MinigameLobbyPrefabName: string; // index 0x0
	MinigameVictoryPrefabName: string; // index 0x0
	MinigameMissionBgPrefabName: string; // index 0x0
	MinigameMissionBgImagePath: string; // index 0x0
	CardBgImagePath: string; // index 0x0
	EventAssist: bool; // index 0x0
	EventContentReleaseType: EventContentReleaseType; // index 0x0
	EventContentStageRewardIdPermanent: long; // index 0x0
	RewardTagPermanent: RewardTag; // index 0x0
	MiniEventShortCutScenarioModeId: long; // index 0x0
	ScenarioContentCollectionGroupId: long; // index 0x0
}

table EventContentShopExcelTable {
	DataList: [EventContentShopExcel]; // index 0x0
}

table EventContentShopExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	IsLegacy: bool; // index 0x0
	goodsId: [long]; // index 0x0
	DisplayOrder: long; // index 0x0
	SalePeriodFrom: string; // index 0x0
	SalePeriodTo: string; // index 0x0
	PurchaseCooltimeMin: long; // index 0x0
	PurchaseCountLimit: long; // index 0x0
	PurchaseCountResetType: PurchaseCountResetType; // index 0x0
	BuyReportEventName: string; // index 0x0
	RestrictBuyWhenInventoryFull: bool; // index 0x0
}

table EventContentShopInfoExcelTable {
	DataList: [EventContentShopInfoExcel]; // index 0x0
}

table EventContentShopInfoExcel {
	EventContentId: long; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	LocalizeCode: uint; // index 0x0
	costParcelType: [ParcelType]; // index 0x0
	costParcelId: [long]; // index 0x0
	IsRefresh: bool; // index 0x0
	IsSoldOutDimmed: bool; // index 0x0
	AutoRefreshCoolTime: long; // index 0x0
	RefreshAbleCount: long; // index 0x0
	GoodsId: [long]; // index 0x0
	OpenPeriodFrom: string; // index 0x0
	OpenPeriodTo: string; // index 0x0
	ShopProductUpdateDate: string; // index 0x0
}

table EventContentShopRefreshExcelTable {
	DataList: [EventContentShopRefreshExcel]; // index 0x0
}

table EventContentShopRefreshExcel {
	EventContentId: long; // index 0x0
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IsLegacy: bool; // index 0x0
	GoodsId: long; // index 0x0
	DisplayOrder: long; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	RefreshGroup: int; // index 0x0
	Prob: int; // index 0x0
	BuyReportEventName: string; // index 0x0
}

table EventContentSpecialOperationsExcelTable {
	DataList: [EventContentSpecialOperationsExcel]; // index 0x0
}

table EventContentSpecialOperationsExcel {
	EventContentId: long; // index 0x0
	PointItemId: long; // index 0x0
}

table EventContentSpineDialogOffsetExcelTable {
	DataList: [EventContentSpineDialogOffsetExcel]; // index 0x0
}

table EventContentSpineDialogOffsetExcel {
	EventContentId: long; // index 0x0
	EventContentType: EventContentType; // index 0x0
	CostumeUniqueId: long; // index 0x0
	SpineOffsetX: float; // index 0x0
	SpineOffsetY: float; // index 0x0
	DialogOffsetX: float; // index 0x0
	DialogOffsetY: float; // index 0x0
}

table EventContentStageExcelTable {
	DataList: [EventContentStageExcel]; // index 0x0
}

table EventContentStageExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	EventContentId: long; // index 0x0
	StageDifficulty: StageDifficulty; // index 0x0
	StageNumber: string; // index 0x0
	StageDisplay: int; // index 0x0
	PrevStageId: long; // index 0x0
	OpenDate: long; // index 0x0
	OpenEventPoint: long; // index 0x0
	PrevStageSubEventId: long; // index 0x0
	OpenConditionScenarioId: long; // index 0x0
	OpenConditionContentType: EventContentType; // index 0x0
	OpenConditionContentId: long; // index 0x0
	BattleDuration: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	StageEnterEchelonCount: int; // index 0x0
	StarConditionTacticRankSCount: long; // index 0x0
	StarConditionTurnCount: long; // index 0x0
	enterScenarioGroupId: [long]; // index 0x0
	clearScenarioGroupId: [long]; // index 0x0
	StrategyMap: string; // index 0x0
	StrategyMapBG: string; // index 0x0
	EventContentStageRewardId: long; // index 0x0
	MaxTurn: int; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	BgmId: string; // index 0x0
	StrategyEnvironment: StrategyEnvironment; // index 0x0
	GroundID: long; // index 0x0
	ContentType: ContentType; // index 0x0
	BGMId: long; // index 0x0
	InstantClear: bool; // index 0x0
	BuffContentId: long; // index 0x0
	FixedEchelonId: long; // index 0x0
	ChallengeDisplay: bool; // index 0x0
	starGoal: [StarGoalType]; // index 0x0
	starGoalAmount: [int]; // index 0x0
	IsDefeatBattle: bool; // index 0x0
	StageHint: uint; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table EventContentStageRewardExcelTable {
	DataList: [EventContentStageRewardExcel]; // index 0x0
}

table EventContentStageRewardExcel {
	GroupId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table EventContentStageTotalRewardExcelTable {
	DataList: [EventContentStageTotalRewardExcel]; // index 0x0
}

table EventContentStageTotalRewardExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	RequiredEventItemAmount: long; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardParcelId: [long]; // index 0x0
	rewardParcelAmount: [long]; // index 0x0
}

table EventContentZoneExcelTable {
	DataList: [EventContentZoneExcel]; // index 0x0
}

table EventContentZoneExcel {
	Id: long; // index 0x0
	OriginalZoneId: long; // index 0x0
	LocationId: long; // index 0x0
	LocationRank: long; // index 0x0
	EventPointForLocationRank: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	studentVisitProb: [long]; // index 0x0
	RewardGroupId: long; // index 0x0
	Tags: [Tag]; // index 0x0
	WhiteListTags: [Tag]; // index 0x0
}

table EventContentZoneVisitRewardExcelTable {
	DataList: [EventContentZoneVisitRewardExcel]; // index 0x0
}

table EventContentZoneVisitRewardExcel {
	EventContentId: long; // index 0x0
	EventContentLocationId: long; // index 0x0
	DevName: string; // index 0x0
	CharacterId: long; // index 0x0
	CharacterDevName: string; // index 0x0
	VisitRewardParcelType: [ParcelType]; // index 0x0
	VisitRewardParcelId: [long]; // index 0x0
	VisitRewardAmount: [long]; // index 0x0
	VisitRewardProb: [long]; // index 0x0
}

table FieldContentStageExcelTable {
	DataList: [FieldContentStageExcel]; // index 0x0
}

table FieldContentStageExcel {
	Id: long; // index 0x0
	SeasonId: long; // index 0x0
	AreaId: long; // index 0x0
	GroupId: long; // index 0x0
	StageDifficulty: StageDifficulty; // index 0x0
	PrevStageId: long; // index 0x0
	Name: string; // index 0x0
	BattleDuration: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	GroundID: long; // index 0x0
	BGMId: long; // index 0x0
	InstantClear: bool; // index 0x0
	FixedEchelonId: long; // index 0x0
	SkipFormationSettings: bool; // index 0x0
	DailyLastPlay: bool; // index 0x0
	starGoal: [StarGoalType]; // index 0x0
	starGoalAmount: [int]; // index 0x0
}

table FieldContentStageRewardExcelTable {
	DataList: [FieldContentStageRewardExcel]; // index 0x0
}

table FieldContentStageRewardExcel {
	GroupId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table FieldCurtainCallFreeModeExcelTable {
	DataList: [FieldCurtainCallFreeModeExcel]; // index 0x0
}

table FieldCurtainCallFreeModeExcel {
	UniqueId: long; // index 0x0
	OpenDate: long; // index 0x0
	SetFieldDateID: long; // index 0x0
	SetFieldQuestOpenDate: long; // index 0x0
}

table FieldDateExcelTable {
	DataList: [FieldDateExcel]; // index 0x0
}

table FieldDateExcel {
	SeasonId: long; // index 0x0
	UniqueId: long; // index 0x0
	OpenDate: long; // index 0x0
	DateLocalizeKey: string; // index 0x0
	EntrySceneId: long; // index 0x0
	StartConditionType: FieldConditionType; // index 0x0
	StartConditionId: long; // index 0x0
	EndConditionType: FieldConditionType; // index 0x0
	EndConditionId: long; // index 0x0
	EndReadyConditionType: FieldConditionType; // index 0x0
	EndReadyConditionId: long; // index 0x0
	OpenConditionStage: long; // index 0x0
	CharacterIconPath: string; // index 0x0
	DateResultBGPath: string; // index 0x0
	DateResultSpinePath: string; // index 0x0
	DateResultSpineOffsetX: float; // index 0x0
}

table FieldEvidenceExcelTable {
	DataList: [FieldEvidenceExcel]; // index 0x0
}

table FieldEvidenceExcel {
	UniqueId: long; // index 0x0
	SeasonId: long; // index 0x0
	NameLocalizeKey: string; // index 0x0
	DescriptionLocalizeKey: string; // index 0x0
	DetailLocalizeKey: string; // index 0x0
	ImagePath: string; // index 0x0
}

table FieldInteractionExcelTable {
	DataList: [FieldInteractionExcel]; // index 0x0
}

table FieldInteractionExcel {
	FieldSeasonId: long; // index 0x0
	UniqueId: long; // index 0x0
	FieldDateId: long; // index 0x0
	ShowEmoji: bool; // index 0x0
	KeywordLocalize: string; // index 0x0
	interactionType: [FieldInteractionType]; // index 0x0
	interactionId: [long]; // index 0x0
	ConditionClass: FieldConditionClass; // index 0x0
	conditionClassParameters: [long]; // index 0x0
	OnceOnly: bool; // index 0x0
	ConditionIndex: [long]; // index 0x0
	ConditionType: [FieldConditionType]; // index 0x0
	conditionId: [long]; // index 0x0
	NegateCondition: [bool]; // index 0x0
}

table FieldKeywordExcelTable {
	DataList: [FieldKeywordExcel]; // index 0x0
}

table FieldKeywordExcel {
	UniqueId: long; // index 0x0
	SeasonId: long; // index 0x0
	NameLocalizeKey: string; // index 0x0
	DescriptionLocalizeKey: string; // index 0x0
	ImagePath: string; // index 0x0
}

table FieldMasteryExcelTable {
	DataList: [FieldMasteryExcel]; // index 0x0
}

table FieldMasteryExcel {
	UniqueId: long; // index 0x0
	SeasonId: long; // index 0x0
	Order: int; // index 0x0
	ExpAmount: long; // index 0x0
	TokenType: ParcelType; // index 0x0
	TokenId: long; // index 0x0
	TokenRequirement: long; // index 0x0
	AccomplishmentConditionType: FieldConditionType; // index 0x0
	AccomplishmentConditionId: long; // index 0x0
}

table FieldMasteryLevelExcelTable {
	DataList: [FieldMasteryLevelExcel]; // index 0x0
}

table FieldMasteryLevelExcel {
	Level: int; // index 0x0
	id: [long]; // index 0x0
	Exp: [long]; // index 0x0
	totalExp: [long]; // index 0x0
	RewardId: [long]; // index 0x0
}

table FieldMasteryManageExcelTable {
	DataList: [FieldMasteryManageExcel]; // index 0x0
}

table FieldMasteryManageExcel {
	FieldSeason: long; // index 0x0
	LocalizeEtc: uint; // index 0x0
	ImagePath: string; // index 0x0
	LevelId: long; // index 0x0
}

table FieldQuestExcelTable {
	DataList: [FieldQuestExcel]; // index 0x0
}

table FieldQuestExcel {
	FieldSeasonId: long; // index 0x0
	UniqueId: long; // index 0x0
	IsDaily: bool; // index 0x0
	FieldDateId: long; // index 0x0
	Opendate: long; // index 0x0
	AssetPath: string; // index 0x0
	RewardId: long; // index 0x0
	Prob: int; // index 0x0
	QuestNamKey: uint; // index 0x0
	QuestDescKey: uint; // index 0x0
}

table FieldRewardExcelTable {
	DataList: [FieldRewardExcel]; // index 0x0
}

table FieldRewardExcel {
	GroupId: long; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
}

table FieldSceneExcelTable {
	DataList: [FieldSceneExcel]; // index 0x0
}

table FieldSceneExcel {
	UniqueId: long; // index 0x0
	DateId: long; // index 0x0
	GroupId: long; // index 0x0
	ArtLevelPath: string; // index 0x0
	DesignLevelPath: string; // index 0x0
	BGMId: long; // index 0x0
	ConditionalBGMQuestId: [long]; // index 0x0
	BeginConditionalBGMScenarioGroupId: [long]; // index 0x0
	BeginConditionalBGMInteractionId: [long]; // index 0x0
	EndConditionalBGMScenarioGroupId: [long]; // index 0x0
	endConditionalBGMInteractionId: [long]; // index 0x0
	conditionalBGMId: [long]; // index 0x0
}

table FieldSeasonExcelTable {
	DataList: [FieldSeasonExcel]; // index 0x0
}

table FieldSeasonExcel {
	UniqueId: long; // index 0x0
	EventContentId: long; // index 0x0
	EntryDateId: long; // index 0x0
	InstantEntryDateId: long; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	LobbyBGMChangeStageId: long; // index 0x0
	FieldPrefabControlID: long; // index 0x0
	FieldGetKeywordCallDialogEnum: FieldDialogType; // index 0x0
	MasteryImagePath: string; // index 0x0
	FieldLobbyTitleImagePath: string; // index 0x0
	KeywordLogoImagePath: string; // index 0x0
}

table FieldStoryStageExcelTable {
	DataList: [FieldStoryStageExcel]; // index 0x0
}

table FieldStoryStageExcel {
	Id: long; // index 0x0
	SeasonId: long; // index 0x0
	Name: string; // index 0x0
	BattleDuration: long; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	GroundID: long; // index 0x0
	BGMId: long; // index 0x0
	FixedEchelonId: long; // index 0x0
	SkipFormationSettings: bool; // index 0x0
}

table FieldTutorialExcelTable {
	DataList: [FieldTutorialExcel]; // index 0x0
}

table FieldTutorialExcel {
	SeasonId: long; // index 0x0
	TutorialType: [FieldTutorialType]; // index 0x0
	ConditionType: [FieldConditionType]; // index 0x0
	ConditionId: [long]; // index 0x0
}

table FieldWorldMapZoneExcelTable {
	DataList: [FieldWorldMapZoneExcel]; // index 0x0
}

table FieldWorldMapZoneExcel {
	Id: long; // index 0x0
	GroupId: int; // index 0x0
	Date: int; // index 0x0
	OpenConditionType: FieldConditionType; // index 0x0
	OpenConditionId: long; // index 0x0
	CloseConditionType: FieldConditionType; // index 0x0
	CloseConditionId: long; // index 0x0
	ResultFieldScene: long; // index 0x0
	FieldStageInteractionId: long; // index 0x0
	WorldMapButtonType: FieldWorldMapButtonType; // index 0x0
	LocalizeCode: uint; // index 0x0
	NewTagDisplay: bool; // index 0x0
}

table FixedStrategyExcelTable {
	DataList: [FixedStrategyExcel]; // index 0x0
}

table FixedStrategyExcel {
	Id: long; // index 0x0
	StageEnterEchelon01FixedEchelonId: long; // index 0x0
	StageEnterEchelon01Starttile: long; // index 0x0
	StageEnterEchelon02FixedEchelonId: long; // index 0x0
	StageEnterEchelon02Starttile: long; // index 0x0
	StageEnterEchelon03FixedEchelonId: long; // index 0x0
	StageEnterEchelon03Starttile: long; // index 0x0
	StageEnterEchelon04FixedEchelonId: long; // index 0x0
	StageEnterEchelon04Starttile: long; // index 0x0
}

table FloaterCommonExcelTable {
	DataList: [FloaterCommonExcel]; // index 0x0
}

table FloaterCommonExcel {
	Id: long; // index 0x0
	TacticEntityType: TacticEntityType; // index 0x0
	FloaterOffsetPosX: int; // index 0x0
	FloaterOffsetPosY: int; // index 0x0
	FloaterRandomPosRangeX: int; // index 0x0
	FloaterRandomPosRangeY: int; // index 0x0
}

table FurnitureExcelTable {
	DataList: [FurnitureExcel]; // index 0x0
}

table FurnitureExcel {
	Id: long; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	Rarity: Rarity; // index 0x0
	Category: FurnitureCategory; // index 0x0
	SubCategory: FurnitureSubCategory; // index 0x0
	CheckFloorDecoration: bool; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	StarGradeInit: int; // index 0x0
	Tier: long; // index 0x0
	Icon: string; // index 0x0
	SizeWidth: int; // index 0x0
	SizeHeight: int; // index 0x0
	OtherSize: int; // index 0x0
	ExpandWidth: int; // index 0x0
	Enable: bool; // index 0x0
	ReverseRotation: bool; // index 0x0
	Prefab: string; // index 0x0
	PrefabExpand: string; // index 0x0
	SubPrefab: string; // index 0x0
	SubExpandPrefab: string; // index 0x0
	CornerPrefab: string; // index 0x0
	StackableMax: long; // index 0x0
	RecipeCraftId: long; // index 0x0
	SetGroudpId: long; // index 0x0
	ComfortBonus: long; // index 0x0
	VisitOperationType: long; // index 0x0
	VisitBonusOperationType: long; // index 0x0
	tags: [Tag]; // index 0x0
	CraftQualityTier0: long; // index 0x0
	CraftQualityTier1: long; // index 0x0
	CraftQualityTier2: long; // index 0x0
	ShiftingCraftQuality: long; // index 0x0
	FurnitureFunctionType: FurnitureFunctionType; // index 0x0
	furnitureFunctionParameter: [long]; // index 0x0
	VideoId: long; // index 0x0
	EventCollectionId: long; // index 0x0
	FurnitureBubbleOffsetX: long; // index 0x0
	FurnitureBubbleOffsetY: long; // index 0x0
	CafeCharacterStateReq: [string]; // index 0x0
	cafeCharacterStateAdd: [string]; // index 0x0
	CafeCharacterStateMake: [string]; // index 0x0
	CafeCharacterStateOnly: [string]; // index 0x0
}

table FurnitureGroupExcelTable {
	DataList: [FurnitureGroupExcel]; // index 0x0
}

table FurnitureGroupExcel {
	Id: long; // index 0x0
	GroupNameLocalize: uint; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	requiredFurnitureCount: [int]; // index 0x0
	ComfortBonus: [long]; // index 0x0
}

table FurnitureTemplateElementExcelTable {
	DataList: [FurnitureTemplateElementExcel]; // index 0x0
}

table FurnitureTemplateElementExcel {
	FurnitureTemplateId: long; // index 0x0
	FurnitureId: long; // index 0x0
	Location: FurnitureLocation; // index 0x0
	PositionX: float; // index 0x0
	PositionY: float; // index 0x0
	Rotation: float; // index 0x0
	Order: long; // index 0x0
}

table FurnitureTemplateExcelTable {
	DataList: [FurnitureTemplateExcel]; // index 0x0
}

table FurnitureTemplateExcel {
	FurnitureTemplateId: long; // index 0x0
	FunitureTemplateTitle: uint; // index 0x0
	ThumbnailImagePath: string; // index 0x0
	ImagePath: string; // index 0x0
}

table GachaCraftNodeExcelTable {
	DataList: [GachaCraftNodeExcel]; // index 0x0
}

table GachaCraftNodeExcel {
	ID: long; // index 0x0
	Tier: long; // index 0x0
	QuickCraftNodeDisplayOrder: int; // index 0x0
	NodeQuality: long; // index 0x0
	Icon: string; // index 0x0
	LocalizeKey: uint; // index 0x0
	Property: long; // index 0x0
}

table GachaCraftNodeGroupExcelTable {
	DataList: [GachaCraftNodeGroupExcel]; // index 0x0
}

table GachaCraftNodeGroupExcel {
	NodeId: long; // index 0x0
	GachaGroupId: long; // index 0x0
	ProbWeight: long; // index 0x0
}

table GachaCraftOpenTagExcelTable {
	DataList: [GachaCraftOpenTagExcel]; // index 0x0
}

table GachaCraftOpenTagExcel {
	NodeTier: CraftNodeTier; // index 0x0
	Tag: [Tag]; // index 0x0
}

table GachaElementExcelTable {
	DataList: [GachaElementExcel]; // index 0x0
}

table GachaElementExcel {
	ID: long; // index 0x0
	GachaGroupID: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	ParcelID: long; // index 0x0
	Rarity: Rarity; // index 0x0
	ParcelAmountMin: int; // index 0x0
	ParcelAmountMax: int; // index 0x0
	Prob: int; // index 0x0
	State: int; // index 0x0
}

table GachaElementRecursiveExcelTable {
	DataList: [GachaElementRecursiveExcel]; // index 0x0
}

table GachaElementRecursiveExcel {
	ID: long; // index 0x0
	GachaGroupID: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	ParcelID: long; // index 0x0
	ParcelAmountMin: int; // index 0x0
	ParcelAmountMax: int; // index 0x0
	Prob: int; // index 0x0
	State: int; // index 0x0
}

table GachaGroupExcelTable {
	DataList: [GachaGroupExcel]; // index 0x0
}

table GachaGroupExcel {
	ID: long; // index 0x0
	NameKr: string; // index 0x0
	IsRecursive: bool; // index 0x0
	GroupType: GachaGroupType; // index 0x0
}

table GoodsExcelTable {
	DataList: [GoodsExcel]; // index 0x0
}

table GoodsExcel {
	Id: long; // index 0x0
	Type: int; // index 0x0
	Rarity: Rarity; // index 0x0
	IconPath: string; // index 0x0
	consumeParcelType: [ParcelType]; // index 0x0
	ConsumeParcelId: [long]; // index 0x0
	ConsumeParcelAmount: [long]; // index 0x0
	ConsumeCondition: [ConsumeCondition]; // index 0x0
	ConsumeGachaTicketType: GachaTicketType; // index 0x0
	ConsumeGachaTicketTypeAmount: long; // index 0x0
	ProductIdAOS: long; // index 0x0
	ProductIdiOS: long; // index 0x0
	ProductIdONE: long; // index 0x0
	ProductIdSGS: long; // index 0x0
	ProductIdSTEAM: long; // index 0x0
	consumeExtraStep: [long]; // index 0x0
	ConsumeExtraAmount: [long]; // index 0x0
	State: int; // index 0x0
	parcelType: [ParcelType]; // index 0x0
	parcelId: [long]; // index 0x0
	parcelAmount: [long]; // index 0x0
}

table GroundGridFlat {
	X: int; // index 0x0
	Y: int; // index 0x0
	StartX: float; // index 0x0
	StartY: float; // index 0x0
	Gap: float; // index 0x0
	Nodes: [GroundNodeFlat]; // index 0x0
	Version: string; // index 0x0
}

table GroundNodeFlat {
	X: int; // index 0x0
	Y: int; // index 0x0
	IsCanNotUseSkill: bool; // index 0x0
	PositionOffset: GroundVector3; // index 0x0
	NodeType: GroundNodeType; // index 0x0
	OriginalNodeType: GroundNodeType; // index 0x0
}

table GroundNodeLayerFlat {
	Layers: [int8]; // index 0x0
}

table GuideMissionExcelTable {
	DataList: [GuideMissionExcel]; // index 0x0
}

table GuideMissionExcel {
	SeasonId: long; // index 0x0
	Id: long; // index 0x0
	Category: MissionCategory; // index 0x0
	IsLegacy: bool; // index 0x0
	TabNumber: long; // index 0x0
	preMissionId: [long]; // index 0x0
	Description: uint; // index 0x0
	ToastDisplayType: MissionToastDisplayConditionType; // index 0x0
	ToastImagePath: string; // index 0x0
	shortcutUI: [string]; // index 0x0
	CompleteConditionType: MissionCompleteConditionType; // index 0x0
	CompleteConditionCount: long; // index 0x0
	completeConditionParameter: [long]; // index 0x0
	completeConditionParameterTag: [Tag]; // index 0x0
	IsAutoClearForScenario: bool; // index 0x0
	missionRewardParcelType: [ParcelType]; // index 0x0
	MissionRewardParcelId: [long]; // index 0x0
	missionRewardAmount: [int]; // index 0x0
}

table GuideMissionOpenStageConditionExcelTable {
	DataList: [GuideMissionOpenStageConditionExcel]; // index 0x0
}

table GuideMissionOpenStageConditionExcel {
	SeasonId: long; // index 0x0
	OrderNumber: long; // index 0x0
	TabLocalizeCode: string; // index 0x0
	ClearScenarioModeId: long; // index 0x0
	LockScenarioTextLocailzeCode: string; // index 0x0
	ShortcutScenarioUI: string; // index 0x0
	ClearStageId: long; // index 0x0
	LockStageTextLocailzeCode: string; // index 0x0
	ShortcutStageUI: string; // index 0x0
}

table GuideMissionSeasonExcelTable {
	DataList: [GuideMissionSeasonExcel]; // index 0x0
}

table GuideMissionSeasonExcel {
	Id: long; // index 0x0
	TitleLocalizeCode: string; // index 0x0
	PermanentInfomationLocalizeCode: string; // index 0x0
	InfomationLocalizeCode: string; // index 0x0
	AccountType: AccountState; // index 0x0
	Enabled: bool; // index 0x0
	BannerOpenDate: string; // index 0x0
	StartDate: string; // index 0x0
	StartableEndDate: string; // index 0x0
	EndDate: string; // index 0x0
	CloseBannerAfterCompletion: bool; // index 0x0
	MaximumLoginCount: long; // index 0x0
	ExpiryDate: long; // index 0x0
	SpineCharacterId: long; // index 0x0
	RequirementParcelImage: string; // index 0x0
	RewardImage: string; // index 0x0
	LobbyBannerImage: string; // index 0x0
	BackgroundImage: string; // index 0x0
	TitleImage: string; // index 0x0
	RequirementParcelType: ParcelType; // index 0x0
	RequirementParcelId: long; // index 0x0
	RequirementParcelAmount: int; // index 0x0
	TabType: GuideMissionTabType; // index 0x0
	IsPermanent: bool; // index 0x0
	PreSeasonId: long; // index 0x0
}

table HpBarAbbreviationExcelTable {
	DataList: [HpBarAbbreviationExcel]; // index 0x0
}

table HpBarAbbreviationExcel {
	MonsterLv: int; // index 0x0
	StandardHpBar: int; // index 0x0
	RaidBossHpBar: int; // index 0x0
}

table InformationStrategyObjectExcelTable {
	DataList: [InformationStrategyObjectExcel]; // index 0x0
}

table InformationStrategyObjectExcel {
	Id: long; // index 0x0
	StageId: long; // index 0x0
	PageName: string; // index 0x0
	LocalizeCodeId: string; // index 0x0
}

table ItemExcelTable {
	DataList: [ItemExcel]; // index 0x0
}

table ItemExcel {
	Id: long; // index 0x0
	GroupId: long; // index 0x0
	Rarity: Rarity; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	ItemCategory: ItemCategory; // index 0x0
	Quality: long; // index 0x0
	Icon: string; // index 0x0
	SpriteName: string; // index 0x0
	StackableMax: int; // index 0x0
	StackableFunction: int; // index 0x0
	ImmediateUse: bool; // index 0x0
	UsingResultParcelType: ParcelType; // index 0x0
	UsingResultId: long; // index 0x0
	UsingResultAmount: long; // index 0x0
	MailType: MailType; // index 0x0
	ExpiryChangeParcelType: ParcelType; // index 0x0
	ExpiryChangeId: long; // index 0x0
	ExpiryChangeAmount: long; // index 0x0
	CanTierUpgrade: bool; // index 0x0
	TierUpgradeRecipeCraftId: long; // index 0x0
	tags: [Tag]; // index 0x0
	CraftQualityTier0: long; // index 0x0
	CraftQualityTier1: long; // index 0x0
	CraftQualityTier2: long; // index 0x0
	ShiftingCraftQuality: long; // index 0x0
	MaxGiftTags: int; // index 0x0
	ShopCategory: [ShopCategoryType]; // index 0x0
	ExpirationDateTime: string; // index 0x0
	ExpirationNotifyDateIn: int; // index 0x0
	ShortcutTypeId: long; // index 0x0
	GachaTicket: GachaTicketType; // index 0x0
}

table KatakanaConvertExcelTable {
	DataList: [KatakanaConvertExcel]; // index 0x0
}

table KatakanaConvertExcel {
	Kr: string; // index 0x0
	Jp: string; // index 0x0
}

table KeyMappingExcelTable {
	DataList: [KeyMappingExcel]; // index 0x0
}

table KeyMappingExcel {
	Id: string; // index 0x0
	TargetKeyCode: string; // index 0x0
	isDisplay: bool; // index 0x0
	isUsed: bool; // index 0x0
	isLongPress: bool; // index 0x0
	IgnorePosCheck: bool; // index 0x0
	IconPositionX: float; // index 0x0
	IconPositionY: float; // index 0x0
	IconScaleX: float; // index 0x0
	IconScaleY: float; // index 0x0
}

table KeyMappingPopupExcelTable {
	DataList: [KeyMappingPopupExcel]; // index 0x0
}

table KeyMappingPopupExcel {
	PrefabName: string; // index 0x0
	ButtonName01: string; // index 0x0
	KeyMappingId01: string; // index 0x0
	ButtonName02: string; // index 0x0
	KeyMappingId02: string; // index 0x0
	ButtonName03: string; // index 0x0
	KeyMappingId03: string; // index 0x0
	ButtonName04: string; // index 0x0
	KeyMappingId04: string; // index 0x0
	ButtonName05: string; // index 0x0
	KeyMappingId05: string; // index 0x0
}

table KnockBackExcelTable {
	DataList: [KnockBackExcel]; // index 0x0
}

table KnockBackExcel {
	Index: long; // index 0x0
	Dist: float; // index 0x0
	Speed: float; // index 0x0
}

table LimitedStageExcelTable {
	DataList: [LimitedStageExcel]; // index 0x0
}

table LimitedStageExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	SeasonId: long; // index 0x0
	StageDifficulty: StageDifficulty; // index 0x0
	StageNumber: string; // index 0x0
	StageDisplay: int; // index 0x0
	PrevStageId: long; // index 0x0
	OpenDate: long; // index 0x0
	OpenEventPoint: long; // index 0x0
	BattleDuration: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	StageEnterEchelonCount: int; // index 0x0
	StarConditionTacticRankSCount: long; // index 0x0
	StarConditionTurnCount: long; // index 0x0
	enterScenarioGroupId: [long]; // index 0x0
	ClearScenarioGroupId: [long]; // index 0x0
	StrategyMap: string; // index 0x0
	StrategyMapBG: string; // index 0x0
	StageRewardId: long; // index 0x0
	MaxTurn: int; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	BgmId: string; // index 0x0
	StrategyEnvironment: StrategyEnvironment; // index 0x0
	GroundID: long; // index 0x0
	ContentType: ContentType; // index 0x0
	BGMId: long; // index 0x0
	InstantClear: bool; // index 0x0
	BuffContentId: long; // index 0x0
	ChallengeDisplay: bool; // index 0x0
}

table LimitedStageRewardExcelTable {
	DataList: [LimitedStageRewardExcel]; // index 0x0
}

table LimitedStageRewardExcel {
	GroupId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table LimitedStageSeasonExcelTable {
	DataList: [LimitedStageSeasonExcel]; // index 0x0
}

table LimitedStageSeasonExcel {
	Id: long; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	TypeACount: long; // index 0x0
	TypeBCount: long; // index 0x0
	TypeCCount: long; // index 0x0
}

table LocalizeCharProfileExcelTable {
	DataList: [LocalizeCharProfileExcel]; // index 0x0
}

table LocalizeCharProfileExcel {
	CharacterId: long; // index 0x0
	StatusMessageKr: string; // index 0x0
	StatusMessageJp: string; // index 0x0
	StatusMessageTh: string; // index 0x0
	StatusMessageTw: string; // index 0x0
	StatusMessageEn: string; // index 0x0
	FullNameKr: string; // index 0x0
	FullNameJp: string; // index 0x0
	FullNameTh: string; // index 0x0
	FullNameTw: string; // index 0x0
	FullNameEn: string; // index 0x0
	FamilyNameKr: string; // index 0x0
	FamilyNameRubyKr: string; // index 0x0
	PersonalNameKr: string; // index 0x0
	PersonalNameRubyKr: string; // index 0x0
	FamilyNameJp: string; // index 0x0
	FamilyNameRubyJp: string; // index 0x0
	PersonalNameJp: string; // index 0x0
	PersonalNameRubyJp: string; // index 0x0
	FamilyNameTh: string; // index 0x0
	FamilyNameRubyTh: string; // index 0x0
	PersonalNameTh: string; // index 0x0
	PersonalNameRubyTh: string; // index 0x0
	FamilyNameTw: string; // index 0x0
	FamilyNameRubyTw: string; // index 0x0
	PersonalNameTw: string; // index 0x0
	PersonalNameRubyTw: string; // index 0x0
	FamilyNameEn: string; // index 0x0
	FamilyNameRubyEn: string; // index 0x0
	PersonalNameEn: string; // index 0x0
	PersonalNameRubyEn: string; // index 0x0
	SchoolYearKr: string; // index 0x0
	SchoolYearJp: string; // index 0x0
	SchoolYearTh: string; // index 0x0
	SchoolYearTw: string; // index 0x0
	SchoolYearEn: string; // index 0x0
	CharacterAgeKr: string; // index 0x0
	CharacterAgeJp: string; // index 0x0
	CharacterAgeTh: string; // index 0x0
	CharacterAgeTw: string; // index 0x0
	CharacterAgeEn: string; // index 0x0
	BirthDay: string; // index 0x0
	BirthdayKr: string; // index 0x0
	BirthdayJp: string; // index 0x0
	BirthdayTh: string; // index 0x0
	BirthdayTw: string; // index 0x0
	BirthdayEn: string; // index 0x0
	CharHeightKr: string; // index 0x0
	CharHeightJp: string; // index 0x0
	CharHeightTh: string; // index 0x0
	CharHeightTw: string; // index 0x0
	CharHeightEn: string; // index 0x0
	DesignerNameKr: string; // index 0x0
	DesignerNameJp: string; // index 0x0
	DesignerNameTh: string; // index 0x0
	DesignerNameTw: string; // index 0x0
	DesignerNameEn: string; // index 0x0
	IllustratorNameKr: string; // index 0x0
	IllustratorNameJp: string; // index 0x0
	IllustratorNameTh: string; // index 0x0
	IllustratorNameTw: string; // index 0x0
	IllustratorNameEn: string; // index 0x0
	CharacterVoiceKr: string; // index 0x0
	CharacterVoiceJp: string; // index 0x0
	CharacterVoiceTh: string; // index 0x0
	CharacterVoiceTw: string; // index 0x0
	CharacterVoiceEn: string; // index 0x0
	KRCharacterVoiceKr: string; // index 0x0
	KRCharacterVoiceTh: string; // index 0x0
	KRCharacterVoiceTw: string; // index 0x0
	KRCharacterVoiceEn: string; // index 0x0
	HobbyKr: string; // index 0x0
	HobbyJp: string; // index 0x0
	HobbyTh: string; // index 0x0
	HobbyTw: string; // index 0x0
	HobbyEn: string; // index 0x0
	WeaponNameKr: string; // index 0x0
	WeaponDescKr: string; // index 0x0
	WeaponNameJp: string; // index 0x0
	WeaponDescJp: string; // index 0x0
	WeaponNameTh: string; // index 0x0
	WeaponDescTh: string; // index 0x0
	WeaponNameTw: string; // index 0x0
	WeaponDescTw: string; // index 0x0
	WeaponNameEn: string; // index 0x0
	WeaponDescEn: string; // index 0x0
	ProfileIntroductionKr: string; // index 0x0
	ProfileIntroductionJp: string; // index 0x0
	ProfileIntroductionTh: string; // index 0x0
	ProfileIntroductionTw: string; // index 0x0
	ProfileIntroductionEn: string; // index 0x0
	CharacterSSRNewKr: string; // index 0x0
	CharacterSSRNewJp: string; // index 0x0
	CharacterSSRNewTh: string; // index 0x0
	CharacterSSRNewTw: string; // index 0x0
	CharacterSSRNewEn: string; // index 0x0
}

table LocalizeGachaShopExcelTable {
	DataList: [LocalizeGachaShopExcel]; // index 0x0
}

table LocalizeGachaShopExcel {
	GachaShopId: long; // index 0x0
	TabNameKr: string; // index 0x0
	TabNameJp: string; // index 0x0
	TabNameTh: string; // index 0x0
	TabNameTw: string; // index 0x0
	TabNameEn: string; // index 0x0
	TitleNameKr: string; // index 0x0
	TitleNameJp: string; // index 0x0
	TitleNameTh: string; // index 0x0
	TitleNameTw: string; // index 0x0
	TitleNameEn: string; // index 0x0
	SubTitleKr: string; // index 0x0
	SubTitleJp: string; // index 0x0
	SubTitleTh: string; // index 0x0
	SubTitleTw: string; // index 0x0
	SubTitleEn: string; // index 0x0
	GachaDescriptionKr: string; // index 0x0
	GachaDescriptionJp: string; // index 0x0
	GachaDescriptionTh: string; // index 0x0
	GachaDescriptionTw: string; // index 0x0
	GachaDescriptionEn: string; // index 0x0
}

table LogicEffectCommonVisualExcelTable {
	DataList: [LogicEffectCommonVisualExcel]; // index 0x0
}

table LogicEffectCommonVisualExcel {
	StringID: uint; // index 0x0
	IconSpriteName: string; // index 0x0
	IconDispelColor: [float]; // index 0x0
	ParticleEnterPath: string; // index 0x0
	ParticleEnterSocket: EffectBone; // index 0x0
	ParticleLoopPath: string; // index 0x0
	ParticleLoopSocket: EffectBone; // index 0x0
	ParticleEndPath: string; // index 0x0
	ParticleEndSocket: EffectBone; // index 0x0
	ParticleApplyPath: string; // index 0x0
	ParticleApplySocket: EffectBone; // index 0x0
	ParticleRemovedPath: string; // index 0x0
	ParticleRemovedSocket: EffectBone; // index 0x0
}

table MiniGameAudioAnimatorExcelTable {
	DataList: [MiniGameAudioAnimatorExcel]; // index 0x0
}

table MiniGameAudioAnimatorExcel {
	ControllerNameHash: uint; // index 0x0
	VoiceNamePrefix: string; // index 0x0
	StateNameHash: uint; // index 0x0
	StateName: string; // index 0x0
	IgnoreInterruptDelay: bool; // index 0x0
	IgnoreInterruptPlay: bool; // index 0x0
	Volume: float; // index 0x0
	Delay: float; // index 0x0
	AudioPriority: int; // index 0x0
	AudioClipPath: [string]; // index 0x0
	voiceHash: [uint]; // index 0x0
}

table MiniGameMissionExcelTable {
	DataList: [MiniGameMissionExcel]; // index 0x0
}

table MiniGameMissionExcel {
	id: long; // index 0x0
	EventContentId: long; // index 0x0
	GroupId: long; // index 0x0
	GroupName: string; // index 0x0
	Category: MissionCategory; // index 0x0
	Description: uint; // index 0x0
	ResetType: MissionResetType; // index 0x0
	ToastDisplayType: MissionToastDisplayConditionType; // index 0x0
	ToastImagePath: string; // index 0x0
	ViewFlag: bool; // index 0x0
	DisplayOrder: long; // index 0x0
	preMissionId: [long]; // index 0x0
	AccountType: AccountState; // index 0x0
	AccountLevel: long; // index 0x0
	shortcutUI: [string]; // index 0x0
	CompleteConditionType: MissionCompleteConditionType; // index 0x0
	IsCompleteExtensionTime: bool; // index 0x0
	CompleteConditionCount: long; // index 0x0
	completeConditionParameter: [long]; // index 0x0
	CompleteConditionParameterTag: [Tag]; // index 0x0
	RewardIcon: string; // index 0x0
	missionRewardParcelType: [ParcelType]; // index 0x0
	MissionRewardParcelId: [long]; // index 0x0
	MissionRewardAmount: [int]; // index 0x0
}

table MiniGamePlayGuideExcelTable {
	DataList: [MiniGamePlayGuideExcel]; // index 0x0
}

table MiniGamePlayGuideExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	IsPcBuild: bool; // index 0x0
	DisplayOrder: int; // index 0x0
	GuideTitle: string; // index 0x0
	GuideImagePath: string; // index 0x0
	GuideText: string; // index 0x0
}

table MiniGameRhythmBgmExcelTable {
	DataList: [MiniGameRhythmBgmExcel]; // index 0x0
}

table MiniGameRhythmBgmExcel {
	RhythmBgmId: long; // index 0x0
	EventContentId: long; // index 0x0
	StageSelectImagePath: string; // index 0x0
	Bpm: long; // index 0x0
	Bgm: long; // index 0x0
	BgmNameText: string; // index 0x0
	BgmArtistText: string; // index 0x0
	HasLyricist: bool; // index 0x0
	BgmComposerText: string; // index 0x0
	BgmLength: int; // index 0x0
}

table MiniGameRhythmExcelTable {
	DataList: [MiniGameRhythmExcel]; // index 0x0
}

table MiniGameRhythmExcel {
	UniqueId: long; // index 0x0
	RhythmBgmId: long; // index 0x0
	PresetName: string; // index 0x0
	StageDifficulty: Difficulty; // index 0x0
	IsSpecial: bool; // index 0x0
	OpenStageScoreAmount: long; // index 0x0
	MaxHp: long; // index 0x0
	MissDamage: long; // index 0x0
	CriticalHPRestoreValue: long; // index 0x0
	MaxScore: long; // index 0x0
	FeverScoreRate: long; // index 0x0
	NoteScoreRate: long; // index 0x0
	ComboScoreRate: long; // index 0x0
	AttackScoreRate: long; // index 0x0
	FeverCriticalRate: float; // index 0x0
	FeverAttackRate: float; // index 0x0
	MaxHpScore: long; // index 0x0
	RhythmFileName: string; // index 0x0
	ArtLevelSceneName: string; // index 0x0
	ComboImagePath: string; // index 0x0
}

table MinigameRoadExcelTable {
	DataList: [MinigameRoadExcel]; // index 0x0
}

table MinigameRoadExcel {
	None: [RoadPuzzleMapTileType]; // index 0x0
}

table MiniGameShootingCharacterExcelTable {
	DataList: [MiniGameShootingCharacterExcel]; // index 0x0
}

table MiniGameShootingCharacterExcel {
	UniqueId: long; // index 0x0
	SpineResourceName: string; // index 0x0
	BodyRadius: float; // index 0x0
	ModelPrefabName: string; // index 0x0
	NormalAttackSkillData: string; // index 0x0
	publicSkillData: [string]; // index 0x0
	DeathSkillData: string; // index 0x0
	MaxHP: long; // index 0x0
	AttackPower: long; // index 0x0
	DefensePower: long; // index 0x0
	CriticalRate: long; // index 0x0
	CriticalDamageRate: long; // index 0x0
	AttackRange: long; // index 0x0
	MoveSpeed: long; // index 0x0
	ShotTime: long; // index 0x0
	IsBoss: bool; // index 0x0
	Scale: float; // index 0x0
	IgnoreObstacleCheck: bool; // index 0x0
	CharacterVoiceGroupId: long; // index 0x0
}

table MiniGameShootingGeasExcelTable {
	DataList: [MiniGameShootingGeasExcel]; // index 0x0
}

table MiniGameShootingGeasExcel {
	UniqueId: long; // index 0x0
	GeasType: Geas; // index 0x0
	Icon: string; // index 0x0
	Probability: long; // index 0x0
	MaxOverlapCount: int; // index 0x0
	GeasData: string; // index 0x0
	NeedGeasId: long; // index 0x0
	HideInPausePopup: bool; // index 0x0
}

table MiniGameShootingStageExcelTable {
	DataList: [MiniGameShootingStageExcel]; // index 0x0
}

table MiniGameShootingStageExcel {
	UniqueId: long; // index 0x0
	bgmId: [long]; // index 0x0
	CostGoodsId: long; // index 0x0
	Difficulty: Difficulty; // index 0x0
	DesignLevel: string; // index 0x0
	ArtLevel: string; // index 0x0
	StartBattleDuration: long; // index 0x0
	DefaultBattleDuration: long; // index 0x0
	DefaultLogicEffect: string; // index 0x0
	CameraSizeRate: float; // index 0x0
	EventContentStageRewardId: long; // index 0x0
}

table MiniGameShootingStageRewardExcelTable {
	DataList: [MiniGameShootingStageRewardExcel]; // index 0x0
}

table MiniGameShootingStageRewardExcel {
	GroupId: long; // index 0x0
	RewardId: long; // index 0x0
	ClearSection: long; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	rewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [int]; // index 0x0
}

table MinigameTBGDiceExcelTable {
	DataList: [MinigameTBGDiceExcel]; // index 0x0
}

table MinigameTBGDiceExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	DiceGroup: int; // index 0x0
	DiceResult: int; // index 0x0
	Prob: int; // index 0x0
	probModifyCondition: [TBGProbModifyCondition]; // index 0x0
	ProbModifyValue: [int]; // index 0x0
	probModifyLimit: [int]; // index 0x0
}

table MinigameTBGEncounterExcelTable {
	DataList: [MinigameTBGEncounterExcel]; // index 0x0
}

table MinigameTBGEncounterExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	AllThema: bool; // index 0x0
	ThemaIndex: int; // index 0x0
	ThemaType: TBGThemaType; // index 0x0
	ObjectType: TBGObjectType; // index 0x0
	EnemyImagePath: string; // index 0x0
	EnemyPrefabName: string; // index 0x0
	EnemyNameLocalize: string; // index 0x0
	OptionGroupId: long; // index 0x0
	RewardHide: bool; // index 0x0
	EncounterTitleLocalize: string; // index 0x0
	StoryImagePath: string; // index 0x0
	BeforeStoryLocalize: string; // index 0x0
	BeforeStoryOption1Localize: string; // index 0x0
	BeforeStoryOption2Localize: string; // index 0x0
	BeforeStoryOption3Localize: string; // index 0x0
	AllyAttackLocalize: string; // index 0x0
	EnemyAttackLocalize: string; // index 0x0
	AttackDefenceLocalize: string; // index 0x0
	ClearStoryLocalize: string; // index 0x0
	DefeatStoryLocalize: string; // index 0x0
	RunawayStoryLocalize: string; // index 0x0
}

table MinigameTBGEncounterOptionExcelTable {
	DataList: [MinigameTBGEncounterOptionExcel]; // index 0x0
}

table MinigameTBGEncounterOptionExcel {
	OptionGroupId: long; // index 0x0
	UniqueId: long; // index 0x0
	SlotIndex: int; // index 0x0
	OptionTitleLocalize: string; // index 0x0
	OptionSuccessLocalize: string; // index 0x0
	OptionSuccessRewardGroupId: long; // index 0x0
	OptionSuccessOrHigherDiceCount: int; // index 0x0
	OptionGreatSuccessOrHigherDiceCount: int; // index 0x0
	OptionFailLocalize: string; // index 0x0
	OptionFailLessDiceCount: int; // index 0x0
	RunawayOrHigherDiceCount: int; // index 0x0
	RewardHide: bool; // index 0x0
}

table MinigameTBGEncounterRewardExcelTable {
	DataList: [MinigameTBGEncounterRewardExcel]; // index 0x0
}

table MinigameTBGEncounterRewardExcel {
	GroupId: long; // index 0x0
	UniqueId: long; // index 0x0
	TBGOptionSuccessType: TBGOptionSuccessType; // index 0x0
	Paremeter: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	ParcelId: long; // index 0x0
	Amount: long; // index 0x0
	Prob: int; // index 0x0
}

table MinigameTBGItemExcelTable {
	DataList: [MinigameTBGItemExcel]; // index 0x0
}

table MinigameTBGItemExcel {
	UniqueId: long; // index 0x0
	ItemType: TBGItemType; // index 0x0
	TBGItemEffectType: TBGItemEffectType; // index 0x0
	ItemParameter: int; // index 0x0
	LocalizeETCId: string; // index 0x0
	Icon: string; // index 0x0
	BuffIcon: string; // index 0x0
	EncounterCount: int; // index 0x0
	DiceEffectAniClip: string; // index 0x0
	BuffIconHUDVisible: bool; // index 0x0
}

table MinigameTBGObjectExcelTable {
	DataList: [MinigameTBGObjectExcel]; // index 0x0
}

table MinigameTBGObjectExcel {
	UniqueId: long; // index 0x0
	Key: string; // index 0x0
	PrefabName: string; // index 0x0
	ObjectType: TBGObjectType; // index 0x0
	ObjectCostType: ParcelType; // index 0x0
	ObjectCostId: long; // index 0x0
	ObjectCostAmount: int; // index 0x0
	Disposable: bool; // index 0x0
	ReEncounterCost: bool; // index 0x0
}

table MinigameTBGSeasonExcelTable {
	DataList: [MinigameTBGSeasonExcel]; // index 0x0
}

table MinigameTBGSeasonExcel {
	EventContentId: long; // index 0x0
	ItemSlot: int; // index 0x0
	DefaultEchelonHp: int; // index 0x0
	DefaultItemDiceId: long; // index 0x0
	EchelonSlot1CharacterId: long; // index 0x0
	EchelonSlot2CharacterId: long; // index 0x0
	EchelonSlot3CharacterId: long; // index 0x0
	EchelonSlot4CharacterId: long; // index 0x0
	EchelonSlot1Portrait: string; // index 0x0
	EchelonSlot2Portrait: string; // index 0x0
	EchelonSlot3Portrait: string; // index 0x0
	EchelonSlot4Portrait: string; // index 0x0
	EventUseCostType: ParcelType; // index 0x0
	EventUseCostId: long; // index 0x0
	EchelonRevivalCostType: ParcelType; // index 0x0
	EchelonRevivalCostId: long; // index 0x0
	EchelonRevivalCostAmount: int; // index 0x0
	EnemyBossHP: int; // index 0x0
	EnemyMinionHP: int; // index 0x0
	AttackDamage: int; // index 0x0
	CriticalAttackDamage: int; // index 0x0
	RoundItemSelectLimit: int; // index 0x0
	InstantClearRound: int; // index 0x0
	MaxHp: int; // index 0x0
	MapImagePath: string; // index 0x0
	MapNameLocalize: string; // index 0x0
	StartThemaIndex: int; // index 0x0
	LoopThemaIndex: int; // index 0x0
	MaxDicePlus: int; // index 0x0
}

table MinigameTBGThemaExcelTable {
	DataList: [MinigameTBGThemaExcel]; // index 0x0
}

table MinigameTBGThemaExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	ThemaIndex: int; // index 0x0
	ThemaType: TBGThemaType; // index 0x0
	ThemaMap: string; // index 0x0
	ThemaMapBG: string; // index 0x0
	portalCondition: [TBGPortalCondition]; // index 0x0
	portalConditionParameter: [string]; // index 0x0
	ThemaNameLocalize: string; // index 0x0
	ThemaLoadingImage: string; // index 0x0
	ThemaPlayerPrefab: string; // index 0x0
	ThemaLeaderId: long; // index 0x0
	ThemaGoalLocalize: string; // index 0x0
	InstantClearCostAmount: long; // index 0x0
	IsTutorial: bool; // index 0x0
}

table MiniGameTBGThemaRewardExcelTable {
	DataList: [MiniGameTBGThemaRewardExcel]; // index 0x0
}

table MiniGameTBGThemaRewardExcel {
	EventContentId: long; // index 0x0
	ThemaRound: int; // index 0x0
	ThemaUniqueId: int; // index 0x0
	IsLoop: bool; // index 0x0
	MiniGameTBGThemaRewardType: MiniGameTBGThemaRewardType; // index 0x0
	rewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	rewardParcelAmount: [int]; // index 0x0
}

table MinigameTBGVoiceExcelTable {
	DataList: [MinigameTBGVoiceExcel]; // index 0x0
}

table MinigameTBGVoiceExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	VoiceCondition: TBGVoiceCondition; // index 0x0
	VoiceId: uint; // index 0x0
}

table MissionExcelTable {
	DataList: [MissionExcel]; // index 0x0
}

table MissionExcel {
	Id: long; // index 0x0
	Category: MissionCategory; // index 0x0
	Description: uint; // index 0x0
	ResetType: MissionResetType; // index 0x0
	ToastDisplayType: MissionToastDisplayConditionType; // index 0x0
	ToastImagePath: string; // index 0x0
	ViewFlag: bool; // index 0x0
	Limit: bool; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	EndDay: long; // index 0x0
	StartableEndDate: string; // index 0x0
	DateAutoRefer: ContentType; // index 0x0
	DisplayOrder: long; // index 0x0
	PreMissionId: [long]; // index 0x0
	AccountType: AccountState; // index 0x0
	AccountLevel: long; // index 0x0
	ContentTags: [SuddenMissionContentType]; // index 0x0
	ShortcutUI: [string]; // index 0x0
	ChallengeStageShortcut: long; // index 0x0
	CompleteConditionType: MissionCompleteConditionType; // index 0x0
	CompleteConditionCount: long; // index 0x0
	CompleteConditionParameter: [long]; // index 0x0
	CompleteConditionParameterTag: [Tag]; // index 0x0
	RewardIcon: string; // index 0x0
	MissionRewardParcelType: [ParcelType]; // index 0x0
	missionRewardParcelId: [long]; // index 0x0
	MissionRewardAmount: [int]; // index 0x0
}

table NormalSkillTemplateExcelTable {
	DataList: [NormalSkillTemplateExcel]; // index 0x0
}

table NormalSkillTemplateExcel {
	Index: long; // index 0x0
	FirstCoolTime: float; // index 0x0
	CoolTime: float; // index 0x0
	MultiAni: bool; // index 0x0
}

table ObstacleExcelTable {
	DataList: [ObstacleExcel]; // index 0x0
}

table ObstacleExcel {
	Index: long; // index 0x0
	PrefabName: string; // index 0x0
	JumpAble: bool; // index 0x0
	SubOffset: [float]; // index 0x0
	X: float; // index 0x0
	Z: float; // index 0x0
	Hp: long; // index 0x0
	MaxHp: long; // index 0x0
	BlockRate: int; // index 0x0
	EvasionRate: int; // index 0x0
	DestroyType: ObstacleDestroyType; // index 0x0
	Point1Offeset: [float]; // index 0x0
	EnemyPoint1Osset: [float]; // index 0x0
	Point2Offeset: [float]; // index 0x0
	EnemyPoint2Osset: [float]; // index 0x0
	SubObstacleID: [long]; // index 0x0
}

table ObstacleFireLineCheckExcelTable {
	DataList: [ObstacleFireLineCheckExcel]; // index 0x0
}

table ObstacleFireLineCheckExcel {
	MyObstacleFireLineCheck: bool; // index 0x0
	AllyObstacleFireLineCheck: bool; // index 0x0
	EnemyObstacleFireLineCheck: bool; // index 0x0
	EmptyObstacleFireLineCheck: bool; // index 0x0
}

table ParcelAutoSynthExcelTable {
	DataList: [ParcelAutoSynthExcel]; // index 0x0
}

table ParcelAutoSynthExcel {
	RequireParcelType: ParcelType; // index 0x0
	RequireParcelId: long; // index 0x0
	RequireParcelAmount: long; // index 0x0
	SynthStartAmount: long; // index 0x0
	SynthEndAmount: long; // index 0x0
	SynthMaxItem: bool; // index 0x0
	ResultParcelType: ParcelType; // index 0x0
	ResultParcelId: long; // index 0x0
	ResultParcelAmount: long; // index 0x0
}

table PersonalityExcelTable {
	DataList: [PersonalityExcel]; // index 0x0
}

table PersonalityExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
}

table PickupDuplicateBonusExcelTable {
	DataList: [PickupDuplicateBonusExcel]; // index 0x0
}

table PickupDuplicateBonusExcel {
	Id: long; // index 0x0
	ShopCategoryType: ShopCategoryType; // index 0x0
	ShopId: long; // index 0x0
	PickupCharacterId: long; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
}

table PresetCharacterGroupExcelTable {
	DataList: [PresetCharacterGroupExcel]; // index 0x0
}

table PresetCharacterGroupExcel {
	PresetCharacterGroupId: long; // index 0x0
	GetPresetType: string; // index 0x0
	Level: int; // index 0x0
	Exp: int; // index 0x0
	FavorExp: int; // index 0x0
	FavorRank: int; // index 0x0
	StarGrade: int; // index 0x0
	ExSkillLevel: int; // index 0x0
	PassiveSkillLevel: int; // index 0x0
	ExtraPassiveSkillLevel: int; // index 0x0
	CommonSkillLevel: int; // index 0x0
	LeaderSkillLevel: int; // index 0x0
	EquipSlot01: bool; // index 0x0
	EquipSlotTier01: int; // index 0x0
	EquipSlotLevel01: int; // index 0x0
	EquipSlot02: bool; // index 0x0
	EquipSlotTier02: int; // index 0x0
	EquipSlotLevel02: int; // index 0x0
	EquipSlot03: bool; // index 0x0
	EquipSlotTier03: int; // index 0x0
	EquipSlotLevel03: int; // index 0x0
	EquipCharacterWeapon: bool; // index 0x0
	EquipCharacterWeaponTier: int; // index 0x0
	EquipCharacterWeaponLevel: int; // index 0x0
	EquipCharacterGear: bool; // index 0x0
	EquipCharacterGearTier: int; // index 0x0
	EquipCharacterGearLevel: int; // index 0x0
	PotentialType01: PotentialStatBonusRateType; // index 0x0
	PotentialLevel01: int; // index 0x0
	PotentialType02: PotentialStatBonusRateType; // index 0x0
	PotentialLevel02: int; // index 0x0
	PotentialType03: PotentialStatBonusRateType; // index 0x0
	PotentialLevel03: int; // index 0x0
}

table PresetCharacterGroupSettingExcelTable {
	DataList: [PresetCharacterGroupSettingExcel]; // index 0x0
}

table PresetCharacterGroupSettingExcel {
	CharacterId: long; // index 0x0
	ArenaSimulatorFixed: bool; // index 0x0
	PresetType: [string]; // index 0x0
}

table PresetParcelsExcelTable {
	DataList: [PresetParcelsExcel]; // index 0x0
}

table PresetParcelsExcel {
	ParcelType: ParcelType; // index 0x0
	ParcelId: long; // index 0x0
	PresetGroupId: long; // index 0x0
	ParcelAmount: long; // index 0x0
}

table ProductExcelTable {
	DataList: [ProductExcel]; // index 0x0
}

table ProductExcel {
	Id: long; // index 0x0
	ProductId: string; // index 0x0
	TeenProductId: string; // index 0x0
	StoreType: StoreType; // index 0x0
	Price: long; // index 0x0
	PriceReference: string; // index 0x0
	PurchasePeriodType: PurchasePeriodType; // index 0x0
	PurchasePeriodLimit: long; // index 0x0
	parcelType: [ParcelType]; // index 0x0
	ParcelId: [long]; // index 0x0
	parcelAmount: [long]; // index 0x0
}

table ProductMonthlyExcelTable {
	DataList: [ProductMonthlyExcel]; // index 0x0
}

table ProductMonthlyExcel {
	Id: long; // index 0x0
	ProductId: string; // index 0x0
	TeenProductId: string; // index 0x0
	StoreType: StoreType; // index 0x0
	Price: long; // index 0x0
	PriceReference: string; // index 0x0
	ProductTagType: ProductTagType; // index 0x0
	MonthlyDays: long; // index 0x0
	UseMonthlyProductCheck: bool; // index 0x0
	PurchaseCountLimit: long; // index 0x0
	parcelType: [ParcelType]; // index 0x0
	ParcelId: [long]; // index 0x0
	parcelAmount: [long]; // index 0x0
	EnterCostReduceGroupId: long; // index 0x0
	DailyParcelType: [ParcelType]; // index 0x0
	DailyParcelId: [long]; // index 0x0
	dailyParcelAmount: [long]; // index 0x0
}

table PropVector3 {
	X: float; // index 0x0
	Y: float; // index 0x0
	Z: float; // index 0x0
}

table PropMotion {
	Name: string; // index 0x0
	Positions: [PropVector3]; // index 0x0
	Rotations: [PropVector3]; // index 0x0
}

table PropRootMotionFlat {
	RootMotions: [PropMotion]; // index 0x0
}

table ProtocolSettingExcelTable {
	DataList: [ProtocolSettingExcel]; // index 0x0
}

table ProtocolSettingExcel {
	Protocol: string; // index 0x0
	OpenConditionContent: OpenConditionContent; // index 0x0
	Currency: bool; // index 0x0
	Inventory: bool; // index 0x0
	Mail: bool; // index 0x0
}

table RaidRankingRewardExcelTable {
	DataList: [RaidRankingRewardExcel]; // index 0x0
}

table RaidRankingRewardExcel {
	RankingRewardGroupId: long; // index 0x0
	Id: long; // index 0x0
	RankStart: long; // index 0x0
	RankEnd: long; // index 0x0
	RankStartTw: long; // index 0x0
	RankEndTw: long; // index 0x0
	RankStartAsia: long; // index 0x0
	RankEndAsia: long; // index 0x0
	RankStartNa: long; // index 0x0
	RankEndNa: long; // index 0x0
	RankStartGlobal: long; // index 0x0
	RankEndGlobal: long; // index 0x0
	PercentRankStart: long; // index 0x0
	PercentRankEnd: long; // index 0x0
	Tier: int; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	rewardParcelUniqueId: [long]; // index 0x0
	RewardParcelUniqueName: [string]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table RaidSeasonManageExcelTable {
	DataList: [RaidSeasonManageExcel]; // index 0x0
}

table RaidSeasonManageExcel {
	SeasonId: long; // index 0x0
	SeasonDisplay: long; // index 0x0
	SeasonStartData: string; // index 0x0
	EndNoteLabelStartDate: string; // index 0x0
	SeasonEndData: string; // index 0x0
	SettlementEndDate: string; // index 0x0
	OpenRaidBossGroup: [string]; // index 0x0
	RankingRewardGroupId: long; // index 0x0
	MaxSeasonRewardGauage: int; // index 0x0
	StackedSeasonRewardGauge: [long]; // index 0x0
	seasonRewardId: [long]; // index 0x0
}

table RaidStageExcelTable {
	DataList: [RaidStageExcel]; // index 0x0
}

table RaidStageExcel {
	Id: long; // index 0x0
	UseBossIndex: bool; // index 0x0
	UseBossAIPhaseSync: bool; // index 0x0
	RaidBossGroup: string; // index 0x0
	PortraitPath: string; // index 0x0
	BGPath: string; // index 0x0
	RaidCharacterId: long; // index 0x0
	bossCharacterId: [long]; // index 0x0
	Difficulty: Difficulty; // index 0x0
	DifficultyOpenCondition: bool; // index 0x0
	MaxPlayerCount: long; // index 0x0
	RaidRoomLifeTime: int; // index 0x0
	BattleDuration: long; // index 0x0
	GroundId: long; // index 0x0
	GroundDevName: string; // index 0x0
	EnterTimeLine: string; // index 0x0
	TacticEnvironment: TacticEnvironment; // index 0x0
	DefaultClearScore: long; // index 0x0
	MaximumScore: long; // index 0x0
	PerSecondMinusScore: long; // index 0x0
	HPPercentScore: long; // index 0x0
	MinimumAcquisitionScore: long; // index 0x0
	MaximumAcquisitionScore: long; // index 0x0
	RaidRewardGroupId: long; // index 0x0
	BattleReadyTimelinePath: [string]; // index 0x0
	battleReadyTimelinePhaseStart: [int]; // index 0x0
	BattleReadyTimelinePhaseEnd: [int]; // index 0x0
	VictoryTimelinePath: string; // index 0x0
	PhaseChangeTimelinePath: string; // index 0x0
	TimeLinePhase: long; // index 0x0
	EnterScenarioKey: uint; // index 0x0
	ClearScenarioKey: uint; // index 0x0
	ShowSkillCard: bool; // index 0x0
	BossBGInfoKey: uint; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table RaidStageRewardExcelTable {
	DataList: [RaidStageRewardExcel]; // index 0x0
}

table RaidStageRewardExcel {
	GroupId: long; // index 0x0
	IsClearStageRewardHideInfo: bool; // index 0x0
	ClearStageRewardProb: long; // index 0x0
	ClearStageRewardParcelType: ParcelType; // index 0x0
	ClearStageRewardParcelUniqueID: long; // index 0x0
	ClearStageRewardParcelUniqueName: string; // index 0x0
	ClearStageRewardAmount: long; // index 0x0
}

table RaidStageSeasonRewardExcelTable {
	DataList: [RaidStageSeasonRewardExcel]; // index 0x0
}

table RaidStageSeasonRewardExcel {
	SeasonRewardId: long; // index 0x0
	seasonRewardParcelType: [ParcelType]; // index 0x0
	seasonRewardParcelUniqueId: [long]; // index 0x0
	seasonRewardParcelUniqueName: [string]; // index 0x0
	SeasonRewardAmount: [long]; // index 0x0
}

table RecipeCraftExcelTable {
	DataList: [RecipeCraftExcel]; // index 0x0
}

table RecipeCraftExcel {
	Id: long; // index 0x0
	DevName: string; // index 0x0
	RecipeType: RecipeType; // index 0x0
	RecipeIngredientId: long; // index 0x0
	RecipeIngredientDevName: string; // index 0x0
	ParcelType: [ParcelType]; // index 0x0
	ParcelId: [long]; // index 0x0
	ParcelDevName: [string]; // index 0x0
	ResultAmountMin: [long]; // index 0x0
	ResultAmountMax: [long]; // index 0x0
}

table RecipeExcelTable {
	DataList: [RecipeExcel]; // index 0x0
}

table RecipeExcel {
	Id: long; // index 0x0
	RecipeType: RecipeType; // index 0x0
	RecipeIngredientId: long; // index 0x0
	RecipeSelectionGroupId: long; // index 0x0
	parcelType: [ParcelType]; // index 0x0
	parcelId: [long]; // index 0x0
	ResultAmountMin: [long]; // index 0x0
	resultAmountMax: [long]; // index 0x0
}

table RecipeIngredientExcelTable {
	DataList: [RecipeIngredientExcel]; // index 0x0
}

table RecipeIngredientExcel {
	Id: long; // index 0x0
	RecipeType: RecipeType; // index 0x0
	CostParcelType: [ParcelType]; // index 0x0
	costId: [long]; // index 0x0
	costAmount: [long]; // index 0x0
	ingredientParcelType: [ParcelType]; // index 0x0
	ingredientId: [long]; // index 0x0
	ingredientAmount: [long]; // index 0x0
	CostTimeInSecond: long; // index 0x0
}

table RecipeSelectionAutoUseExcelTable {
	DataList: [RecipeSelectionAutoUseExcel]; // index 0x0
}

table RecipeSelectionAutoUseExcel {
	Id: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	TargetItemId: long; // index 0x0
	priority: [long]; // index 0x0
}

table RecipeSelectionGroupExcelTable {
	DataList: [RecipeSelectionGroupExcel]; // index 0x0
}

table RecipeSelectionGroupExcel {
	RecipeSelectionGroupId: long; // index 0x0
	RecipeSelectionGroupComponentId: long; // index 0x0
	ParcelType: ParcelType; // index 0x0
	ParcelId: long; // index 0x0
	ResultAmountMin: long; // index 0x0
	ResultAmountMax: long; // index 0x0
}

table Position {
	X: float; // index 0x0
	Z: float; // index 0x0
}

table Motion {
	Name: string; // index 0x0
	Positions: [Position]; // index 0x0
}

table MoveEnd {
	NormalOffset: Motion; // index 0x0
	StandOffset: Motion; // index 0x0
	KneelOffset: Motion; // index 0x0
}

table Form {
	MoveEndOffset: MoveEnd; // index 0x0
	PublicSkillOffset: Motion; // index 0x0
}

table RootMotionFlat {
	Forms: [Form]; // index 0x0
	ExSkills: [Motion]; // index 0x0
	MoveLeftOffset: Motion; // index 0x0
	MoveRightOffset: Motion; // index 0x0
}

table ScenarioExcelTable {
	DataList: [ScenarioExcel]; // index 0x0
}

table ScenarioExcel {
	none: [ScenarioBGType]; // index 0x0
	idle: [ScenarioCharacterAction]; // index 0x0
	Cafe: DialogCategory; // index 0x0
	Talk: DialogType; // index 0x0
	Open: StoryCondition; // index 0x0
	EnterConver: EmojiEvent; // index 0x0
	Center: ScenarioZoomAnchors; // index 0x0
	Instant: ScenarioZoomType; // index 0x0
	Prologue: ScenarioContentType; // index 0x0
}

table ScenarioReplayExcelTable {
	DataList: [ScenarioReplayExcel]; // index 0x0
}

table ScenarioReplayExcel {
	ModeId: long; // index 0x0
	VolumeId: long; // index 0x0
	ReplayType: ScenarioModeReplayTypes; // index 0x0
	ChapterId: long; // index 0x0
	EpisodeId: long; // index 0x0
	frontScenarioGroupId: [long]; // index 0x0
	GroundId: long; // index 0x0
	BattleDuration: long; // index 0x0
	BackScenarioGroupId: [long]; // index 0x0
}

table ShiftingCraftRecipeExcelTable {
	DataList: [ShiftingCraftRecipeExcel]; // index 0x0
}

table ShiftingCraftRecipeExcel {
	Id: long; // index 0x0
	DisplayOrder: long; // index 0x0
	NotificationId: int; // index 0x0
	ResultParcel: ParcelType; // index 0x0
	ResultId: long; // index 0x0
	ResultAmount: long; // index 0x0
	RequireItemId: long; // index 0x0
	RequireItemAmount: long; // index 0x0
	RequireGold: long; // index 0x0
	IngredientTag: [Tag]; // index 0x0
	IngredientExp: long; // index 0x0
}

table ShopCashExcelTable {
	DataList: [ShopCashExcel]; // index 0x0
}

table ShopCashExcel {
	Id: long; // index 0x0
	CashProductId: long; // index 0x0
	PackageType: PurchaseSourceType; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IconPath: string; // index 0x0
	DisplayOrder: long; // index 0x0
	RenewalDisplayOrder: long; // index 0x0
	CategoryType: ProductCategory; // index 0x0
	DisplayTag: ProductDisplayTag; // index 0x0
	SalePeriodFrom: string; // index 0x0
	SalePeriodTo: string; // index 0x0
	PeriodTag: bool; // index 0x0
	AccountLevelLimit: long; // index 0x0
	AccountLevelHide: bool; // index 0x0
	ClearMissionLimit: long; // index 0x0
	ClearMissionHide: bool; // index 0x0
	PurchaseReportEventName: string; // index 0x0
	PackageClientType: PurchaseSourceType; // index 0x0
	IsStartDash: bool; // index 0x0
	ViewFlag: bool; // index 0x0
}

table ShopCashScenarioResourceInfoExcelTable {
	DataList: [ShopCashScenarioResourceInfoExcel]; // index 0x0
}

table ShopCashScenarioResourceInfoExcel {
	ScenarioResrouceInfoId: long; // index 0x0
	ShopCashId: long; // index 0x0
	IconPath: string; // index 0x0
}

table ShopExcelTable {
	DataList: [ShopExcel]; // index 0x0
}

table ShopExcel {
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	IsLegacy: bool; // index 0x0
	GoodsId: [long]; // index 0x0
	DisplayOrder: long; // index 0x0
	SalePeriodFrom: string; // index 0x0
	SalePeriodTo: string; // index 0x0
	PurchaseCooltimeMin: long; // index 0x0
	PurchaseCountLimit: long; // index 0x0
	PurchaseCountResetType: PurchaseCountResetType; // index 0x0
	BuyReportEventName: string; // index 0x0
	RestrictBuyWhenInventoryFull: bool; // index 0x0
	DisplayTag: ProductDisplayTag; // index 0x0
	ShopUpdateGroupId: int; // index 0x0
}

table ShopFilterClassifiedExcelTable {
	DataList: [ShopFilterClassifiedExcel]; // index 0x0
}

table ShopFilterClassifiedExcel {
	Id: long; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	ConsumeParcelType: ParcelType; // index 0x0
	ConsumeParcelId: long; // index 0x0
	ShopFilterType: ShopFilterType; // index 0x0
	GoodsId: long; // index 0x0
}

table ShopFreeRecruitExcelTable {
	DataList: [ShopFreeRecruitExcel]; // index 0x0
}

table ShopFreeRecruitExcel {
	Id: long; // index 0x0
	FreeRecruitPeriodFrom: string; // index 0x0
	FreeRecruitPeriodTo: string; // index 0x0
	FreeRecruitType: ShopFreeRecruitType; // index 0x0
	FreeRecruitDecorationImagePath: string; // index 0x0
	ShopRecruitId: [long]; // index 0x0
}

table ShopFreeRecruitPeriodExcelTable {
	DataList: [ShopFreeRecruitPeriodExcel]; // index 0x0
}

table ShopFreeRecruitPeriodExcel {
	ShopFreeRecruitId: long; // index 0x0
	ShopFreeRecruitIntervalId: long; // index 0x0
	IntervalDate: string; // index 0x0
	FreeRecruitCount: int; // index 0x0
}

table ShopInfoExcelTable {
	DataList: [ShopInfoExcel]; // index 0x0
}

table ShopInfoExcel {
	CategoryType: ShopCategoryType; // index 0x0
	IsRefresh: bool; // index 0x0
	IsSoldOutDimmed: bool; // index 0x0
	costParcelType: [ParcelType]; // index 0x0
	CostParcelId: [long]; // index 0x0
	AutoRefreshCoolTime: long; // index 0x0
	RefreshAbleCount: long; // index 0x0
	GoodsId: [long]; // index 0x0
	OpenPeriodFrom: string; // index 0x0
	OpenPeriodTo: string; // index 0x0
	ShopProductUpdateTime: string; // index 0x0
	DisplayParcelType: ParcelType; // index 0x0
	DisplayParcelId: long; // index 0x0
	IsShopVisible: bool; // index 0x0
	DisplayOrder: int; // index 0x0
	ShopUpdateDate: int; // index 0x0
	ShopUpdateGroupId1: int; // index 0x0
	ShopUpdateGroupId2: int; // index 0x0
	ShopUpdateGroupId3: int; // index 0x0
	ShopUpdateGroupId4: int; // index 0x0
	ShopUpdateGroupId5: int; // index 0x0
	ShopUpdateGroupId6: int; // index 0x0
	ShopUpdateGroupId7: int; // index 0x0
	ShopUpdateGroupId8: int; // index 0x0
	ShopUpdateGroupId9: int; // index 0x0
	ShopUpdateGroupId10: int; // index 0x0
	ShopUpdateGroupId11: int; // index 0x0
	ShopUpdateGroupId12: int; // index 0x0
}

table ShopRecruitExcelTable {
	DataList: [ShopRecruitExcel]; // index 0x0
}

table ShopRecruitExcel {
	Id: long; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	IsLegacy: bool; // index 0x0
	OneGachaGoodsId: long; // index 0x0
	TenGachaGoodsId: long; // index 0x0
	GoodsDevName: string; // index 0x0
	DisplayTag: GachaDisplayTag; // index 0x0
	DisplayOrder: long; // index 0x0
	GachaBannerPath: string; // index 0x0
	VideoId: [long]; // index 0x0
	LinkedRobbyBannerId: long; // index 0x0
	infoCharacterId: [long]; // index 0x0
	SalePeriodFrom: string; // index 0x0
	SalePeriodTo: string; // index 0x0
	RecruitCoinId: long; // index 0x0
	RecruitSellectionShopId: long; // index 0x0
	PurchaseCooltimeMin: long; // index 0x0
	PurchaseCountLimit: long; // index 0x0
	PurchaseCountResetType: PurchaseCountResetType; // index 0x0
	IsNewbie: bool; // index 0x0
	IsSelectRecruit: bool; // index 0x0
	DirectPayInvisibleTokenId: long; // index 0x0
	DirectPayAndroidShopCashId: long; // index 0x0
	DirectPayAppleShopCashId: long; // index 0x0
	DirectPayOneStoreShopCashId: long; // index 0x0
	ProbabilityUrlDev: string; // index 0x0
	ProbabilityUrlLive: string; // index 0x0
}

table ShopRefreshExcelTable {
	DataList: [ShopRefreshExcel]; // index 0x0
}

table ShopRefreshExcel {
	Id: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IsLegacy: bool; // index 0x0
	GoodsId: long; // index 0x0
	IsBundle: bool; // index 0x0
	VisibleAmount: long; // index 0x0
	DisplayOrder: long; // index 0x0
	CategoryType: ShopCategoryType; // index 0x0
	RefreshGroup: int; // index 0x0
	Prob: int; // index 0x0
	BuyReportEventName: string; // index 0x0
	DisplayTag: ProductDisplayTag; // index 0x0
}

table SkillExcelTable {
	DataList: [SkillExcel]; // index 0x0
}

table SkillExcel {
	Id: long; // index 0x0
	LocalizeSkillId: uint; // index 0x0
	GroupId: string; // index 0x0
	SkillDataKey: string; // index 0x0
	VisualDataKey: string; // index 0x0
	Level: int; // index 0x0
	SkillCost: int; // index 0x0
	ExtraSkillCost: int; // index 0x0
	EnemySkillCost: int; // index 0x0
	ExtraEnemySkillCost: int; // index 0x0
	NPCSkillCost: int; // index 0x0
	ExtraNPCSkillCost: int; // index 0x0
	BulletType: BulletType; // index 0x0
	StartCoolTime: int; // index 0x0
	CoolTime: int; // index 0x0
	EnemyStartCoolTime: int; // index 0x0
	EnemyCoolTime: int; // index 0x0
	NPCStartCoolTime: int; // index 0x0
	NPCCoolTime: int; // index 0x0
	UseAtg: int; // index 0x0
	RequireCharacterLevel: int; // index 0x0
	RequireLevelUpMaterial: long; // index 0x0
	IconName: string; // index 0x0
	IsShowInfo: bool; // index 0x0
	IsShowSpeechbubble: bool; // index 0x0
	PublicSpeechDuration: int; // index 0x0
	AdditionalToolTipId: long; // index 0x0
	TextureSkillCardForFormConversion: string; // index 0x0
	SkillCardLabelPath: string; // index 0x0
}

table SpecialLobbyIllustExcelTable {
	DataList: [SpecialLobbyIllustExcel]; // index 0x0
}

table SpecialLobbyIllustExcel {
	UniqueId: long; // index 0x0
	DevName: string; // index 0x0
	CharacterCostumeUniqueId: long; // index 0x0
	PrefabName: string; // index 0x0
	SlotTextureName: string; // index 0x0
	RewardTextureName: string; // index 0x0
}

table StrategyObjectBuffDefineExcelTable {
	DataList: [StrategyObjectBuffDefineExcel]; // index 0x0
}

table StrategyObjectBuffDefineExcel {
	StrategyObjectBuffID: long; // index 0x0
	StrategyObjectTurn: int; // index 0x0
	SkillGroupId: string; // index 0x0
	LocalizeCodeId: uint; // index 0x0
	IconPath: string; // index 0x0
}

table StringTestExcelTable {
	DataList: [StringTestExcel]; // index 0x0
}

table StringTestExcel {
	String: [string]; // index 0x0
	sentence1: string; // index 0x0
	Script: string; // index 0x0
}

table SystemMailExcelTable {
	DataList: [SystemMailExcel]; // index 0x0
}

table SystemMailExcel {
	MailType: MailType; // index 0x0
	ExpiredDay: long; // index 0x0
	Sender: string; // index 0x0
	Comment: string; // index 0x0
}

table TacticalSupportSystemExcelTable {
	DataList: [TacticalSupportSystemExcel]; // index 0x0
}

table TacticalSupportSystemExcel {
	Id: long; // index 0x0
	SummonedTime: long; // index 0x0
	DefaultPersonalityId: long; // index 0x0
	CanTargeting: bool; // index 0x0
	CanCover: bool; // index 0x0
	ObstacleUniqueName: string; // index 0x0
	ObstacleCoverRange: long; // index 0x0
	SummonSkilllGroupId: string; // index 0x0
	CrashObstacleOBBWidth: long; // index 0x0
	CrashObstacleOBBHeight: long; // index 0x0
	IsTSSBlockedNodeCheck: bool; // index 0x0
	NumberOfUses: int; // index 0x0
	InventoryOffsetX: float; // index 0x0
	InventoryOffsetY: float; // index 0x0
	InventoryOffsetZ: float; // index 0x0
	InteractionChar: long; // index 0x0
	CharacterInteractionStartDelay: long; // index 0x0
	GetOnStartEffectPath: string; // index 0x0
	GetOnEndEffectPath: string; // index 0x0
	SummonerCharacterId: long; // index 0x0
	InteractionFrame: int; // index 0x0
	TSAInteractionAddDuration: long; // index 0x0
	InteractionStudentExSkillGroupId: string; // index 0x0
	InteractionSkillCardTexture: string; // index 0x0
	InteractionSkillSpine: string; // index 0x0
	RetreatFrame: int; // index 0x0
	DestroyFrame: int; // index 0x0
}

table TacticArenaSimulatorSettingExcelTable {
	DataList: [TacticArenaSimulatorSettingExcel]; // index 0x0
}

table TacticArenaSimulatorSettingExcel {
	Order: long; // index 0x0
	Repeat: long; // index 0x0
	AttackerFrom: ArenaSimulatorServer; // index 0x0
	AttackerUserArenaGroup: long; // index 0x0
	AttackerUserArenaRank: long; // index 0x0
	AttackerPresetGroupId: long; // index 0x0
	AttackerStrikerNum: long; // index 0x0
	AttackerSpecialNum: long; // index 0x0
	DefenderFrom: ArenaSimulatorServer; // index 0x0
	DefenderUserArenaGroup: long; // index 0x0
	DefenderUserArenaRank: long; // index 0x0
	DefenderPresetGroupId: long; // index 0x0
	DefenderStrikerNum: long; // index 0x0
	DefenderSpecialNum: long; // index 0x0
	GroundId: long; // index 0x0
}

table TacticDamageSimulatorSettingExcelTable {
	DataList: [TacticDamageSimulatorSettingExcel]; // index 0x0
}

table TacticDamageSimulatorSettingExcel {
	Order: int; // index 0x0
	Repeat: int; // index 0x0
	TestPreset: long; // index 0x0
	TestBattleTime: long; // index 0x0
	StrikerSquard: long; // index 0x0
	SpecialSquard: long; // index 0x0
	ReplaceCharacterCostRegen: bool; // index 0x0
	ReplaceCostRegenValue: int; // index 0x0
	UseAutoSkill: bool; // index 0x0
	OverrideStreetAdaptation: TerrainAdaptationStat; // index 0x0
	OverrideOutdoorAdaptation: TerrainAdaptationStat; // index 0x0
	OverrideIndoorAdaptation: TerrainAdaptationStat; // index 0x0
	ApplyOverrideAdaptation: bool; // index 0x0
	OverrideFavorLevel: int; // index 0x0
	ApplyOverrideFavorLevel: bool; // index 0x0
	GroundId: long; // index 0x0
	fixedCharacter: [long]; // index 0x0
}

table TacticEntityEffectFilterExcelTable {
	DataList: [TacticEntityEffectFilterExcel]; // index 0x0
}

table TacticEntityEffectFilterExcel {
	TargetEffectName: string; // index 0x0
	ShowEffectToVehicle: bool; // index 0x0
	ShowEffectToBoss: bool; // index 0x0
}

table TacticSimulatorSettingExcelTable {
	DataList: [TacticSimulatorSettingExcel]; // index 0x0
}

table TacticSimulatorSettingExcel {
	GroundId: long; // index 0x0
	FixedEchelonId: long; // index 0x0
}

table TacticSkipExcelTable {
	DataList: [TacticSkipExcel]; // index 0x0
}

table TacticSkipExcel {
	LevelDiff: int; // index 0x0
	HPResult: long; // index 0x0
}

table TacticTimeAttackSimulatorConfigExcelTable {
	DataList: [TacticTimeAttackSimulatorConfigExcel]; // index 0x0
}

table TacticTimeAttackSimulatorConfigExcel {
	Order: long; // index 0x0
	Repeat: long; // index 0x0
	PresetGroupId: long; // index 0x0
	AttackStrikerNum: long; // index 0x0
	AttackSpecialNum: long; // index 0x0
	GeasId: long; // index 0x0
}

table TagExcelTable {
	DataList: [TagExcel]; // index 0x0
}

table TagExcel {
	Furniture: Tag; // index 0x0
	None: Club; // index 0x0
}

table TerrainAdaptationFactorExcelTable {
	DataList: [TerrainAdaptationFactorExcel]; // index 0x0
}

table TerrainAdaptationFactorExcel {
	TerrainAdaptation: StageTopography; // index 0x0
	TerrainAdaptationStat: TerrainAdaptationStat; // index 0x0
	ShotFactor: long; // index 0x0
	BlockFactor: long; // index 0x0
	AccuracyFactor: long; // index 0x0
	DodgeFactor: long; // index 0x0
	AttackPowerFactor: long; // index 0x0
}

table TimeAttackDungeonExcelTable {
	DataList: [TimeAttackDungeonExcel]; // index 0x0
}

table TimeAttackDungeonExcel {
	Id: long; // index 0x0
	TimeAttackDungeonType: TimeAttackDungeonType; // index 0x0
	LocalizeEtcKey: uint; // index 0x0
	IconPath: string; // index 0x0
	InformationGroupID: long; // index 0x0
}

table TimeAttackDungeonGeasExcelTable {
	DataList: [TimeAttackDungeonGeasExcel]; // index 0x0
}

table TimeAttackDungeonGeasExcel {
	Id: long; // index 0x0
	TimeAttackDungeonType: TimeAttackDungeonType; // index 0x0
	LocalizeEtcKey: uint; // index 0x0
	BattleDuration: long; // index 0x0
	ClearDefaultPoint: long; // index 0x0
	ClearTimeWeightPoint: long; // index 0x0
	TimeWeightConst: long; // index 0x0
	Difficulty: int; // index 0x0
	RecommandLevel: int; // index 0x0
	GroundId: long; // index 0x0
	AllyPassiveSkillId: [string]; // index 0x0
	AllyPassiveSkillLevel: [int]; // index 0x0
	enemyPassiveSkillId: [string]; // index 0x0
	enemyPassiveSkillLevel: [int]; // index 0x0
	geasIconPath: [string]; // index 0x0
	geasLocalizeEtcKey: [uint]; // index 0x0
}

table TimeAttackDungeonRewardExcelTable {
	DataList: [TimeAttackDungeonRewardExcel]; // index 0x0
}

table TimeAttackDungeonRewardExcel {
	Id: long; // index 0x0
	RewardMaxPoint: long; // index 0x0
	RewardType: [TimeAttackDungeonRewardType]; // index 0x0
	rewardMinPoint: [long]; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelDefaultAmount: [long]; // index 0x0
	rewardParcelMaxAmount: [long]; // index 0x0
}

table TimeAttackDungeonSeasonManageExcelTable {
	DataList: [TimeAttackDungeonSeasonManageExcel]; // index 0x0
}

table TimeAttackDungeonSeasonManageExcel {
	Id: long; // index 0x0
	StartDate: string; // index 0x0
	EndNoteLabelStartDate: string; // index 0x0
	EndDate: string; // index 0x0
	UISlot: long; // index 0x0
	DungeonId: long; // index 0x0
	DifficultyGeas: [long]; // index 0x0
	TimeAttackDungeonRewardId: long; // index 0x0
	RoomLifeTimeInSeconds: long; // index 0x0
}

table TranscendenceRecipeExcelTable {
	DataList: [TranscendenceRecipeExcel]; // index 0x0
}

table TranscendenceRecipeExcel {
	Id: long; // index 0x0
	DevName: string; // index 0x0
	CostCurrencyType: CurrencyTypes; // index 0x0
	CostCurrencyAmount: long; // index 0x0
	ParcelType: [ParcelType]; // index 0x0
	ParcelId: [long]; // index 0x0
	ParcelAmount: [int]; // index 0x0
}

table TrophyCollectionExcelTable {
	DataList: [TrophyCollectionExcel]; // index 0x0
}

table TrophyCollectionExcel {
	GroupId: long; // index 0x0
	LocalizeCodeId: uint; // index 0x0
	furnitureId: [long]; // index 0x0
}

table VoiceSkillUseExcelTable {
	DataList: [VoiceSkillUseExcel]; // index 0x0
}

table VoiceSkillUseExcel {
	Name: string; // index 0x0
	VoiceHash: [uint]; // index 0x0
}

table WebEventSeasonExcelTable {
	DataList: [WebEventSeasonExcel]; // index 0x0
}

table WebEventSeasonExcel {
	Id: long; // index 0x0
	Enabled: bool; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	LobbyBannerImage: string; // index 0x0
	PopupTitleLocalizeKey: string; // index 0x0
	StageEventUrl: string; // index 0x0
	LiveEventUrl: string; // index 0x0
}

table WeekDungeonExcelTable {
	DataList: [WeekDungeonExcel]; // index 0x0
}

table WeekDungeonExcel {
	StageId: long; // index 0x0
	WeekDungeonType: WeekDungeonType; // index 0x0
	Difficulty: int; // index 0x0
	BattleDuration: long; // index 0x0
	PrevStageId: long; // index 0x0
	StageEnterCostType: [ParcelType]; // index 0x0
	StageEnterCostId: [long]; // index 0x0
	stageEnterCostAmount: [int]; // index 0x0
	GroundId: int; // index 0x0
	StarGoal: [StarGoalType]; // index 0x0
	StarGoalAmount: [int]; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: long; // index 0x0
	StageRewardId: long; // index 0x0
	PlayTimeLimitInSeconds: long; // index 0x0
	BattleRewardExp: long; // index 0x0
	BattleRewardPlayerExp: long; // index 0x0
	GroupBuffID: [long]; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table WeekDungeonFindGiftRewardExcelTable {
	DataList: [WeekDungeonFindGiftRewardExcel]; // index 0x0
}

table WeekDungeonFindGiftRewardExcel {
	StageRewardId: long; // index 0x0
	DevName: string; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
	RewardParcelProbability: [long]; // index 0x0
	DropItemModelPrefabPath: [string]; // index 0x0
}

table WeekDungeonGroupBuffExcelTable {
	DataList: [WeekDungeonGroupBuffExcel]; // index 0x0
}

table WeekDungeonGroupBuffExcel {
	WeekDungeonBuffId: long; // index 0x0
	School: School; // index 0x0
	RecommandLocalizeEtcId: uint; // index 0x0
	FormationLocalizeEtcId: uint; // index 0x0
	SkillGroupId: string; // index 0x0
}

table WeekDungeonOpenScheduleExcelTable {
	DataList: [WeekDungeonOpenScheduleExcel]; // index 0x0
}

table WeekDungeonOpenScheduleExcel {
	WeekDay: WeekDay; // index 0x0
	open: [WeekDungeonType]; // index 0x0
}

table WeekDungeonRewardExcelTable {
	DataList: [WeekDungeonRewardExcel]; // index 0x0
}

table WeekDungeonRewardExcel {
	GroupId: long; // index 0x0
	DungeonType: WeekDungeonType; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
	RewardParcelProbability: long; // index 0x0
	IsDisplayed: bool; // index 0x0
	DropItemModelPrefabPath: string; // index 0x0
}

table WorldRaidBossGroupExcelTable {
	DataList: [WorldRaidBossGroupExcel]; // index 0x0
}

table WorldRaidBossGroupExcel {
	Id: long; // index 0x0
	WorldRaidBossGroupId: long; // index 0x0
	WorldBossName: string; // index 0x0
	WorldBossPopupPortrait: string; // index 0x0
	WorldBossPopupBG: string; // index 0x0
	WorldBossParcelPortrait: string; // index 0x0
	WorldBossListParcel: string; // index 0x0
	WorldBossHP: long; // index 0x0
	WorldBossHPTw: long; // index 0x0
	WorldBossHPAsia: long; // index 0x0
	WorldBossHPNa: long; // index 0x0
	WorldBossHPGlobal: long; // index 0x0
	UIHideBeforeSpawn: bool; // index 0x0
	HideAnotherBossKilled: bool; // index 0x0
	WorldBossClearRewardGroupId: long; // index 0x0
	AnotherBossKilled: [long]; // index 0x0
	EchelonConstraintGroupId: long; // index 0x0
	ExclusiveOperatorBossSpawn: string; // index 0x0
	ExclusiveOperatorBossKill: string; // index 0x0
	ExclusiveOperatorScenarioBattle: string; // index 0x0
	ExclusiveOperatorBossDamaged: string; // index 0x0
	BossGroupOpenCondition: long; // index 0x0
}

table WorldRaidFavorBuffExcelTable {
	DataList: [WorldRaidFavorBuffExcel]; // index 0x0
}

table WorldRaidFavorBuffExcel {
	WorldRaidFavorRank: long; // index 0x0
	WorldRaidFavorRankBonus: long; // index 0x0
}

table WorldRaidSeasonManageExcelTable {
	DataList: [WorldRaidSeasonManageExcel]; // index 0x0
}

table WorldRaidSeasonManageExcel {
	SeasonId: long; // index 0x0
	EventContentId: long; // index 0x0
	EnterTicket: CurrencyTypes; // index 0x0
	WorldRaidLobbyScene: string; // index 0x0
	WorldRaidLobbyBanner: string; // index 0x0
	WorldRaidLobbyBG: string; // index 0x0
	WorldRaidLobbyBannerShow: bool; // index 0x0
	SeasonOpenCondition: long; // index 0x0
	WorldRaidLobbyEnterScenario: long; // index 0x0
	CanPlayNotSeasonTime: bool; // index 0x0
	WorldRaidUniqueThemeLobbyUI: bool; // index 0x0
	WorldRaidUniqueThemeName: string; // index 0x0
	CanWorldRaidGemEnter: bool; // index 0x0
	HideWorldRaidTicketUI: bool; // index 0x0
	HideWorldRaidBossCompleteRewardUI: bool; // index 0x0
	UseWorldRaidCommonToast: bool; // index 0x0
	openRaidBossGroupId: [long]; // index 0x0
	BossSpawnTime: [string]; // index 0x0
	EliminateTime: [string]; // index 0x0
	ScenarioOutputConditionId: [long]; // index 0x0
	conditionScenarioGroupid: [long]; // index 0x0
	WorldRaidMapEnterOperator: string; // index 0x0
	UseFavorRankBuff: bool; // index 0x0
}

table WorldRaidStageExcelTable {
	DataList: [WorldRaidStageExcel]; // index 0x0
}

table WorldRaidStageExcel {
	Id: long; // index 0x0
	UseBossIndex: bool; // index 0x0
	UseBossAIPhaseSync: bool; // index 0x0
	WorldRaidBossGroupId: long; // index 0x0
	PortraitPath: string; // index 0x0
	BGPath: string; // index 0x0
	RaidCharacterId: long; // index 0x0
	BossCharacterId: [long]; // index 0x0
	AssistCharacterLimitCount: long; // index 0x0
	WorldRaidDifficulty: WorldRaidDifficulty; // index 0x0
	DifficultyOpenCondition: bool; // index 0x0
	RaidEnterAmount: long; // index 0x0
	ReEnterAmount: long; // index 0x0
	BattleDuration: long; // index 0x0
	GroundId: long; // index 0x0
	RaidBattleEndRewardGroupId: long; // index 0x0
	RaidRewardGroupId: long; // index 0x0
	battleReadyTimelinePath: [string]; // index 0x0
	battleReadyTimelinePhaseStart: [int]; // index 0x0
	BattleReadyTimelinePhaseEnd: [int]; // index 0x0
	VictoryTimelinePath: string; // index 0x0
	PhaseChangeTimelinePath: string; // index 0x0
	TimeLinePhase: long; // index 0x0
	EnterScenarioKey: long; // index 0x0
	ClearScenarioKey: long; // index 0x0
	UseFixedEchelon: bool; // index 0x0
	FixedEchelonId: long; // index 0x0
	IsRaidScenarioBattle: bool; // index 0x0
	ShowSkillCard: bool; // index 0x0
	BossBGInfoKey: uint; // index 0x0
	DamageToWorldBoss: long; // index 0x0
	allyPassiveSkill: [string]; // index 0x0
	AllyPassiveSkillLevel: [int]; // index 0x0
	SaveCurrentLocalBossHP: bool; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table WorldRaidStageRewardExcelTable {
	DataList: [WorldRaidStageRewardExcel]; // index 0x0
}

table WorldRaidStageRewardExcel {
	GroupId: long; // index 0x0
	IsClearStageRewardHideInfo: bool; // index 0x0
	ClearStageRewardProb: long; // index 0x0
	ClearStageRewardParcelType: ParcelType; // index 0x0
	ClearStageRewardParcelUniqueID: long; // index 0x0
	ClearStageRewardParcelUniqueName: string; // index 0x0
	ClearStageRewardAmount: long; // index 0x0
}

table AccountLevelExcel {
	Id: long; // index 0x0
	Level: long; // index 0x0
	Exp: long; // index 0x0
	NewbieExpRatio: int; // index 0x0
	CloseInterval: int; // index 0x0
	APAutoChargeMax: long; // index 0x0
	NeedReportEvent: bool; // index 0x0
}

table AssistEchelonTypeConvertExcel {
	Contents: EchelonType; // index 0x0
	ConvertTo: EchelonType; // index 0x0
}

table AttendanceExcel {
	Id: long; // index 0x0
	Type: AttendanceType; // index 0x0
	CountdownPrefab: string; // index 0x0
	DisplayOrder: long; // index 0x0
	AccountType: AccountState; // index 0x0
	AccountLevelLimit: long; // index 0x0
	Title: string; // index 0x0
	InfomationLocalizeCode: string; // index 0x0
	CountRule: AttendanceCountRule; // index 0x0
	CountReset: AttendanceResetType; // index 0x0
	BookSize: long; // index 0x0
	StartDate: string; // index 0x0
	StartableEndDate: string; // index 0x0
	EndDate: string; // index 0x0
	ExpiryDate: long; // index 0x0
	MailType: MailType; // index 0x0
	DialogCategory: DialogCategory; // index 0x0
	TitleImagePath: string; // index 0x0
	DecorationImagePath: string; // index 0x0
	DecorationGarlandImagePath: string; // index 0x0
}

table AttendanceRewardExcel {
	AttendanceId: long; // index 0x0
	Day: long; // index 0x0
	RewardIcon: string; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardId: [long]; // index 0x0
	RewardAmount: [long]; // index 0x0
}

table AudioAnimatorExcel {
	ControllerNameHash: uint; // index 0x0
	VoiceNamePrefix: string; // index 0x0
	StateNameHash: uint; // index 0x0
	StateName: string; // index 0x0
	IgnoreInterruptDelay: bool; // index 0x0
	IgnoreInterruptPlay: bool; // index 0x0
	Volume: float; // index 0x0
	Delay: float; // index 0x0
	RandomPitchMin: int; // index 0x0
	RandomPitchMax: int; // index 0x0
	AudioPriority: int; // index 0x0
	AudioClipPath: [string]; // index 0x0
	VoiceHash: [uint]; // index 0x0
}

table BGMExcel {
	Id: long; // index 0x0
	Nation: [Nation]; // index 0x0
	Path: [string]; // index 0x0
	Volume: [float]; // index 0x0
	LoopStartTime: [float]; // index 0x0
	LoopEndTime: [float]; // index 0x0
	LoopTranstionTime: [float]; // index 0x0
	LoopOffsetTime: [float]; // index 0x0
}

table BGMRaidExcel {
	StageId: long; // index 0x0
	PhaseIndex: long; // index 0x0
	BGMId: long; // index 0x0
}

table BGMUIExcel {
	UIPrefab: uint; // index 0x0
	BGMId: long; // index 0x0
	BGMId2nd: long; // index 0x0
	BGMId3rd: long; // index 0x0
	EventContentId: long; // index 0x0
}

table BGM_GlobalExcel {
	GroupBGMId: long; // index 0x0
	BGMIdKr: long; // index 0x0
	BGMIdJp: long; // index 0x0
	BGMIdTh: long; // index 0x0
	BGMIdTw: long; // index 0x0
	BGMIdEn: long; // index 0x0
}

table CameraExcel {
	UniqueId: long; // index 0x0
	MinDistance: float; // index 0x0
	MaxDistance: float; // index 0x0
	RotationX: float; // index 0x0
	RotationY: float; // index 0x0
	MoveInstantly: bool; // index 0x0
	MoveInstantlyRotationSave: bool; // index 0x0
	LeftMargin: float; // index 0x0
	BottomMargin: float; // index 0x0
	IgnoreEnemies: bool; // index 0x0
	UseRailPointCompensation: bool; // index 0x0
}

table CharacterDialogEmojiExcel {
	GroupId: long; // index 0x0
	TargetIndex: int; // index 0x0
	DialogType: string; // index 0x0
	Duration: long; // index 0x0
	DurationKr: long; // index 0x0
	HideUI: bool; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
}

table CharacterDialogEventExcel {
	CostumeUniqueId: long; // index 0x0
	OriginalCharacterId: long; // index 0x0
	DisplayOrder: long; // index 0x0
	EventID: long; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	DialogCategory: DialogCategory; // index 0x0
	DialogCondition: DialogCondition; // index 0x0
	DialogConditionDetail: DialogConditionDetail; // index 0x0
	DialogConditionDetailValue: long; // index 0x0
	GroupId: long; // index 0x0
	DialogType: DialogType; // index 0x0
	ActionName: string; // index 0x0
	Duration: long; // index 0x0
	DurationKr: long; // index 0x0
	AnimationName: string; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
	VoiceId: [uint]; // index 0x0
	CollectionVisible: bool; // index 0x0
	CVCollectionType: CVCollectionType; // index 0x0
	CVUnlockScenarioType: CVUnlockScenarioType; // index 0x0
	UnlockEventSeason: long; // index 0x0
	ScenarioGroupId: long; // index 0x0
	LocalizeCVGroup: string; // index 0x0
}

table CharacterDialogExcel {
	CharacterId: long; // index 0x0
	CostumeUniqueId: long; // index 0x0
	DisplayOrder: long; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	DialogCategory: DialogCategory; // index 0x0
	DialogCondition: DialogCondition; // index 0x0
	Anniversary: Anniversary; // index 0x0
	StartDate: string; // index 0x0
	EndDate: string; // index 0x0
	GroupId: long; // index 0x0
	DialogType: DialogType; // index 0x0
	ActionName: string; // index 0x0
	Duration: long; // index 0x0
	DurationKr: long; // index 0x0
	AnimationName: string; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
	VoiceId: [uint]; // index 0x0
	ApplyPosition: bool; // index 0x0
	PosX: float; // index 0x0
	PosY: float; // index 0x0
	CollectionVisible: bool; // index 0x0
	CVCollectionType: CVCollectionType; // index 0x0
	UnlockFavorRank: long; // index 0x0
	UnlockEquipWeapon: bool; // index 0x0
	LocalizeCVGroup: string; // index 0x0
	TeenMode: bool; // index 0x0
}

table CharacterDialogSubtitleExcel {
	LocalizeCVGroup: string; // index 0x0
	CharacterId: long; // index 0x0
	TLMID: string; // index 0x0
	Duration: long; // index 0x0
	DurationKr: long; // index 0x0
	Separate: bool; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
}

table CharacterGearExcel {
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	StatLevelUpType: StatLevelUpType; // index 0x0
	Tier: long; // index 0x0
	NextTierEquipment: long; // index 0x0
	RecipeId: long; // index 0x0
	OpenFavorLevel: long; // index 0x0
	MaxLevel: long; // index 0x0
	LearnSkillSlot: string; // index 0x0
	StatType: [EquipmentOptionType]; // index 0x0
	MinStatValue: [long]; // index 0x0
	MaxStatValue: [long]; // index 0x0
	Icon: string; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	Tags: [Tag]; // index 0x0
}

table CharacterGearLevelExcel {
	Level: int; // index 0x0
	TierLevelExp: [long]; // index 0x0
	TotalExp: [long]; // index 0x0
}

table CharacterPotentialExcel {
	Id: long; // index 0x0
	PotentialStatGroupId: long; // index 0x0
	PotentialStatBonusRateType: PotentialStatBonusRateType; // index 0x0
	IsUnnecessaryStat: bool; // index 0x0
}

table CharacterPotentialRewardExcel {
	Id: long; // index 0x0
	RequirePotentialStatType: [PotentialStatBonusRateType]; // index 0x0
	RequirePotentialStatLevel: [long]; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardId: long; // index 0x0
	RewardAmount: int; // index 0x0
}

table CharacterPotentialStatExcel {
	PotentialStatGroupId: long; // index 0x0
	PotentialLevel: int; // index 0x0
	RecipeId: long; // index 0x0
	StatBonusRate: long; // index 0x0
}

table CharacterVoiceExcel {
	CharacterVoiceUniqueId: long; // index 0x0
	CharacterVoiceGroupId: long; // index 0x0
	VoiceHash: uint; // index 0x0
	OnlyOne: bool; // index 0x0
	Priority: int; // index 0x0
	DisplayOrder: long; // index 0x0
	CollectionVisible: bool; // index 0x0
	CVCollectionType: CVCollectionType; // index 0x0
	UnlockFavorRank: long; // index 0x0
	LocalizeCVGroup: string; // index 0x0
	Nation: [Nation]; // index 0x0
	Volume: [float]; // index 0x0
	Delay: [float]; // index 0x0
	Path: [string]; // index 0x0
}

table CharacterVoiceSubtitleExcel {
	LocalizeCVGroup: string; // index 0x0
	CharacterVoiceGroupId: long; // index 0x0
	TLMID: string; // index 0x0
	Duration: long; // index 0x0
	Durationkr: long; // index 0x0
	Separate: bool; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
}

table ClanAssistSlotExcel {
	SlotId: long; // index 0x0
	EchelonType: EchelonType; // index 0x0
	SlotNumber: long; // index 0x0
	AssistTermRewardPeriodFromSec: long; // index 0x0
	AssistRewardLimit: long; // index 0x0
	AssistRentRewardDailyMaxCount: long; // index 0x0
	AssistRentalFeeAmount: long; // index 0x0
	AssistRentalFeeAmountStranger: long; // index 0x0
}

table ClanChattingEmojiExcel {
	Id: long; // index 0x0
	TabGroupId: int; // index 0x0
	DisplayOrder: int; // index 0x0
	ImagePathKr: string; // index 0x0
	ImagePathJp: string; // index 0x0
	ImagePathTh: string; // index 0x0
	ImagePathTw: string; // index 0x0
	ImagePathEn: string; // index 0x0
}

table ClanRewardExcel {
	ClanRewardType: ClanRewardType; // index 0x0
	EchelonType: EchelonType; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
}

table CombatEmojiExcel {
	UniqueId: long; // index 0x0
	EmojiEvent: EmojiEvent; // index 0x0
	OrderOfPriority: int; // index 0x0
	EmojiDuration: bool; // index 0x0
	EmojiReversal: bool; // index 0x0
	EmojiTurnOn: bool; // index 0x0
	ShowEmojiDelay: int; // index 0x0
	ShowDefaultBG: bool; // index 0x0
}

table ContentEnterCostReduceExcel {
	EnterCostReduceGroupId: long; // index 0x0
	ContentType: ContentType; // index 0x0
	StageId: long; // index 0x0
	ReduceEnterCostType: ParcelType; // index 0x0
	ReduceEnterCostId: long; // index 0x0
	ReduceAmount: long; // index 0x0
}

table ContentSpoilerPopupExcel {
	ContentType: ContentType; // index 0x0
	SpoilerPopupTitle: string; // index 0x0
	SpoilerPopupDescription: string; // index 0x0
	IsWarningPopUp: bool; // index 0x0
	ConditionScenarioModeId: long; // index 0x0
}

table ContentsScenarioExcel {
	Id: uint; // index 0x0
	LocalizeId: uint; // index 0x0
	DisplayOrder: int; // index 0x0
	ScenarioContentType: ScenarioContentType; // index 0x0
	ScenarioGroupId: [long]; // index 0x0
}

table ContentsShortcutExcel {
	UniqueId: long; // index 0x0
	ContentType: ContentType; // index 0x0
	EventContentId: long; // index 0x0
	ScenarioModeVolume: long; // index 0x0
	ScenarioModeChapter: long; // index 0x0
	ShortcutOpenTime: string; // index 0x0
	ShortcutCloseTime: string; // index 0x0
	ConditionContentId: long; // index 0x0
	ConquestMapDifficulty: StageDifficulty; // index 0x0
	ConquestStepIndex: int; // index 0x0
	ShortcutContentId: long; // index 0x0
	ShortcutUIName: [string]; // index 0x0
	Localize: string; // index 0x0
}

table CurrencyExcel {
	ID: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	CurrencyType: CurrencyTypes; // index 0x0
	CurrencyName: string; // index 0x0
	Icon: string; // index 0x0
	Rarity: Rarity; // index 0x0
	AutoChargeMsc: int; // index 0x0
	AutoChargeAmount: int; // index 0x0
	CurrencyOverChargeType: CurrencyOverChargeType; // index 0x0
	CurrencyAdditionalChargeType: CurrencyAdditionalChargeType; // index 0x0
	ChargeLimit: long; // index 0x0
	OverChargeLimit: long; // index 0x0
	SpriteName: string; // index 0x0
	DailyRefillType: DailyRefillType; // index 0x0
	DailyRefillAmount: long; // index 0x0
	DailyRefillTime: [long]; // index 0x0
	ExpirationDateTime: string; // index 0x0
	ExpirationNotifyDateIn: int; // index 0x0
	ExpiryChangeParcelType: ParcelType; // index 0x0
	ExpiryChangeId: long; // index 0x0
	ExpiryChangeAmount: long; // index 0x0
}

table EmblemExcel {
	Id: long; // index 0x0
	Category: EmblemCategory; // index 0x0
	Rarity: Rarity; // index 0x0
	DisplayOrder: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	LocalizeCodeId: uint; // index 0x0
	UseAtLocalizeId: long; // index 0x0
	EmblemTextVisible: bool; // index 0x0
	IconPath: string; // index 0x0
	EmblemIconPath: string; // index 0x0
	EmblemIconNumControl: int; // index 0x0
	EmblemIconBGPath: string; // index 0x0
	EmblemBGPathJp: string; // index 0x0
	EmblemBGPathKr: string; // index 0x0
	EmblemBGPathTh: string; // index 0x0
	EmblemBGPathTw: string; // index 0x0
	EmblemBGPathEn: string; // index 0x0
	DisplayType: EmblemDisplayType; // index 0x0
	DisplayStartDate: string; // index 0x0
	DisplayEndDate: string; // index 0x0
	DislpayFavorLevel: int; // index 0x0
	CheckPassType: EmblemCheckPassType; // index 0x0
	EmblemParameter: long; // index 0x0
	CheckPassCount: long; // index 0x0
}

table EventContentNotifyExcel {
	Id: int; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IconPath: string; // index 0x0
	EventNotifyType: EventNotifyType; // index 0x0
	EventTargetType: EventTargetType; // index 0x0
	ShortcutEventTargetType: EventTargetType; // index 0x0
	IsShortcutEnable: bool; // index 0x0
}

table EventContentSpoilerPopupExcel {
	EventContentId: long; // index 0x0
	SpoilerPopupTitle: string; // index 0x0
	SpoilerPopupDescription: string; // index 0x0
	IsWarningPopUp: bool; // index 0x0
	ConditionScenarioModeId: long; // index 0x0
}

table EventContentTreasureCellRewardExcel {
	Id: long; // index 0x0
	LocalizeCodeID: string; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table EventContentTreasureExcel {
	EventContentId: long; // index 0x0
	TitleLocalize: string; // index 0x0
	LoopRound: int; // index 0x0
	UsePrefabName: string; // index 0x0
	TreasureBGImagePath: string; // index 0x0
}

table EventContentTreasureRewardExcel {
	Id: long; // index 0x0
	LocalizeCodeID: string; // index 0x0
	CellUnderImageWidth: int; // index 0x0
	CellUnderImageHeight: int; // index 0x0
	HiddenImage: bool; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
	CellUnderImagePath: string; // index 0x0
	TreasureSmallImagePath: string; // index 0x0
	TreasureSizeIconPath: string; // index 0x0
}

table EventContentTreasureRoundExcel {
	EventContentId: long; // index 0x0
	TreasureRound: int; // index 0x0
	TreasureRoundSize: [int]; // index 0x0
	CellVisualSortUnstructed: bool; // index 0x0
	CellCheckGoodsId: long; // index 0x0
	CellRewardId: long; // index 0x0
	RewardID: [long]; // index 0x0
	RewardAmount: [int]; // index 0x0
	TreasureCellImagePath: string; // index 0x0
}

table FarmingDungeonLocationManageExcel {
	FarmingDungeonLocationId: long; // index 0x0
	ContentType: ContentType; // index 0x0
	WeekDungeonType: WeekDungeonType; // index 0x0
	SchoolDungeonType: SchoolDungeonType; // index 0x0
	Order: long; // index 0x0
	OpenStartDateTime: string; // index 0x0
	OpenEndDateTime: string; // index 0x0
	LocationButtonImagePath: string; // index 0x0
	LocalizeCodeTitle: uint; // index 0x0
	LocalizeCodeInfo: uint; // index 0x0
}

table FavorLevelExcel {
	Level: long; // index 0x0
	ExpType: [long]; // index 0x0
}

table FavorLevelRewardExcel {
	CharacterId: long; // index 0x0
	FavorLevel: long; // index 0x0
	StatType: [EquipmentOptionType]; // index 0x0
	StatValue: [long]; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardAmount: [long]; // index 0x0
}

table FixedEchelonSettingExcel {
	FixedEchelonID: long; // index 0x0
	EchelonSceneSkip: bool; // index 0x0
	MainLeaderSlot: int; // index 0x0
	MainCharacterID: [long]; // index 0x0
	MainLevel: [int]; // index 0x0
	MainGrade: [int]; // index 0x0
	MainExSkillLevel: [int]; // index 0x0
	MainNoneExSkillLevel: [int]; // index 0x0
	MainEquipment1Tier: [int]; // index 0x0
	MainEquipment1Level: [int]; // index 0x0
	MainEquipment2Tier: [int]; // index 0x0
	MainEquipment2Level: [int]; // index 0x0
	MainEquipment3Tier: [int]; // index 0x0
	MainEquipment3Level: [int]; // index 0x0
	MainCharacterWeaponGrade: [int]; // index 0x0
	MainCharacterWeaponLevel: [int]; // index 0x0
	MainCharacterGearTier: [int]; // index 0x0
	MainCharacterGearLevel: [int]; // index 0x0
	SupportCharacterID: [long]; // index 0x0
	SupportLevel: [int]; // index 0x0
	SupportGrade: [int]; // index 0x0
	SupportExSkillLevel: [int]; // index 0x0
	SupportNoneExSkillLevel: [int]; // index 0x0
	SupportEquipment1Tier: [int]; // index 0x0
	SupportEquipment1Level: [int]; // index 0x0
	SupportEquipment2Tier: [int]; // index 0x0
	SupportEquipment2Level: [int]; // index 0x0
	SupportEquipment3Tier: [int]; // index 0x0
	SupportEquipment3Level: [int]; // index 0x0
	SupportCharacterWeaponGrade: [int]; // index 0x0
	SupportCharacterWeaponLevel: [int]; // index 0x0
	SupportCharacterGearTier: [int]; // index 0x0
	SupportCharacterGearLevel: [int]; // index 0x0
	InteractionTSCharacterId: long; // index 0x0
}

table FormationLocationExcel {
	Id: long; // index 0x0
	GroupID: long; // index 0x0
	SlotZ: [float]; // index 0x0
	SlotX: [float]; // index 0x0
}

table GroundExcel {
	Id: long; // index 0x0
	StageFileName: [string]; // index 0x0
	GroundSceneName: string; // index 0x0
	FormationGroupId: long; // index 0x0
	StageTopography: StageTopography; // index 0x0
	EnemyBulletType: BulletType; // index 0x0
	EnemyArmorType: ArmorType; // index 0x0
	LevelNPC: long; // index 0x0
	LevelMinion: long; // index 0x0
	LevelElite: long; // index 0x0
	LevelChampion: long; // index 0x0
	LevelBoss: long; // index 0x0
	ObstacleLevel: long; // index 0x0
	GradeNPC: long; // index 0x0
	GradeMinion: long; // index 0x0
	GradeElite: long; // index 0x0
	GradeChampion: long; // index 0x0
	GradeBoss: long; // index 0x0
	PlayerSightPointAdd: long; // index 0x0
	PlayerSightPointRate: long; // index 0x0
	PlayerAttackRangeAdd: long; // index 0x0
	PlayerAttackRangeRate: long; // index 0x0
	EnemySightPointAdd: long; // index 0x0
	EnemySightPointRate: long; // index 0x0
	EnemyAttackRangeAdd: long; // index 0x0
	EnemyAttackRangeRate: long; // index 0x0
	PlayerSkillRangeAdd: long; // index 0x0
	PlayerSkillRangeRate: long; // index 0x0
	EnemySkillRangeAdd: long; // index 0x0
	EnemySkillRangeRate: long; // index 0x0
	PlayerMinimumPositionGapRate: long; // index 0x0
	EnemyMinimumPositionGapRate: long; // index 0x0
	PlayerSightRangeMax: bool; // index 0x0
	EnemySightRangeMax: bool; // index 0x0
	TSSAirUnitHeight: long; // index 0x0
	IsPhaseBGM: bool; // index 0x0
	BGMId: long; // index 0x0
	WarningUI: bool; // index 0x0
	TSSHatchOpen: bool; // index 0x0
	ForcedTacticSpeed: TacticSpeed; // index 0x0
	ForcedSkillUse: TacticSkillUse; // index 0x0
	ShowNPCSkillCutIn: ShowSkillCutIn; // index 0x0
	ImmuneHitBeforeTimeOutEnd: bool; // index 0x0
	UIBattleHideFromScratch: bool; // index 0x0
	BattleReadyTimelinePath: string; // index 0x0
	BeforeVictoryTimelinePath: string; // index 0x0
	SkipBattleEnd: bool; // index 0x0
	HideNPCWhenBattleEnd: bool; // index 0x0
	CoverPointOff: bool; // index 0x0
	UIHpScale: float; // index 0x0
	UIEmojiScale: float; // index 0x0
	UISkillMainLogScale: float; // index 0x0
	AllyPassiveSkillId: [string]; // index 0x0
	AllyPassiveSkillLevel: [int]; // index 0x0
	EnemyPassiveSkillId: [string]; // index 0x0
	EnemyPassiveSkillLevel: [int]; // index 0x0
}

table GroundModuleRewardExcel {
	GroupId: uint; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
	RewardParcelProbability: long; // index 0x0
	IsDisplayed: bool; // index 0x0
	DropItemModelPrefabPath: string; // index 0x0
}

table IdCardBackgroundExcel {
	Id: long; // index 0x0
	Rarity: Rarity; // index 0x0
	DisplayOrder: long; // index 0x0
	CollectionVisible: bool; // index 0x0
	IsDefault: bool; // index 0x0
	BgPath: string; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	Icon: string; // index 0x0
}

table InformationExcel {
	GroupID: long; // index 0x0
	PageName: string; // index 0x0
	IsPcBuild: bool; // index 0x0
	LocalizeCodeId: string; // index 0x0
	TutorialParentName: [string]; // index 0x0
	UIName: [string]; // index 0x0
}

table LoadingImageExcel {
	ID: long; // index 0x0
	ImagePathKr: string; // index 0x0
	ImagePathJp: string; // index 0x0
	DisplayWeight: int; // index 0x0
	ImagePathTh: string; // index 0x0
	ImagePathTw: string; // index 0x0
	ImagePathEn: string; // index 0x0
}

table LocalizeCharProfileChangeExcel {
	CharacterId: long; // index 0x0
	ScenarioModeId: long; // index 0x0
	ChangeCharacterID: long; // index 0x0
}

table LocalizeCodeInBuildExcel {
	Key: uint; // index 0x0
	kr: string; // index 0x0
	Jp: string; // index 0x0
	Th: string; // index 0x0
	Tw: string; // index 0x0
	En: string; // index 0x0
}

table LocalizeErrorExcel {
	Key: uint; // index 0x0
	ErrorLevel: WebAPIErrorLevel; // index 0x0
	Kr: string; // index 0x0
	Jp: string; // index 0x0
	Th: string; // index 0x0
	Tw: string; // index 0x0
	En: string; // index 0x0
}

table LocalizeEtcExcel {
	Key: uint; // index 0x0
	NameKr: string; // index 0x0
	DescriptionKr: string; // index 0x0
	NameJp: string; // index 0x0
	DescriptionJp: string; // index 0x0
	NameTh: string; // index 0x0
	DescriptionTh: string; // index 0x0
	NameTw: string; // index 0x0
	DescriptionTw: string; // index 0x0
	NameEn: string; // index 0x0
	DescriptionEn: string; // index 0x0
}

table LocalizeExcel {
	Key: uint; // index 0x0
	kr: string; // index 0x0
	Jp: string; // index 0x0
	Th: string; // index 0x0
	Tw: string; // index 0x0
	En: string; // index 0x0
}

table LocalizeSkillExcel {
	Key: uint; // index 0x0
	NameKr: string; // index 0x0
	DescriptionKr: string; // index 0x0
	SkillInvokeLocalizeKr: string; // index 0x0
	NameJp: string; // index 0x0
	DescriptionJp: string; // index 0x0
	SkillInvokeLocalizeJp: string; // index 0x0
	NameTh: string; // index 0x0
	DescriptionTh: string; // index 0x0
	SkillInvokeLocalizeTh: string; // index 0x0
	NameTw: string; // index 0x0
	DescriptionTw: string; // index 0x0
	SkillInvokeLocalizeTw: string; // index 0x0
	NameEn: string; // index 0x0
	DescriptionEn: string; // index 0x0
	SkillInvokeLocalizeEn: string; // index 0x0
}

table MemoryLobbyExcel {
	Id: long; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	CharacterId: long; // index 0x0
	PrefabName: string; // index 0x0
	MemoryLobbyCategory: MemoryLobbyCategory; // index 0x0
	SlotTextureName: string; // index 0x0
	RewardTextureName: string; // index 0x0
	BGMId: long; // index 0x0
	AudioClipJp: string; // index 0x0
	AudioClipKr: string; // index 0x0
	AudioClipTh: string; // index 0x0
	AudioClipTw: string; // index 0x0
	AudioClipEn: string; // index 0x0
}

table MemoryLobby_GlobalExcel {
	Id: long; // index 0x0
	CharacterId: long; // index 0x0
	PrefabNameKr: string; // index 0x0
	PrefabNameTw: string; // index 0x0
	PrefabNameAsia: string; // index 0x0
	PrefabNameNa: string; // index 0x0
	PrefabNameGlobal: string; // index 0x0
	PrefabNameTeen: string; // index 0x0
}

table MessagePopupExcel {
	StringId: uint; // index 0x0
	MessagePopupLayout: MessagePopupLayout; // index 0x0
	OrderType: MessagePopupImagePositionType; // index 0x0
	Image: string; // index 0x0
	TitleText: uint; // index 0x0
	SubTitleText: uint; // index 0x0
	MessageText: uint; // index 0x0
	ConditionText: [uint]; // index 0x0
	DisplayXButton: bool; // index 0x0
	Button: [MessagePopupButtonType]; // index 0x0
	ButtonText: [uint]; // index 0x0
	ButtonCommand: [string]; // index 0x0
	ButtonParameter: [string]; // index 0x0
}

table MiniGameDefenseCharacterBanExcel {
	EventContentId: long; // index 0x0
	CharacterId: long; // index 0x0
}

table MiniGameDefenseFixedStatExcel {
	MinigameDefenseFixedStatId: long; // index 0x0
	Level: int; // index 0x0
	Grade: int; // index 0x0
	ExSkillLevel: int; // index 0x0
	NoneExSkillLevel: int; // index 0x0
	Equipment1Tier: int; // index 0x0
	Equipment1level: int; // index 0x0
	Equipment2Tier: int; // index 0x0
	Equipment2level: int; // index 0x0
	Equipment3Tier: int; // index 0x0
	Equipment3level: int; // index 0x0
	CharacterWeaponGrade: int; // index 0x0
	CharacterWeaponLevel: int; // index 0x0
	CharacterGearTier: int; // index 0x0
	CharacterGearLevel: int; // index 0x0
}

table MiniGameDefenseInfoExcel {
	EventContentId: long; // index 0x0
	DefenseBattleParcelType: ParcelType; // index 0x0
	DefenseBattleParcelId: long; // index 0x0
	DefenseBattleMultiplierMax: long; // index 0x0
	DisableRootMotion: bool; // index 0x0
}

table MiniGameDefenseStageExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	EventContentId: long; // index 0x0
	StageDifficulty: StageDifficulty; // index 0x0
	StageDifficultyLocalize: uint; // index 0x0
	StageNumber: int; // index 0x0
	StageDisplay: int; // index 0x0
	PrevStageId: long; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
	BattleDuration: long; // index 0x0
	StageEnterCostType: ParcelType; // index 0x0
	StageEnterCostId: long; // index 0x0
	StageEnterCostAmount: int; // index 0x0
	EventContentStageRewardId: long; // index 0x0
	EnterScenarioGroupId: [long]; // index 0x0
	ClearScenarioGroupId: [long]; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: int; // index 0x0
	GroundID: long; // index 0x0
	ContentType: ContentType; // index 0x0
	StarGoal: [StarGoalType]; // index 0x0
	StarGoalAmount: [int]; // index 0x0
	DefenseFormationBGPrefab: string; // index 0x0
	DefenseFormationBGPrefabScale: float; // index 0x0
	FixedEchelon: long; // index 0x0
	MininageDefenseFixedStatId: long; // index 0x0
	StageHint: uint; // index 0x0
}

table MiniGameDreamCollectionScenarioExcel {
	Id: long; // index 0x0
	IsSkip: bool; // index 0x0
	EventContentId: long; // index 0x0
	Parameter: [DreamMakerParameterType]; // index 0x0
	ParameterAmount: [long]; // index 0x0
	ScenarioGroupId: long; // index 0x0
}

table MiniGameDreamDailyPointExcel {
	UniqueId: long; // index 0x0
	EventContentId: long; // index 0x0
	TotalParameterMin: long; // index 0x0
	TotalParameterMax: long; // index 0x0
	DailyPointCoefficient: long; // index 0x0
	DailyPointCorrectionValue: long; // index 0x0
}

table MiniGameDreamEndingExcel {
	EventContentId: long; // index 0x0
	EndingId: long; // index 0x0
	DreamMakerEndingType: DreamMakerEndingType; // index 0x0
	Order: int; // index 0x0
	ScenarioGroupId: long; // index 0x0
	EndingCondition: [DreamMakerEndingCondition]; // index 0x0
	EndingConditionValue: [long]; // index 0x0
}

table MiniGameDreamEndingRewardExcel {
	EventContentId: long; // index 0x0
	EndingId: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	DreamMakerEndingRewardType: DreamMakerEndingRewardType; // index 0x0
	DreamMakerEndingType: DreamMakerEndingType; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table MiniGameDreamInfoExcel {
	EventContentId: long; // index 0x0
	DreamMakerMultiplierCondition: DreamMakerMultiplierCondition; // index 0x0
	DreamMakerMultiplierConditionValue: long; // index 0x0
	DreamMakerMultiplierMax: long; // index 0x0
	DreamMakerDays: long; // index 0x0
	DreamMakerActionPoint: long; // index 0x0
	DreamMakerParcelType: ParcelType; // index 0x0
	DreamMakerParcelId: long; // index 0x0
	DreamMakerDailyPointParcelType: ParcelType; // index 0x0
	DreamMakerDailyPointId: long; // index 0x0
	DreamMakerParameterTransfer: long; // index 0x0
	ScheduleCostGoodsId: long; // index 0x0
	LobbyBGMChangeScenarioId: long; // index 0x0
}

table MiniGameDreamParameterExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	ParameterType: DreamMakerParameterType; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IconPath: string; // index 0x0
	ParameterBase: long; // index 0x0
	ParameterBaseMax: long; // index 0x0
	ParameterMin: long; // index 0x0
	ParameterMax: long; // index 0x0
}

table MiniGameDreamReplayScenarioExcel {
	EventContentId: long; // index 0x0
	ScenarioGroupId: long; // index 0x0
	Order: long; // index 0x0
	ReplaySummaryTitleLocalize: uint; // index 0x0
	ReplaySummaryLocalizeScenarioId: uint; // index 0x0
	ReplayScenarioResource: string; // index 0x0
	IsReplayScenarioHorizon: bool; // index 0x0
}

table MiniGameDreamScheduleExcel {
	EventContentId: long; // index 0x0
	DreamMakerScheduleGroupId: long; // index 0x0
	DisplayOrder: long; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	IconPath: string; // index 0x0
	LoadingResource01: string; // index 0x0
	LoadingResource02: string; // index 0x0
	AnimationName: string; // index 0x0
}

table MiniGameDreamScheduleResultExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	DreamMakerResult: DreamMakerResult; // index 0x0
	DreamMakerScheduleGroup: long; // index 0x0
	Prob: int; // index 0x0
	RewardParameter: [DreamMakerParameterType]; // index 0x0
	RewardParameterOperationType: [DreamMakerParamOperationType]; // index 0x0
	RewardParameterAmount: [long]; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
}

table MiniGameDreamTimelineExcel {
	Id: long; // index 0x0
	EventContentId: long; // index 0x0
	GroupId: long; // index 0x0
	DreamMakerDays: long; // index 0x0
	DreamMakerActionPoint: long; // index 0x0
	EnterScenarioGroupId: long; // index 0x0
	Bgm: long; // index 0x0
	ArtLevelPath: string; // index 0x0
	DesignLevelPath: string; // index 0x0
}

table MinigameDreamVoiceExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	VoiceCondition: DreamMakerVoiceCondition; // index 0x0
	VoiceClip: uint; // index 0x0
}

table MiniGameRoadPuzzleAdditionalRewardExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
}

table MiniGameRoadPuzzleInfoExcel {
	EventContentId: long; // index 0x0
	EventUseCostType: ParcelType; // index 0x0
	EventUseCostId: long; // index 0x0
	CostGoodsId: long; // index 0x0
	RailSetRewardId: long; // index 0x0
	InstantClearRound: int; // index 0x0
}

table MinigameRoadPuzzleMapExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	MapGroupId: long; // index 0x0
	Map: string; // index 0x0
	MapBG: string; // index 0x0
	BGMId: long; // index 0x0
	AvailableRailTile: [long]; // index 0x0
	AvailableRailTileAmount: [long]; // index 0x0
	OriginalTileCount: [long]; // index 0x0
	TrainSpeed: float; // index 0x0
}

table MinigameRoadPuzzleMapTileExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	PrefabName: string; // index 0x0
	MapTileType: RoadPuzzleMapTileType; // index 0x0
}

table MiniGameRoadPuzzleRailSetRewardExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	LocalizePrefabID: string; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table MinigameRoadPuzzleRailTileExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	GroupId: long; // index 0x0
	OriginalTile: bool; // index 0x0
	PrefabName: string; // index 0x0
	RailTileType: RoadPuzzleRailTileType; // index 0x0
}

table MiniGameRoadPuzzleRewardExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	RewardParcelType: [ParcelType]; // index 0x0
	RewardParcelId: [long]; // index 0x0
	RewardParcelAmount: [long]; // index 0x0
}

table MinigameRoadPuzzleRoadRoundExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	Round: int; // index 0x0
	IsLoop: bool; // index 0x0
	EnterScenarioGroupId: long; // index 0x0
	EndScenarioGroupId: long; // index 0x0
	MapGroupId: long; // index 0x0
	RoundReward: long; // index 0x0
	AdditionalRewardID: [long]; // index 0x0
	AdditionalRewardAmount: [int]; // index 0x0
}

table MiniGameRoadPuzzleVoiceExcel {
	EventContentId: long; // index 0x0
	UniqueId: long; // index 0x0
	VoiceCondition: RoadPuzzleVoiceCondition; // index 0x0
	VoiceClip: uint; // index 0x0
}

table MissionEmergencyCompleteExcel {
	MissionId: long; // index 0x0
	EmergencyComplete: bool; // index 0x0
}

table MultiFloorRaidRewardExcel {
	RewardGroupId: long; // index 0x0
	ClearStageRewardProb: long; // index 0x0
	ClearStageRewardParcelType: ParcelType; // index 0x0
	ClearStageRewardParcelUniqueID: long; // index 0x0
	ClearStageRewardAmount: long; // index 0x0
}

table MultiFloorRaidSeasonManageExcel {
	SeasonId: long; // index 0x0
	LobbyEnterScenario: uint; // index 0x0
	ShowLobbyBanner: bool; // index 0x0
	SeasonStartDate: string; // index 0x0
	EndNoteLabelStartDate: string; // index 0x0
	SeasonEndDate: string; // index 0x0
	SettlementEndDate: string; // index 0x0
	OpenRaidBossGroupId: string; // index 0x0
	EnterScenarioKey: uint; // index 0x0
	LobbyImgPath: string; // index 0x0
	LevelImgPath: string; // index 0x0
	PlayTip: string; // index 0x0
}

table MultiFloorRaidStageExcel {
	Id: long; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
	BossGroupId: string; // index 0x0
	AssistSlot: int; // index 0x0
	StageOpenCondition: long; // index 0x0
	FloorListSection: bool; // index 0x0
	FloorListSectionOpenCondition: long; // index 0x0
	FloorListSectionLabel: uint; // index 0x0
	Difficulty: int; // index 0x0
	UseBossIndex: bool; // index 0x0
	UseBossAIPhaseSync: bool; // index 0x0
	FloorListImgPath: string; // index 0x0
	FloorImgPath: string; // index 0x0
	RaidCharacterId: long; // index 0x0
	BossCharacterId: [long]; // index 0x0
	StatChangeId: [long]; // index 0x0
	BattleDuration: long; // index 0x0
	GroundId: long; // index 0x0
	RecommendLevel: long; // index 0x0
	RewardGroupId: long; // index 0x0
	BattleReadyTimelinePath: [string]; // index 0x0
	BattleReadyTimelinePhaseStart: [int]; // index 0x0
	BattleReadyTimelinePhaseEnd: [int]; // index 0x0
	VictoryTimelinePath: string; // index 0x0
	ShowSkillCard: bool; // index 0x0
}

table MultiFloorRaidStatChangeExcel {
	StatChangeId: long; // index 0x0
	StatType: [StatType]; // index 0x0
	StatAdd: [long]; // index 0x0
	StatMultiply: [long]; // index 0x0
	ApplyCharacterId: [long]; // index 0x0
}

table ObstacleStatExcel {
	StringID: uint; // index 0x0
	Name: string; // index 0x0
	MaxHP1: long; // index 0x0
	MaxHP100: long; // index 0x0
	BlockRate: long; // index 0x0
	Dodge: long; // index 0x0
	CanNotStandRange: long; // index 0x0
	HighlightFloaterHeight: float; // index 0x0
	EnhanceLightArmorRate: long; // index 0x0
	EnhanceHeavyArmorRate: long; // index 0x0
	EnhanceUnarmedRate: long; // index 0x0
	EnhanceElasticArmorRate: long; // index 0x0
	EnhanceStructureRate: long; // index 0x0
	EnhanceNormalArmorRate: long; // index 0x0
	ReduceExDamagedRate: long; // index 0x0
}

table OpenConditionExcel {
	OpenConditionContentType: OpenConditionContent; // index 0x0
	LockUI: [string]; // index 0x0
	ShortcutPopupPriority: long; // index 0x0
	ShortcutUIName: [string]; // index 0x0
	ShortcutParam: int; // index 0x0
	Scene: string; // index 0x0
	HideWhenLocked: bool; // index 0x0
	AccountLevel: long; // index 0x0
	ScenarioModeId: long; // index 0x0
	CampaignStageId: long; // index 0x0
	MultipleConditionCheckType: MultipleConditionCheckType; // index 0x0
	OpenDayOfWeek: WeekDay; // index 0x0
	OpenHour: long; // index 0x0
	CloseDayOfWeek: WeekDay; // index 0x0
	CloseHour: long; // index 0x0
	OpenedCafeId: long; // index 0x0
	CafeIdforCafeRank: long; // index 0x0
	CafeRank: long; // index 0x0
	ContentsOpenShow: bool; // index 0x0
	ContentsOpenShortcutUI: string; // index 0x0
}

table OperatorExcel {
	UniqueId: long; // index 0x0
	GroupId: string; // index 0x0
	OperatorCondition: OperatorCondition; // index 0x0
	OutputSequence: int; // index 0x0
	RandomWeight: int; // index 0x0
	OutputDelay: int; // index 0x0
	Duration: int; // index 0x0
	OperatorOutputPriority: int; // index 0x0
	PortraitPath: string; // index 0x0
	TextLocalizeKey: string; // index 0x0
	VoiceId: [uint]; // index 0x0
	OperatorWaitQueue: bool; // index 0x0
}

table ScenarioBGEffectExcel {
	Name: uint; // index 0x0
	Effect: string; // index 0x0
	Effect2: string; // index 0x0
	Scroll: ScenarioBGScroll; // index 0x0
	ScrollTime: long; // index 0x0
	ScrollFrom: long; // index 0x0
	ScrollTo: long; // index 0x0
}

table ScenarioBGNameExcel {
	Name: uint; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	BGFileName: string; // index 0x0
	BGType: ScenarioBGType; // index 0x0
	AnimationRoot: string; // index 0x0
	AnimationName: string; // index 0x0
	SpineScale: float; // index 0x0
	SpineLocalPosX: int; // index 0x0
	SpineLocalPosY: int; // index 0x0
}

table ScenarioBGName_GlobalExcel {
	GroupName: uint; // index 0x0
	NameKr: uint; // index 0x0
	NameTw: uint; // index 0x0
	NameAsia: uint; // index 0x0
	NameNa: uint; // index 0x0
	NameGlobal: uint; // index 0x0
	NameTeen: uint; // index 0x0
}

table ScenarioCharacterEmotionExcel {
	EmoticonName: string; // index 0x0
	Name: uint; // index 0x0
}

table ScenarioCharacterNameExcel {
	CharacterName: uint; // index 0x0
	ProductionStep: ProductionStep; // index 0x0
	NameKR: string; // index 0x0
	NicknameKR: string; // index 0x0
	NameJP: string; // index 0x0
	NicknameJP: string; // index 0x0
	NameTH: string; // index 0x0
	NicknameTH: string; // index 0x0
	NameTW: string; // index 0x0
	NicknameTW: string; // index 0x0
	NameEN: string; // index 0x0
	NicknameEN: string; // index 0x0
	Shape: ScenarioCharacterShapes; // index 0x0
	SpinePrefabName: string; // index 0x0
	SmallPortrait: string; // index 0x0
}

table ScenarioCharacterSituationSetExcel {
	Name: uint; // index 0x0
	Face: string; // index 0x0
	Behavior: string; // index 0x0
	Action: string; // index 0x0
	Shape: string; // index 0x0
	Effect: uint; // index 0x0
	Emotion: uint; // index 0x0
}

table ScenarioContentCollectionExcel {
	Id: long; // index 0x0
	GroupId: long; // index 0x0
	UnlockConditionType: CollectionUnlockType; // index 0x0
	UnlockConditionParameter: [long]; // index 0x0
	MultipleConditionCheckType: MultipleConditionCheckType; // index 0x0
	UnlockConditionCount: long; // index 0x0
	IsObject: bool; // index 0x0
	IsHorizon: bool; // index 0x0
	EmblemResource: string; // index 0x0
	ThumbResource: string; // index 0x0
	FullResource: string; // index 0x0
	LocalizeEtcId: uint; // index 0x0
	SubNameLocalizeCodeId: string; // index 0x0
}

table ScenarioEffectExcel {
	EffectName: string; // index 0x0
	Name: uint; // index 0x0
}

table ScenarioModeExcel {
	ModeId: long; // index 0x0
	ModeType: ScenarioModeTypes; // index 0x0
	SubType: ScenarioModeSubTypes; // index 0x0
	VolumeId: long; // index 0x0
	ChapterId: long; // index 0x0
	EpisodeId: long; // index 0x0
	ExposedTime: string; // index 0x0
	Hide: bool; // index 0x0
	Open: bool; // index 0x0
	ScenarioOpenDate: string; // index 0x0
	ScenarioCloseDate: string; // index 0x0
	IsContinue: bool; // index 0x0
	EpisodeContinueModeId: long; // index 0x0
	FrontScenarioGroupId: [long]; // index 0x0
	StrategyId: long; // index 0x0
	GroundId: long; // index 0x0
	IsDefeatBattle: bool; // index 0x0
	BattleDuration: long; // index 0x0
	BackScenarioGroupId: [long]; // index 0x0
	ClearedModeId: [long]; // index 0x0
	ScenarioModeRewardId: long; // index 0x0
	IsScenarioSpecialReward: bool; // index 0x0
	AccountLevelLimit: long; // index 0x0
	ClearedStageId: long; // index 0x0
	NeedClub: Club; // index 0x0
	NeedClubStudentCount: int; // index 0x0
	EventContentId: long; // index 0x0
	EventContentType: EventContentType; // index 0x0
	EventContentCondition: long; // index 0x0
	EventContentConditionGroup: long; // index 0x0
	MapDifficulty: StageDifficulty; // index 0x0
	StepIndex: int; // index 0x0
	RecommendLevel: int; // index 0x0
	EventIconParcelPath: string; // index 0x0
	EventBannerTitle: uint; // index 0x0
	lof: bool; // index 0x0
	StageTopography: StageTopography; // index 0x0
	FixedEchelonId: long; // index 0x0
	CompleteReportEventName: string; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
	CollectionGroupId: long; // index 0x0
}

table ScenarioModeRewardExcel {
	ScenarioModeRewardId: long; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardProb: int; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: int; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table ScenarioResourceInfoExcel {
	Id: long; // index 0x0
	ScenarioModeId: long; // index 0x0
	PriorityOrder: long; // index 0x0
	PVDisplayOrder: long; // index 0x0
	VideoId: long; // index 0x0
	BgmId: long; // index 0x0
	AudioName: string; // index 0x0
	SpinePath: string; // index 0x0
	Ratio: int; // index 0x0
	LobbyAniPath: string; // index 0x0
	MovieCGPath: string; // index 0x0
	LocalizeId: uint; // index 0x0
}

table ScenarioScriptExcel {
	GroupId: long; // index 0x0
	SelectionGroup: long; // index 0x0
	BGMId: long; // index 0x0
	Sound: string; // index 0x0
	Transition: uint; // index 0x0
	BGName: uint; // index 0x0
	BGEffect: uint; // index 0x0
	PopupFileName: string; // index 0x0
	ScriptKr: string; // index 0x0
	TextJp: string; // index 0x0
	TextTh: string; // index 0x0
	TextTw: string; // index 0x0
	TextEn: string; // index 0x0
	VoiceId: uint; // index 0x0
	TeenMode: bool; // index 0x0
}

table ScenarioTransitionExcel {
	Name: uint; // index 0x0
	TransitionOut: string; // index 0x0
	TransitionOutDuration: long; // index 0x0
	TransitionOutResource: string; // index 0x0
	TransitionIn: string; // index 0x0
	TransitionInDuration: long; // index 0x0
	TransitionInResource: string; // index 0x0
}

table SchoolDungeonRewardExcel {
	GroupId: long; // index 0x0
	DungeonType: SchoolDungeonType; // index 0x0
	RewardTag: RewardTag; // index 0x0
	RewardParcelType: ParcelType; // index 0x0
	RewardParcelId: long; // index 0x0
	RewardParcelAmount: long; // index 0x0
	RewardParcelProbability: long; // index 0x0
	IsDisplayed: bool; // index 0x0
}

table SchoolDungeonStageExcel {
	StageId: long; // index 0x0
	DungeonType: SchoolDungeonType; // index 0x0
	Difficulty: int; // index 0x0
	BattleDuration: long; // index 0x0
	PrevStageId: long; // index 0x0
	StageEnterCostType: [ParcelType]; // index 0x0
	StageEnterCostId: [long]; // index 0x0
	StageEnterCostAmount: [long]; // index 0x0
	StageEnterCostMinimumAmount: [long]; // index 0x0
	GroundId: int; // index 0x0
	StarGoal: [StarGoalType]; // index 0x0
	StarGoalAmount: [int]; // index 0x0
	StageTopography: StageTopography; // index 0x0
	RecommandLevel: long; // index 0x0
	StageRewardId: long; // index 0x0
	PlayTimeLimitInSeconds: long; // index 0x0
	EchelonExtensionType: EchelonExtensionType; // index 0x0
}

table ServiceActionExcel {
	ServiceActionType: ServiceActionType; // index 0x0
	IsLegacy: bool; // index 0x0
	GoodsId: long; // index 0x0
}

table ShortcutTypeExcel {
	Id: long; // index 0x0
	IsAscending: bool; // index 0x0
	ContentType: [ShortcutContentType]; // index 0x0
}

table SkillAdditionalTooltipExcel {
	GroupId: long; // index 0x0
	AdditionalSkillGroupId: string; // index 0x0
	ShowSkillSlot: string; // index 0x0
}

table SoundUIExcel {
	ID: long; // index 0x0
	SoundUniqueId: string; // index 0x0
	Path: string; // index 0x0
}

table SpineLipsyncExcel {
	VoiceId: uint; // index 0x0
	AnimJson: string; // index 0x0
	AnimJsonkr: string; // index 0x0
}

table StageFileRefreshSettingExcel {
	GroundId: long; // index 0x0
	ForceSave: bool; // index 0x0
}

table StatLevelInterpolationExcel {
	Level: long; // index 0x0
	StatTypeIndex: [long]; // index 0x0
}

table StickerGroupExcel {
	Id: long; // index 0x0
	Layout: string; // index 0x0
	UniqueLayoutPath: string; // index 0x0
	StickerGroupIconpath: string; // index 0x0
	PageCompleteSlot: long; // index 0x0
	PageCompleteRewardParcelType: ParcelType; // index 0x0
	PageCompleteRewardParcelId: long; // index 0x0
	PageCompleteRewardAmount: int; // index 0x0
	LocalizeTitle: uint; // index 0x0
	LocalizeDescription: uint; // index 0x0
	StickerGroupCoverpath: string; // index 0x0
}

table StickerPageContentExcel {
	Id: long; // index 0x0
	StickerGroupId: long; // index 0x0
	StickerPageId: long; // index 0x0
	StickerSlot: long; // index 0x0
	StickerGetConditionType: StickerGetConditionType; // index 0x0
	StickerCheckPassType: StickerCheckPassType; // index 0x0
	GetStickerConditionType: GetStickerConditionType; // index 0x0
	StickerGetConditionCount: long; // index 0x0
	StickerGetConditionParameter: [long]; // index 0x0
	StickerGetConditionParameterTag: [Tag]; // index 0x0
	PackedStickerIconLocalizeEtcId: uint; // index 0x0
	PackedStickerIconPath: string; // index 0x0
	IconPath: string; // index 0x0
	StickerDetailPath: string; // index 0x0
}

table StoryStrategyExcel {
	Id: long; // index 0x0
	Name: string; // index 0x0
	Localize: string; // index 0x0
	StageEnterEchelonCount: int; // index 0x0
	BattleDuration: long; // index 0x0
	WhiteListId: long; // index 0x0
	StrategyMap: string; // index 0x0
	StrategyMapBG: string; // index 0x0
	MaxTurn: int; // index 0x0
	StageTopography: StageTopography; // index 0x0
	StrategyEnvironment: StrategyEnvironment; // index 0x0
	ContentType: ContentType; // index 0x0
	BGMId: long; // index 0x0
	FirstClearReportEventName: string; // index 0x0
}

table ToastExcel {
	Id: uint; // index 0x0
	ToastType: ToastType; // index 0x0
	MissionId: uint; // index 0x0
	TextId: uint; // index 0x0
	LifeTime: long; // index 0x0
}

table TutorialCharacterDialogExcel {
	TalkId: long; // index 0x0
	AnimationName: string; // index 0x0
	LocalizeKR: string; // index 0x0
	LocalizeJP: string; // index 0x0
	LocalizeTH: string; // index 0x0
	LocalizeTW: string; // index 0x0
	LocalizeEN: string; // index 0x0
	VoiceId: uint; // index 0x0
}

table TutorialExcel {
	ID: long; // index 0x0
	CompletionReportEventName: string; // index 0x0
	CompulsoryTutorial: bool; // index 0x0
	DescriptionTutorial: bool; // index 0x0
	TutorialStageId: long; // index 0x0
	UIName: [string]; // index 0x0
	TutorialParentName: [string]; // index 0x0
}

table TutorialFailureImageExcel {
	Id: long; // index 0x0
	Contents: TutorialFailureContentType; // index 0x0
	Type: string; // index 0x0
	ImagePathKr: string; // index 0x0
	ImagePathJp: string; // index 0x0
	ImagePathTh: string; // index 0x0
	ImagePathTw: string; // index 0x0
	ImagePathEn: string; // index 0x0
}

table UnderCoverStageExcel {
	GroupId: long; // index 0x0
	StageNameFile: string; // index 0x0
	StageTryCount: int; // index 0x0
	ApplySkip: bool; // index 0x0
	SkipCount: int; // index 0x0
	ShowClearScene: bool; // index 0x0
	StageTips: uint; // index 0x0
	StageName: uint; // index 0x0
}

table VideoExcel {
	Id: long; // index 0x0
	Nation: [Nation]; // index 0x0
	VideoPath: [string]; // index 0x0
	VideoTeenPath: [string]; // index 0x0
	SoundPath: [string]; // index 0x0
	SoundVolume: [float]; // index 0x0
}

table Video_GlobalExcel {
	VideoId: long; // index 0x0
	VideoPathkr: string; // index 0x0
	VideoTeenPathkr: string; // index 0x0
	VideoPathth: string; // index 0x0
	VideoTeenPathth: string; // index 0x0
	VideoPathtw: string; // index 0x0
	VideoTeenPathtw: string; // index 0x0
	VideoPathen: string; // index 0x0
	VideoTeenPathen: string; // index 0x0
}

table VoiceCommonExcel {
	VoiceEvent: VoiceEvent; // index 0x0
	Rate: long; // index 0x0
	VoiceHash: [uint]; // index 0x0
}

table VoiceExcel {
	UniqueId: long; // index 0x0
	Id: uint; // index 0x0
	Nation: [Nation]; // index 0x0
	Path: [string]; // index 0x0
	Volume: [float]; // index 0x0
}

table VoiceLogicEffectExcel {
	LogicEffectNameHash: uint; // index 0x0
	Self: bool; // index 0x0
	Priority: int; // index 0x0
	VoiceHash: [uint]; // index 0x0
	VoiceId: uint; // index 0x0
}

table VoiceRoomExceptionExcel {
	CostumeUniqueId: long; // index 0x0
	LinkedCharacterVoicePrintType: CVPrintType; // index 0x0
	LinkedCostumeUniqueId: long; // index 0x0
}

table VoiceSpineExcel {
	UniqueId: long; // index 0x0
	Id: uint; // index 0x0
	Nation: [Nation]; // index 0x0
	Path: [string]; // index 0x0
	SoundVolume: [float]; // index 0x0
}

table VoiceTimelineExcel {
	UniqueId: long; // index 0x0
	Id: uint; // index 0x0
	Nation: [Nation]; // index 0x0
	Path: [string]; // index 0x0
	SoundVolume: [float]; // index 0x0
}

table WorldRaidConditionExcel {
	Id: long; // index 0x0
	LockUI: [string]; // index 0x0
	HideWhenLocked: bool; // index 0x0
	AccountLevel: long; // index 0x0
	ScenarioModeId: [long]; // index 0x0
	CampaignStageID: [long]; // index 0x0
	MultipleConditionCheckType: MultipleConditionCheckType; // index 0x0
	AfterWhenDate: string; // index 0x0
	WorldRaidBossKill: [long]; // index 0x0
}

